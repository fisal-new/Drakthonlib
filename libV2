--[[
    ____             _    _   _                   
   |  _ \  _ __ __ _| | _| |_| |__   ___  _ __   
   | | | || '__/ _` | |/ / __| '_ \ / _ \| '_ \  
   | |_| || | | (_| |   <| |_| | | | (_) | | | | 
   |____/ |_|  \__,_|_|\_\\__|_| |_|\___/|_| |_| 
                                                  
   🐉 Drakthon UI Library V3
   Auto-Resize & Responsive Design
]]

local Drakthon = {}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")

-- Theme
local Theme = {
    Background = Color3.fromRGB(15, 15, 20),
    Secondary = Color3.fromRGB(20, 20, 28),
    Tertiary = Color3.fromRGB(25, 25, 35),
    Accent = Color3.fromRGB(138, 43, 226),
    AccentGradient = Color3.fromRGB(75, 0, 130),
    Text = Color3.fromRGB(255, 255, 255),
    TextDark = Color3.fromRGB(180, 180, 190),
    Success = Color3.fromRGB(46, 204, 113),
    Error = Color3.fromRGB(231, 76, 60),
    Warning = Color3.fromRGB(241, 196, 15),
    Info = Color3.fromRGB(52, 152, 219)
}

-- Utilities
local function Tween(obj, props, dur, style, dir, callback)
    local tween = TweenService:Create(obj, TweenInfo.new(dur or 0.3, style or Enum.EasingStyle.Quad, dir or Enum.EasingDirection.Out), props)
    if callback then tween.Completed:Connect(callback) end
    tween:Play()
    return tween
end

local function Create(class, props)
    local obj = Instance.new(class)
    for k, v in pairs(props) do
        if k ~= "Parent" then obj[k] = v end
    end
    obj.Parent = props.Parent
    return obj
end

local function AddCorner(parent, radius)
    return Create("UICorner", {Parent = parent, CornerRadius = UDim.new(0, radius or 8)})
end

local function MakeDraggable(frame, handle)
    local dragging, dragInput, mousePos, framePos
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then dragging = false end
            end)
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - mousePos
            frame.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
        end
    end)
end

-- Notification Queue
local NotificationQueue = {}

function Drakthon:Notify(config)
    config = config or {}
    local Title = config.Title or "Notification"
    local Content = config.Content or ""
    local Duration = config.Duration or 3
    local Type = config.Type or "Default"
    
    local Color = Theme.Accent
    if Type == "Success" then Color = Theme.Success
    elseif Type == "Warning" then Color = Theme.Warning
    elseif Type == "Error" then Color = Theme.Error
    elseif Type == "Info" then Color = Theme.Info end
    
    table.insert(NotificationQueue, {Title = Title, Content = Content, Duration = Duration, Color = Color})
    
    if #NotificationQueue == 1 then
        spawn(function() self:ProcessNotification() end)
    end
end

function Drakthon:ProcessNotification()
    while #NotificationQueue > 0 do
        local notif = NotificationQueue[1]
        local ScreenGui = self.NotificationHolder
        
        local NotifFrame = Create("Frame", {
            Parent = ScreenGui,
            BackgroundColor3 = Theme.Secondary,
            BorderSizePixel = 0,
            Position = UDim2.new(1, 20, 1, -20),
            Size = UDim2.new(0, 0, 0, 80),
            AnchorPoint = Vector2.new(1, 1)
        })
        
        AddCorner(NotifFrame, 10)
        
        local Accent = Create("Frame", {
            Parent = NotifFrame,
            BackgroundColor3 = notif.Color,
            BorderSizePixel = 0,
            Size = UDim2.new(0, 4, 1, 0)
        })
        
        local TitleLabel = Create("TextLabel", {
            Parent = NotifFrame,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 15, 0, 10),
            Size = UDim2.new(1, -30, 0, 20),
            Font = Enum.Font.GothamBold,
            Text = notif.Title,
            TextColor3 = Theme.Text,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        
        local ContentLabel = Create("TextLabel", {
            Parent = NotifFrame,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 15, 0, 35),
            Size = UDim2.new(1, -30, 0, 35),
            Font = Enum.Font.Gotham,
            Text = notif.Content,
            TextColor3 = Theme.TextDark,
            TextSize = 12,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextWrapped = true,
            TextYAlignment = Enum.TextYAlignment.Top
        })
        
        Tween(NotifFrame, {Size = UDim2.new(0, 320, 0, 80), Position = UDim2.new(1, -20, 1, -20)}, 0.4)
        wait(notif.Duration)
        Tween(NotifFrame, {Position = UDim2.new(1, 20, 1, -20), Size = UDim2.new(0, 0, 0, 80)}, 0.3, nil, nil, function()
            NotifFrame:Destroy()
            table.remove(NotificationQueue, 1)
        end)
        wait(0.4)
    end
end

-- Create Window
function Drakthon:CreateWindow(config)
    config = config or {}
    local WindowName = config.Name or "Drakthon UI"
    local Icon = config.Icon or "rbxassetid://7733955511"
    local IntroEnabled = config.IntroEnabled ~= false
    local Keybind = config.Keybind or Enum.KeyCode.RightControl
    
    -- ScreenGui
    local ScreenGui = Create("ScreenGui", {
        Name = "DrakthonUI",
        Parent = gethui and gethui() or (RunService:IsStudio() and Players.LocalPlayer.PlayerGui or CoreGui),
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false
    })
    
    self.NotificationHolder = Create("Frame", {
        Parent = ScreenGui,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        ZIndex = 1000
    })
    
    -- Main Frame
    local Main = Create("Frame", {
        Parent = ScreenGui,
        BackgroundColor3 = Theme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -300, 0.5, -250),
        Size = UDim2.new(0, 0, 0, 0),
        ClipsDescendants = true
    })
    
    AddCorner(Main, 12)
    
    -- Header
    local Header = Create("Frame", {
        Parent = Main,
        BackgroundColor3 = Theme.Secondary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 50)
    })
    
    AddCorner(Header, 12)
    
    local HeaderGradient = Create("Frame", {
        Parent = Header,
        BackgroundColor3 = Theme.Accent,
        BackgroundTransparency = 0.85,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0)
    })
    
    AddCorner(HeaderGradient, 12)
    
    Create("UIGradient", {
        Parent = HeaderGradient,
        Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Theme.Accent), ColorSequenceKeypoint.new(1, Theme.AccentGradient)},
        Rotation = 45
    })
    
    local IconLabel = Create("ImageLabel", {
        Parent = Header,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 15, 0.5, 0),
        Size = UDim2.new(0, 28, 0, 28),
        AnchorPoint = Vector2.new(0, 0.5),
        Image = Icon
    })
    
    AddCorner(IconLabel, 8)
    
    local Title = Create("TextLabel", {
        Parent = Header,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 53, 0, 0),
        Size = UDim2.new(1, -120, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = WindowName,
        TextColor3 = Theme.Text,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    local CloseBtn = Create("TextButton", {
        Parent = Header,
        BackgroundColor3 = Theme.Error,
        Position = UDim2.new(1, -35, 0.5, 0),
        Size = UDim2.new(0, 25, 0, 25),
        AnchorPoint = Vector2.new(0, 0.5),
        Font = Enum.Font.GothamBold,
        Text = "×",
        TextColor3 = Theme.Text,
        TextSize = 18,
        AutoButtonColor = false
    })
    
    AddCorner(CloseBtn, 6)
    
    CloseBtn.MouseButton1Click:Connect(function()
        Tween(Main, {Size = UDim2.new(0, 0, 0, 0)}, 0.3, nil, nil, function() ScreenGui:Destroy() end)
    end)
    
    -- Navigation
    local Nav = Create("Frame", {
        Parent = Main,
        BackgroundColor3 = Theme.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 50),
        Size = UDim2.new(0, 160, 1, -50)
    })
    
    Create("UIListLayout", {
        Parent = Nav,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5)
    })
    
    Create("UIPadding", {
        Parent = Nav,
        PaddingTop = UDim.new(0, 10),
        PaddingLeft = UDim.new(0, 10),
        PaddingRight = UDim.new(0, 10),
        PaddingBottom = UDim.new(0, 10)
    })
    
    -- Content
    local Content = Create("Frame", {
        Parent = Main,
        BackgroundColor3 = Theme.Tertiary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 160, 0, 50),
        Size = UDim2.new(1, -160, 1, -50)
    })
    
    MakeDraggable(Main, Header)
    
    -- Intro
    if IntroEnabled then
        local Intro = Create("Frame", {
            Parent = Main,
            BackgroundColor3 = Theme.Background,
            Size = UDim2.new(1, 0, 1, 0),
            ZIndex = 100
        })
        
        AddCorner(Intro, 12)
        
        local Logo = Create("ImageLabel", {
            Parent = Intro,
            BackgroundTransparency = 1,
            Position = UDim2.new(0.5, 0, 0.4, 0),
            Size = UDim2.new(0, 60, 0, 60),
            AnchorPoint = Vector2.new(0.5, 0.5),
            Image = Icon,
            ImageColor3 = Theme.Accent
        })
        
        local LoadText = Create("TextLabel", {
            Parent = Intro,
            BackgroundTransparency = 1,
            Position = UDim2.new(0.5, 0, 0.55, 0),
            Size = UDim2.new(0, 200, 0, 20),
            AnchorPoint = Vector2.new(0.5, 0.5),
            Font = Enum.Font.GothamBold,
            Text = "Loading...",
            TextColor3 = Theme.Text,
            TextSize = 14
        })
        
        local Bar = Create("Frame", {
            Parent = Intro,
            BackgroundColor3 = Theme.Secondary,
            Position = UDim2.new(0.5, 0, 0.62, 0),
            Size = UDim2.new(0, 250, 0, 6),
            AnchorPoint = Vector2.new(0.5, 0.5)
        })
        
        AddCorner(Bar, 999)
        
        local Fill = Create("Frame", {
            Parent = Bar,
            BackgroundColor3 = Theme.Accent,
            Size = UDim2.new(0, 0, 1, 0)
        })
        
        AddCorner(Fill, 999)
        
        Tween(Main, {Size = UDim2.new(0, 600, 0, 400)}, 0.5)
        wait(0.5)
        Tween(Fill, {Size = UDim2.new(1, 0, 1, 0)}, 1)
        wait(1)
        Tween(Intro, {BackgroundTransparency = 1}, 0.3)
        Tween(Logo, {ImageTransparency = 1}, 0.3)
        Tween(LoadText, {TextTransparency = 1}, 0.3)
        Tween(Bar, {BackgroundTransparency = 1}, 0.3)
        Tween(Fill, {BackgroundTransparency = 1}, 0.3)
        wait(0.3)
        Intro:Destroy()
    else
        Tween(Main, {Size = UDim2.new(0, 600, 0, 400)}, 0.5)
    end
    
    -- Keybind
    UserInputService.InputBegan:Connect(function(input, gpe)
        if not gpe and input.KeyCode == Keybind then
            Main.Visible = not Main.Visible
        end
    end)
    
    -- Window Object
    local Window = {Tabs = {}, CurrentTab = nil}
    
    function Window:CreateTab(config)
        config = config or {}
        local TabName = config.Name or "Tab"
        local TabIcon = config.Icon or "rbxassetid://7733955511"
        
        local TabBtn = Create("TextButton", {
            Parent = Nav,
            BackgroundColor3 = Theme.Tertiary,
            Size = UDim2.new(1, 0, 0, 38),
            Font = Enum.Font.GothamSemibold,
            Text = "",
            AutoButtonColor = false
        })
        
        AddCorner(TabBtn, 8)
        
        local TabIconLabel = Create("ImageLabel", {
            Parent = TabBtn,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0.5, 0),
            Size = UDim2.new(0, 20, 0, 20),
            AnchorPoint = Vector2.new(0, 0.5),
            Image = TabIcon,
            ImageColor3 = Theme.TextDark
        })
        
        local TabLabel = Create("TextLabel", {
            Parent = TabBtn,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 38, 0, 0),
            Size = UDim2.new(1, -45, 1, 0),
            Font = Enum.Font.GothamSemibold,
            Text = TabName,
            TextColor3 = Theme.TextDark,
            TextSize = 13,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        
        local TabContent = Create("ScrollingFrame", {
            Parent = Content,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            Visible = false,
            ScrollBarThickness = 4,
            ScrollBarImageColor3 = Theme.Accent,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            AutomaticCanvasSize = Enum.AutomaticSize.Y
        })
        
        Create("UIPadding", {
            Parent = TabContent,
            PaddingTop = UDim.new(0, 15),
            PaddingLeft = UDim.new(0, 15),
            PaddingRight = UDim.new(0, 15),
            PaddingBottom = UDim.new(0, 15)
        })
        
        Create("UIListLayout", {
            Parent = TabContent,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 10)
        })
        
        TabBtn.MouseButton1Click:Connect(function()
            for _, tab in pairs(Window.Tabs) do tab:Deselect() end
            Window.CurrentTab = TabName
            TabContent.Visible = true
            Tween(TabBtn, {BackgroundColor3 = Theme.Accent}, 0.2)
            Tween(TabLabel, {TextColor3 = Theme.Text}, 0.2)
            Tween(TabIconLabel, {ImageColor3 = Theme.Text}, 0.2)
        end)
        
        local Tab = {}
        
        function Tab:Deselect()
            TabContent.Visible = false
            Tween(TabBtn, {BackgroundColor3 = Theme.Tertiary}, 0.2)
            Tween(TabLabel, {TextColor3 = Theme.TextDark}, 0.2)
            Tween(TabIconLabel, {ImageColor3 = Theme.TextDark}, 0.2)
        end
        
        function Tab:CreateButton(config)
            config = config or {}
            local Name = config.Name or "Button"
            local Callback = config.Callback or function() end
            
            local Btn = Create("TextButton", {
                Parent = TabContent,
                BackgroundColor3 = Theme.Secondary,
                Size = UDim2.new(1, 0, 0, 38),
                Font = Enum.Font.GothamSemibold,
                Text = Name,
                TextColor3 = Theme.Text,
                TextSize = 13,
                AutoButtonColor = false
            })
            
            AddCorner(Btn, 8)
            
            Btn.MouseButton1Click:Connect(function()
                spawn(Callback)
            end)
            
            Btn.MouseEnter:Connect(function() Tween(Btn, {BackgroundColor3 = Theme.Tertiary}, 0.2) end)
            Btn.MouseLeave:Connect(function() Tween(Btn, {BackgroundColor3 = Theme.Secondary}, 0.2) end)
        end
        
        function Tab:CreateToggle(config)
            config = config or {}
            local Name = config.Name or "Toggle"
            local Default = config.Default or false
            local Callback = config.Callback or function() end
            
            local Frame = Create("Frame", {
                Parent = TabContent,
                BackgroundColor3 = Theme.Secondary,
                Size = UDim2.new(1, 0, 0, 38)
            })
            
            AddCorner(Frame, 8)
            
            local Label = Create("TextLabel", {
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -70, 1, 0),
                Font = Enum.Font.GothamSemibold,
                Text = Name,
                TextColor3 = Theme.Text,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local ToggleBtn = Create("TextButton", {
                Parent = Frame,
                BackgroundColor3 = Default and Theme.Accent or Theme.Tertiary,
                Position = UDim2.new(1, -50, 0.5, 0),
                Size = UDim2.new(0, 42, 0, 22),
                AnchorPoint = Vector2.new(0, 0.5),
                Text = "",
                AutoButtonColor = false
            })
            
            AddCorner(ToggleBtn, 999)
            
            local Indicator = Create("Frame", {
                Parent = ToggleBtn,
                BackgroundColor3 = Theme.Text,
                Position = Default and UDim2.new(1, -20, 0.5, 0) or UDim2.new(0, 2, 0.5, 0),
                Size = UDim2.new(0, 18, 0, 18),
                AnchorPoint = Vector2.new(0, 0.5)
            })
            
            AddCorner(Indicator, 999)
            
            local toggled = Default
            
            ToggleBtn.MouseButton1Click:Connect(function()
                toggled = not toggled
                Tween(ToggleBtn, {BackgroundColor3 = toggled and Theme.Accent or Theme.Tertiary}, 0.2)
                Tween(Indicator, {Position = toggled and UDim2.new(1, -20, 0.5, 0) or UDim2.new(0, 2, 0.5, 0)}, 0.2)
                spawn(Callback, toggled)
            end)
            
            return {
                Set = function(_, val)
                    toggled = val
                    ToggleBtn.BackgroundColor3 = toggled and Theme.Accent or Theme.Tertiary
                    Indicator.Position = toggled and UDim2.new(1, -20, 0.5, 0) or UDim2.new(0, 2, 0.5, 0)
                    spawn(Callback, toggled)
                end
            }
        end
        
        function Tab:CreateSlider(config)
            config = config or {}
            local Name = config.Name or "Slider"
            local Min = config.Min or 0
            local Max = config.Max or 100
            local Default = config.Default or Min
            local Increment = config.Increment or 1
            local Callback = config.Callback or function() end
            
            local Frame = Create("Frame", {
                Parent = TabContent,
                BackgroundColor3 = Theme.Secondary,
                Size = UDim2.new(1, 0, 0, 50)
            })
            
            AddCorner(Frame, 8)
            
            local Label = Create("TextLabel", {
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 5),
                Size = UDim2.new(1, -80, 0, 20),
                Font = Enum.Font.GothamSemibold,
                Text = Name,
                TextColor3 = Theme.Text,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local Value = Create("TextLabel", {
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -15, 0, 5),
                Size = UDim2.new(0, 0, 0, 20),
                Font = Enum.Font.GothamBold,
                Text = tostring(Default),
                TextColor3 = Theme.Accent,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Right
            })
            
            local Track = Create("Frame", {
                Parent = Frame,
                BackgroundColor3 = Theme.Tertiary,
                Position = UDim2.new(0, 15, 1, -15),
                Size = UDim2.new(1, -30, 0, 4)
            })
            
            AddCorner(Track, 999)
            
            local Fill = Create("Frame", {
                Parent = Track,
                BackgroundColor3 = Theme.Accent,
                Size = UDim2.new(0, 0, 1, 0)
            })
            
            AddCorner(Fill, 999)
            
            local Dot = Create("Frame", {
                Parent = Track,
                BackgroundColor3 = Theme.Text,
                Position = UDim2.new(0, 0, 0.5, 0),
                Size = UDim2.new(0, 10, 0, 10),
                AnchorPoint = Vector2.new(0.5, 0.5)
            })
            
            AddCorner(Dot, 999)
            
            local dragging = false
            local value = Default
            
            local function Update(val)
                value = math.clamp(math.floor((val / Increment) + 0.5) * Increment, Min, Max)
                local percent = (value - Min) / (Max - Min)
                Value.Text = tostring(value)
                Fill.Size = UDim2.new(percent, 0, 1, 0)
                Dot.Position = UDim2.new(percent, 0, 0.5, 0)
                spawn(Callback, value)
            end
            
            Update(Default)
            
            Track.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    Tween(Dot, {Size = UDim2.new(0, 14, 0, 14)}, 0.1)
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                    Tween(Dot, {Size = UDim2.new(0, 10, 0, 10)}, 0.1)
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local percent = math.clamp((input.Position.X - Track.AbsolutePosition.X) / Track.AbsoluteSize.X, 0, 1)
                    Update(Min + (percent * (Max - Min)))
                end
            end)
            
            return {Set = function(_, val) Update(val) end}
        end
        
        function Tab:CreateDropdown(config)
            config = config or {}
            local Name = config.Name or "Dropdown"
            local Options = config.Options or {"Option 1"}
            local Default = config.Default or Options[1]
            local Callback = config.Callback or function() end
            
            local Frame = Create("Frame", {
                Parent = TabContent,
                BackgroundColor3 = Theme.Secondary,
                Size = UDim2.new(1, 0, 0, 38),
                ClipsDescendants = true
            })
            
            AddCorner(Frame, 8)
            
            local Btn = Create("TextButton", {
                Parent = Frame,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 38),
                Text = "",
                AutoButtonColor = false
            })
            
            local Label = Create("TextLabel", {
                Parent = Btn,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -80, 1, 0),
                Font = Enum.Font.GothamSemibold,
                Text = Name,
                TextColor3 = Theme.Text,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local Selected = Create("TextLabel", {
                Parent = Btn,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -50, 0, 0),
                Size = UDim2.new(0, 0, 1, 0),
                Font = Enum.Font.Gotham,
                Text = Default or "...",
                TextColor3 = Theme.Accent,
                TextSize = 12,
                TextXAlignment = Enum.TextXAlignment.Right
            })
            
            local Arrow = Create("TextLabel", {
                Parent = Btn,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -18, 0, 0),
                Size = UDim2.new(0, 18, 1, 0),
                Font = Enum.Font.GothamBold,
                Text = "▼",
                TextColor3 = Theme.TextDark,
                TextSize = 10
            })
            
            local OptionsContainer = Create("Frame", {
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 38),
                Size = UDim2.new(1, 0, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y
            })
            
            Create("UIListLayout", {
                Parent = OptionsContainer,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 2)
            })
            
            local opened = false
            local selected = Default
            
            for _, opt in ipairs(Options) do
                local OptBtn = Create("TextButton", {
                    Parent = OptionsContainer,
                    BackgroundColor3 = Theme.Tertiary,
                    Size = UDim2.new(1, 0, 0, 28),
                    Font = Enum.Font.Gotham,
                    Text = opt,
                    TextColor3 = Theme.Text,
                    TextSize = 12,
                    AutoButtonColor = false
                })
                
                AddCorner(OptBtn, 6)
                
                OptBtn.MouseButton1Click:Connect(function()
                    selected = opt
                    Selected.Text = opt
                    opened = false
                    Tween(Arrow, {Rotation = 0}, 0.2)
                    Tween(Frame, {Size = UDim2.new(1, 0, 0, 38)}, 0.3)
                    spawn(Callback, opt)
                end)
                
                OptBtn.MouseEnter:Connect(function() Tween(OptBtn, {BackgroundColor3 = Theme.Accent}, 0.2) end)
                OptBtn.MouseLeave:Connect(function() Tween(OptBtn, {BackgroundColor3 = Theme.Tertiary}, 0.2) end)
            end
            
            Btn.MouseButton1Click:Connect(function()
                opened = not opened
                if opened then
                    Tween(Arrow, {Rotation = 180}, 0.2)
                    Tween(Frame, {Size = UDim2.new(1, 0, 0, 38 + OptionsContainer.AbsoluteSize.Y + 5)}, 0.3)
                else
                    Tween(Arrow, {Rotation = 0}, 0.2)
                    Tween(Frame, {Size = UDim2.new(1, 0, 0, 38)}, 0.3)
                end
            end)
            
            return {Set = function(_, opt) selected = opt Selected.Text = opt spawn(Callback, opt) end}
        end
        
        function Tab:CreateInput(config)
            config = config or {}
            local Name = config.Name or "Input"
            local Placeholder = config.Placeholder or "Type here..."
            local Default = config.Default or ""
            local Callback = config.Callback or function() end
            
            local Frame = Create("Frame", {
                Parent = TabContent,
                BackgroundColor3 = Theme.Secondary,
                Size = UDim2.new(1, 0, 0, 65)
            })
            
            AddCorner(Frame, 8)
            
            local Label = Create("TextLabel", {
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 5),
                Size = UDim2.new(1, -30, 0, 20),
                Font = Enum.Font.GothamSemibold,
                Text = Name,
                TextColor3 = Theme.Text,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local Input = Create("TextBox", {
                Parent = Frame,
                BackgroundColor3 = Theme.Tertiary,
                Position = UDim2.new(0, 15, 0, 30),
                Size = UDim2.new(1, -30, 0, 28),
                Font = Enum.Font.Gotham,
                PlaceholderText = Placeholder,
                PlaceholderColor3 = Theme.TextDark,
                Text = Default,
                TextColor3 = Theme.Text,
                TextSize = 12,
                ClearTextOnFocus = false
            })
            
            AddCorner(Input, 6)
            
            Create("UIPadding", {
                Parent = Input,
                PaddingLeft = UDim.new(0, 10),
                PaddingRight = UDim.new(0, 10)
            })
            
            Input.FocusLost:Connect(function() spawn(Callback, Input.Text) end)
            
            return {Set = function(_, txt) Input.Text = txt end}
        end
        
        function Tab:CreateLabel(text)
            local Label = Create("TextLabel", {
                Parent = TabContent,
                BackgroundColor3 = Theme.Secondary,
                Size = UDim2.new(1, 0, 0, 32),
                Font = Enum.Font.Gotham,
                Text = text,
                TextColor3 = Theme.TextDark,
                TextSize = 13,
                TextWrapped = true
            })
            
            AddCorner(Label, 8)
            
            return {Set = function(_, txt) Label.Text = txt end}
        end
        
        function Tab:CreateSection(name)
            local Section = Create("Frame", {
                Parent = TabContent,
                BackgroundColor3 = Theme.Secondary,
                Size = UDim2.new(1, 0, 0, 35)
            })
            
            AddCorner(Section, 8)
            
            Create("TextLabel", {
                Parent = Section,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -30, 1, 0),
                Font = Enum.Font.GothamBold,
                Text = name,
                TextColor3 = Theme.Accent,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left
            })
        end
        
        function Tab:CreateColorPicker(config)
            config = config or {}
            local Name = config.Name or "Color"
            local Default = config.Default or Color3.fromRGB(255, 255, 255)
            local Callback = config.Callback or function() end
            
            local Frame = Create("Frame", {
                Parent = TabContent,
                BackgroundColor3 = Theme.Secondary,
                Size = UDim2.new(1, 0, 0, 38)
            })
            
            AddCorner(Frame, 8)
            
            local Label = Create("TextLabel", {
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -70, 1, 0),
                Font = Enum.Font.GothamSemibold,
                Text = Name,
                TextColor3 = Theme.Text,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local ColorBox = Create("TextButton", {
                Parent = Frame,
                BackgroundColor3 = Default,
                Position = UDim2.new(1, -50, 0.5, 0),
                Size = UDim2.new(0, 40, 0, 24),
                AnchorPoint = Vector2.new(0, 0.5),
                Text = "",
                AutoButtonColor = false
            })
            
            AddCorner(ColorBox, 6)
            
            local currentColor = Default
            
            ColorBox.MouseButton1Click:Connect(function()
                spawn(Callback, currentColor)
            end)
            
            return {
                Set = function(_, col)
                    currentColor = col
                    ColorBox.BackgroundColor3 = col
                    spawn(Callback, col)
                end
            }
        end
        
        function Tab:CreateKeybind(config)
            config = config or {}
            local Name = config.Name or "Keybind"
            local Default = config.Default or Enum.KeyCode.E
            local Callback = config.Callback or function() end
            
            local Frame = Create("Frame", {
                Parent = TabContent,
                BackgroundColor3 = Theme.Secondary,
                Size = UDim2.new(1, 0, 0, 38)
            })
            
            AddCorner(Frame, 8)
            
            local Label = Create("TextLabel", {
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -80, 1, 0),
                Font = Enum.Font.GothamSemibold,
                Text = Name,
                TextColor3 = Theme.Text,
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local KeyBtn = Create("TextButton", {
                Parent = Frame,
                BackgroundColor3 = Theme.Tertiary,
                Position = UDim2.new(1, -65, 0.5, 0),
                Size = UDim2.new(0, 55, 0, 24),
                AnchorPoint = Vector2.new(0, 0.5),
                Font = Enum.Font.GothamBold,
                Text = Default.Name,
                TextColor3 = Theme.Text,
                TextSize = 11,
                AutoButtonColor = false
            })
            
            AddCorner(KeyBtn, 6)
            
            local currentKey = Default
            local binding = false
            
            KeyBtn.MouseButton1Click:Connect(function()
                binding = true
                KeyBtn.Text = "..."
                KeyBtn.BackgroundColor3 = Theme.Accent
            end)
            
            UserInputService.InputBegan:Connect(function(input, gpe)
                if binding then
                    currentKey = input.KeyCode
                    KeyBtn.Text = input.KeyCode.Name
                    KeyBtn.BackgroundColor3 = Theme.Tertiary
                    binding = false
                    spawn(Callback, input.KeyCode)
                elseif not gpe and input.KeyCode == currentKey then
                    spawn(Callback, currentKey)
                end
            end)
            
            return {Set = function(_, key) currentKey = key KeyBtn.Text = key.Name end}
        end
        
        table.insert(Window.Tabs, Tab)
        
        if #Window.Tabs == 1 then
            wait()
            TabBtn.MouseButton1Click:Fire()
        end
        
        return Tab
    end
    
    if IntroEnabled then
        wait(0.5)
        self:Notify({Title = "Drakthon UI", Content = "Loaded successfully!", Type = "Success", Duration = 3})
    end
    
    return Window
end

return Drakthon
