--[[
    DRAKTHON UI LIBRARY v3.5.0 ULTIMATE
    âœ¨ Perfect Responsive Design
    ðŸ“± Full Mobile & Tablet Support
    ðŸŽ¨ Enhanced Visuals & Animations
    âš¡ Optimized Performance
]]

local Drakthon = {
    Version = "3.5.0",
    ConfigFolder = "DrakthonConfigs"
}

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")

local Player = Players.LocalPlayer

-- Enhanced Theme with Better Colors
local Theme = {
    Background = Color3.fromRGB(15, 15, 20),
    Secondary = Color3.fromRGB(20, 20, 27),
    Tertiary = Color3.fromRGB(25, 25, 32),
    Accent = Color3.fromRGB(138, 43, 226),
    AccentHover = Color3.fromRGB(155, 65, 235),
    AccentDark = Color3.fromRGB(120, 30, 200),
    TextPrimary = Color3.fromRGB(255, 255, 255),
    TextSecondary = Color3.fromRGB(170, 170, 180),
    TextTertiary = Color3.fromRGB(120, 120, 130),
    Success = Color3.fromRGB(46, 204, 113),
    Warning = Color3.fromRGB(241, 196, 15),
    Error = Color3.fromRGB(231, 76, 60),
    Info = Color3.fromRGB(52, 152, 219),
    Border = Color3.fromRGB(40, 40, 50),
    Shadow = Color3.fromRGB(0, 0, 0)
}

local Icons = {
    Home = "rbxassetid://10734921088",
    Settings = "rbxassetid://10734950309",
    User = "rbxassetid://10747374131",
    Shield = "rbxassetid://10723434711",
    Check = "rbxassetid://10709790948",
    X = "rbxassetid://10747384394",
    Plus = "rbxassetid://10747373176",
    Minus = "rbxassetid://10747372992",
    ChevronDown = "rbxassetid://10709791437",
    ChevronRight = "rbxassetid://10709791683",
    Search = "rbxassetid://10734896950",
    Bell = "rbxassetid://10723407389",
    Info = "rbxassetid://10723434711",
    DrakthonLogo = "rbxassetid://97332515981061"
}

-- Enhanced Tween Function with Safety Check
local function Tween(object, properties, duration, style, direction)
    if not object or not object.Parent then return end
    style = style or Enum.EasingStyle.Quart
    direction = direction or Enum.EasingDirection.Out
    local tween = TweenService:Create(object, TweenInfo.new(duration or 0.4, style, direction), properties)
    tween:Play()
    return tween
end

-- Enhanced Device Detection
local function GetScreenSize()
    return workspace.CurrentCamera.ViewportSize
end

local function IsMobile()
    return UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled
end

local function IsTablet()
    local screenSize = GetScreenSize()
    return UserInputService.TouchEnabled and screenSize.X >= 768 and screenSize.X <= 1366
end

local function GetDeviceType()
    if UserInputService.TouchEnabled then
        local screenSize = GetScreenSize()
        if screenSize.X < 600 then
            return "Mobile"
        elseif screenSize.X >= 600 and screenSize.X < 1024 then
            return "Tablet"
        elseif screenSize.X >= 1024 then
            return "TabletLarge"
        end
    end
    return "Desktop"
end

-- Enhanced Responsive Size System
local function GetResponsiveSize()
    local screenSize = GetScreenSize()
    local deviceType = GetDeviceType()
    local screenWidth = screenSize.X
    local screenHeight = screenSize.Y
    
    if deviceType == "Mobile" then
        -- Small phones
        if screenWidth < 375 then
            return UDim2.new(0.98, 0, 0.97, 0)
        -- Medium phones
        elseif screenWidth < 480 then
            return UDim2.new(0.96, 0, 0.95, 0)
        -- Large phones
        else
            return UDim2.new(0.94, 0, 0.93, 0)
        end
    elseif deviceType == "Tablet" then
        -- Portrait tablets
        if screenHeight > screenWidth then
            return UDim2.new(0.92, 0, 0.90, 0)
        -- Landscape tablets
        else
            return UDim2.new(0.88, 0, 0.92, 0)
        end
    elseif deviceType == "TabletLarge" then
        return UDim2.new(0.85, 0, 0.88, 0)
    else
        -- Desktop scaling
        if screenWidth < 1280 then
            local width = math.clamp(screenWidth * 0.55, 580, 780)
            local height = math.clamp(screenHeight * 0.75, 460, 650)
            return UDim2.fromOffset(width, height)
        elseif screenWidth < 1920 then
            local width = math.clamp(screenWidth * 0.45, 650, 850)
            local height = math.clamp(screenHeight * 0.7, 500, 680)
            return UDim2.fromOffset(width, height)
        else
            local width = math.clamp(screenWidth * 0.35, 700, 900)
            local height = math.clamp(screenHeight * 0.65, 520, 720)
            return UDim2.fromOffset(width, height)
        end
    end
end

-- Enhanced Draggable with Multi-Touch Support
local function MakeDraggable(frame, dragFrame)
    dragFrame = dragFrame or frame
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
    
    dragFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    dragFrame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or
           input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- UI Helper Functions
local function CreateUICorner(radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 12)
    return corner
end

local function CreateStroke(color, thickness, transparency)
    local stroke = Instance.new("UIStroke")
    stroke.Color = color or Theme.Border
    stroke.Thickness = thickness or 1
    stroke.Transparency = transparency or 0
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    if transparency and transparency >= 0.85 then
        stroke.Enabled = false
    end
    return stroke
end

local function CreatePadding(top, bottom, left, right)
    local padding = Instance.new("UIPadding")
    padding.PaddingTop = UDim.new(0, top or 10)
    padding.PaddingBottom = UDim.new(0, bottom or top or 10)
    padding.PaddingLeft = UDim.new(0, left or top or 10)
    padding.PaddingRight = UDim.new(0, right or left or top or 10)
    return padding
end

local function CreateGradient(rotation, colors)
    local gradient = Instance.new("UIGradient")
    gradient.Rotation = rotation or 90
    if colors and #colors > 0 then
        local colorSequence = {}
        for i, color in ipairs(colors) do
            table.insert(colorSequence, ColorSequenceKeypoint.new((i-1)/(#colors-1), color))
        end
        gradient.Color = ColorSequence.new(colorSequence)
    end
    return gradient
end

local function CreateShadow(parent, size, transparency)
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.Parent = parent
    shadow.BackgroundTransparency = 1
    shadow.Position = UDim2.fromOffset(-(size or 20), -(size or 20))
    shadow.Size = UDim2.new(1, (size or 20) * 2, 1, (size or 20) * 2)
    shadow.ZIndex = 0
    shadow.Image = "rbxassetid://6015897843"
    shadow.ImageColor3 = Theme.Shadow
    shadow.ImageTransparency = transparency or 0.9
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(49, 49, 450, 450)
    return shadow
end

-- Config System
local function SaveConfig(configName, data)
    local success = pcall(function()
        if not isfolder(Drakthon.ConfigFolder) then
            makefolder(Drakthon.ConfigFolder)
        end
        writefile(Drakthon.ConfigFolder .. "/" .. configName .. ".json", HttpService:JSONEncode(data))
    end)
    return success
end

local function LoadConfig(configName)
    local path = Drakthon.ConfigFolder .. "/" .. configName .. ".json"
    if not isfile(path) then return nil end
    local success, result = pcall(function()
        return HttpService:JSONDecode(readfile(path))
    end)
    return success and result or nil
end

-- Notification System
local NotificationQueue = {}
local NotificationContainer = nil

local function CreateNotification(title, description, duration, notifType)
    if not NotificationContainer then return end
    
    notifType = notifType or "info"
    
    local NotifColors = {
        success = {Theme.Success, Icons.Check},
        error = {Theme.Error, Icons.X},
        warning = {Theme.Warning, Icons.Info},
        info = {Theme.Info, Icons.Info}
    }
    
    local color, icon = unpack(NotifColors[notifType] or NotifColors.info)
    
    local isMobile = IsMobile()
    
    local Notification = Instance.new("Frame")
    Notification.Parent = NotificationContainer
    Notification.BackgroundColor3 = Theme.Secondary
    Notification.BackgroundTransparency = 0
    Notification.Position = UDim2.new(1, 0, 0, #NotificationQueue * 90)
    Notification.Size = UDim2.fromOffset(isMobile and 280 or 340, 80)
    Notification.BorderSizePixel = 0
    Notification.ZIndex = 100
    
    CreateUICorner(12).Parent = Notification
    CreateStroke(color, 2, 0.3).Parent = Notification
    
    local AccentBar = Instance.new("Frame")
    AccentBar.Parent = Notification
    AccentBar.BackgroundColor3 = color
    AccentBar.BorderSizePixel = 0
    AccentBar.Size = UDim2.new(0, 4, 1, 0)
    AccentBar.ZIndex = 101
    CreateUICorner(12).Parent = AccentBar
    
    local IconContainer = Instance.new("Frame")
    IconContainer.Parent = Notification
    IconContainer.BackgroundColor3 = color
    IconContainer.BackgroundTransparency = 0.9
    IconContainer.Position = UDim2.fromOffset(12, 12)
    IconContainer.Size = UDim2.fromOffset(46, 46)
    IconContainer.BorderSizePixel = 0
    IconContainer.ZIndex = 101
    CreateUICorner(23).Parent = IconContainer
    
    local IconImage = Instance.new("ImageLabel")
    IconImage.Parent = IconContainer
    IconImage.AnchorPoint = Vector2.new(0.5, 0.5)
    IconImage.BackgroundTransparency = 1
    IconImage.Position = UDim2.fromScale(0.5, 0.5)
    IconImage.Size = UDim2.fromOffset(24, 24)
    IconImage.Image = icon
    IconImage.ImageColor3 = color
    IconImage.ZIndex = 102
    
    local Title = Instance.new("TextLabel")
    Title.Parent = Notification
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.fromOffset(68, 14)
    Title.Size = UDim2.new(1, -78, 0, 18)
    Title.Font = Enum.Font.GothamBold
    Title.Text = title
    Title.TextColor3 = Theme.TextPrimary
    Title.TextSize = 14
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.ZIndex = 101
    
    local Description = Instance.new("TextLabel")
    Description.Parent = Notification
    Description.BackgroundTransparency = 1
    Description.Position = UDim2.fromOffset(68, 35)
    Description.Size = UDim2.new(1, -78, 0, 30)
    Description.Font = Enum.Font.Gotham
    Description.Text = description
    Description.TextColor3 = Theme.TextSecondary
    Description.TextSize = 11
    Description.TextWrapped = true
    Description.TextXAlignment = Enum.TextXAlignment.Left
    Description.TextYAlignment = Enum.TextYAlignment.Top
    Description.ZIndex = 101
    
    Tween(Notification, {Position = UDim2.new(1, -360, 0, #NotificationQueue * 90)}, 0.4, Enum.EasingStyle.Back)
    
    table.insert(NotificationQueue, Notification)
    
    task.delay(duration or 3, function()
        Tween(Notification, {Position = UDim2.new(1, 0, 0, 0)}, 0.3)
        for i, notif in ipairs(NotificationQueue) do
            if notif == Notification then
                table.remove(NotificationQueue, i)
                break
            end
        end
        for i, notif in ipairs(NotificationQueue) do
            Tween(notif, {Position = UDim2.new(1, -360, 0, (i - 1) * 90)}, 0.3)
        end
        task.wait(0.3)
        Notification:Destroy()
    end)
end

-- Confirmation Dialog
local function CreateConfirmationDialog(title, message, onConfirm, onCancel)
    local DialogGui = Instance.new("ScreenGui")
    DialogGui.Name = "DrakthonConfirmDialog"
    DialogGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    DialogGui.DisplayOrder = 999998
    
    if gethui then
        DialogGui.Parent = gethui()
    else
        DialogGui.Parent = CoreGui
    end
    
    local Overlay = Instance.new("Frame")
    Overlay.Parent = DialogGui
    Overlay.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    Overlay.BackgroundTransparency = 0.4
    Overlay.Size = UDim2.fromScale(1, 1)
    Overlay.BorderSizePixel = 0
    Overlay.ZIndex = 9
    
    local Dialog = Instance.new("Frame")
    Dialog.Parent = DialogGui
    Dialog.AnchorPoint = Vector2.new(0.5, 0.5)
    Dialog.BackgroundColor3 = Theme.Secondary
    Dialog.Position = UDim2.fromScale(0.5, 0.5)
    Dialog.Size = UDim2.fromOffset(370, 185)
    Dialog.BorderSizePixel = 0
    Dialog.ZIndex = 10
    
    CreateUICorner(15).Parent = Dialog
    CreateStroke(Theme.Accent, 2, 0.35).Parent = Dialog
    CreateShadow(Dialog, 32, 0.92)
    
    local DialogTitle = Instance.new("TextLabel")
    DialogTitle.Parent = Dialog
    DialogTitle.BackgroundTransparency = 1
    DialogTitle.Position = UDim2.fromOffset(0, 16)
    DialogTitle.Size = UDim2.new(1, 0, 0, 24)
    DialogTitle.Font = Enum.Font.GothamBold
    DialogTitle.Text = title
    DialogTitle.TextColor3 = Theme.TextPrimary
    DialogTitle.TextSize = 17
    DialogTitle.ZIndex = 11
    
    local DialogMessage = Instance.new("TextLabel")
    DialogMessage.Parent = Dialog
    DialogMessage.BackgroundTransparency = 1
    DialogMessage.Position = UDim2.fromOffset(18, 52)
    DialogMessage.Size = UDim2.new(1, -36, 0, 48)
    DialogMessage.Font = Enum.Font.Gotham
    DialogMessage.Text = message
    DialogMessage.TextColor3 = Theme.TextSecondary
    DialogMessage.TextSize = 12
    DialogMessage.TextWrapped = true
    DialogMessage.TextYAlignment = Enum.TextYAlignment.Top
    DialogMessage.ZIndex = 11
    
    local ButtonContainer = Instance.new("Frame")
    ButtonContainer.Parent = Dialog
    ButtonContainer.BackgroundTransparency = 1
    ButtonContainer.Position = UDim2.fromOffset(18, 115)
    ButtonContainer.Size = UDim2.new(1, -36, 0, 42)
    ButtonContainer.BorderSizePixel = 0
    ButtonContainer.ZIndex = 11
    
    local ConfirmButton = Instance.new("TextButton")
    ConfirmButton.Parent = ButtonContainer
    ConfirmButton.AnchorPoint = Vector2.new(1, 0.5)
    ConfirmButton.BackgroundColor3 = Theme.Error
    ConfirmButton.Position = UDim2.new(1, 0, 0.5, 0)
    ConfirmButton.Size = UDim2.fromOffset(145, 36)
    ConfirmButton.Font = Enum.Font.GothamBold
    ConfirmButton.Text = "Yes, Close"
    ConfirmButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ConfirmButton.TextSize = 13
    ConfirmButton.AutoButtonColor = false
    ConfirmButton.BorderSizePixel = 0
    ConfirmButton.ZIndex = 12
    CreateUICorner(10).Parent = ConfirmButton
    
    local CancelButton = Instance.new("TextButton")
    CancelButton.Parent = ButtonContainer
    CancelButton.AnchorPoint = Vector2.new(0, 0.5)
    CancelButton.BackgroundColor3 = Theme.Tertiary
    CancelButton.Position = UDim2.new(0, 0, 0.5, 0)
    CancelButton.Size = UDim2.fromOffset(145, 36)
    CancelButton.Font = Enum.Font.GothamBold
    CancelButton.Text = "Cancel"
    CancelButton.TextColor3 = Theme.TextPrimary
    CancelButton.TextSize = 13
    CancelButton.AutoButtonColor = false
    CancelButton.BorderSizePixel = 0
    CancelButton.ZIndex = 12
    CreateUICorner(10).Parent = CancelButton
    
    ConfirmButton.MouseEnter:Connect(function()
        Tween(ConfirmButton, {BackgroundColor3 = Color3.fromRGB(255, 45, 45)}, 0.2)
    end)
    
    ConfirmButton.MouseLeave:Connect(function()
        Tween(ConfirmButton, {BackgroundColor3 = Theme.Error}, 0.2)
    end)
    
    CancelButton.MouseEnter:Connect(function()
        Tween(CancelButton, {BackgroundColor3 = Theme.Accent}, 0.2)
    end)
    
    CancelButton.MouseLeave:Connect(function()
        Tween(CancelButton, {BackgroundColor3 = Theme.Tertiary}, 0.2)
    end)
    
    ConfirmButton.MouseButton1Click:Connect(function()
        DialogGui:Destroy()
        if onConfirm then onConfirm() end
    end)
    
    CancelButton.MouseButton1Click:Connect(function()
        DialogGui:Destroy()
        if onCancel then onCancel() end
    end)
    
    Overlay.BackgroundTransparency = 1
    Tween(Overlay, {BackgroundTransparency = 0.4}, 0.3)
    Dialog.Size = UDim2.fromOffset(0, 0)
    Tween(Dialog, {Size = UDim2.fromOffset(370, 185)}, 0.4, Enum.EasingStyle.Back)
end

-- Loading Screen
local function CreateLoadingScreen(scriptName)
    local LoadingGui = Instance.new("ScreenGui")
    LoadingGui.Name = "DrakthonLoading"
    LoadingGui.DisplayOrder = 999999
    
    if gethui then
        LoadingGui.Parent = gethui()
    else
        LoadingGui.Parent = CoreGui
    end
    
    local Container = Instance.new("Frame")
    Container.Parent = LoadingGui
    Container.AnchorPoint = Vector2.new(0.5, 0.5)
    Container.BackgroundTransparency = 1
    Container.Position = UDim2.fromScale(0.5, 0.5)
    Container.Size = UDim2.fromOffset(190, 230)
    
    local Logo = Instance.new("ImageLabel")
    Logo.Parent = Container
    Logo.AnchorPoint = Vector2.new(0.5, 0)
    Logo.BackgroundTransparency = 1
    Logo.Position = UDim2.new(0.5, 0, 0, 0)
    Logo.Size = UDim2.fromOffset(135, 135)
    Logo.Image = Icons.DrakthonLogo
    Logo.ImageTransparency = 1
    
    local ScriptName = Instance.new("TextLabel")
    ScriptName.Parent = Container
    ScriptName.BackgroundTransparency = 1
    ScriptName.Position = UDim2.new(0, 0, 0, 145)
    ScriptName.Size = UDim2.new(1, 0, 0, 30)
    ScriptName.Font = Enum.Font.GothamBold
    ScriptName.Text = scriptName or "Drakthon"
    ScriptName.TextColor3 = Theme.TextPrimary
    ScriptName.TextSize = 21
    ScriptName.TextTransparency = 1
    
    local PoweredBy = Instance.new("TextLabel")
    PoweredBy.Parent = Container
    PoweredBy.BackgroundTransparency = 1
    PoweredBy.Position = UDim2.new(0, 0, 0, 185)
    PoweredBy.Size = UDim2.new(1, 0, 0, 17)
    PoweredBy.Font = Enum.Font.Gotham
    PoweredBy.Text = "Powered by Drakthon Library"
    PoweredBy.TextColor3 = Theme.TextSecondary
    PoweredBy.TextSize = 11
    PoweredBy.TextTransparency = 1
    
    Tween(Logo, {ImageTransparency = 0}, 0.6)
    task.wait(0.3)
    Tween(ScriptName, {TextTransparency = 0}, 0.5)
    task.wait(0.2)
    Tween(PoweredBy, {TextTransparency = 0}, 0.5)
    
    local LoadingSystem = {}
    
    function LoadingSystem:Close()
        task.wait(1)
        Tween(ScriptName, {TextTransparency = 1}, 0.4)
        Tween(PoweredBy, {TextTransparency = 1}, 0.4)
        Tween(Logo, {ImageTransparency = 1}, 0.5)
        task.wait(0.5)
        LoadingGui:Destroy()
    end
    
    return LoadingSystem
end

-- Main Window Creation
function Drakthon:CreateWindow(options)
    options = options or {}
    local Title = options.Title or "Drakthon"
    local SubTitle = options.SubTitle or "UI Library"
    local ScriptIcon = options.Icon or Icons.DrakthonLogo
    local LoadingEnabled = options.LoadingEnabled ~= false
    local ConfigName = options.ConfigName or "DefaultConfig"
    local AutoResponsive = options.AutoResponsive ~= false
    local Width = options.Width
    local Height = options.Height
    
    if LoadingEnabled then
        local loader = CreateLoadingScreen(Title)
        task.wait(2)
        loader:Close()
    end
    
    local deviceType = GetDeviceType()
    local responsiveSize
    
    if AutoResponsive then
        responsiveSize = GetResponsiveSize()
    else
        if Width and Height then
            responsiveSize = UDim2.fromOffset(Width, Height)
        else
            responsiveSize = UDim2.fromOffset(700, 600)
        end
    end
    
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = HttpService:GenerateGUID(false)
    ScreenGui.ResetOnSpawn = false
    ScreenGui.IgnoreGuiInset = true
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    if gethui then
        ScreenGui.Parent = gethui()
    elseif syn and syn.protect_gui then
        syn.protect_gui(ScreenGui)
        ScreenGui.Parent = CoreGui
    else
        ScreenGui.Parent = CoreGui
    end
    
    local Main = Instance.new("Frame")
    Main.Name = "Main"
    Main.Parent = ScreenGui
    Main.AnchorPoint = Vector2.new(0.5, 0.5)
    Main.BackgroundColor3 = Theme.Background
    Main.Position = UDim2.fromScale(0.5, 0.5)
    Main.Size = responsiveSize
    Main.ClipsDescendants = true
    Main.BorderSizePixel = 0
    Main.ZIndex = 1
    
    CreateUICorner(15).Parent = Main
    CreateStroke(Theme.Border, 1, 0.5).Parent = Main
    CreateShadow(Main, 26, 0.9)
    
    if AutoResponsive then
        workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(function()
            if Main.Visible then
                Tween(Main, {Size = GetResponsiveSize()}, 0.3)
            end
        end)
    end
    
    MakeDraggable(Main)
    
    CreateGradient(135, {
        Color3.fromRGB(18, 18, 24),
        Color3.fromRGB(12, 12, 18)
    }).Parent = Main
    
    NotificationContainer = Instance.new("Frame")
    NotificationContainer.Name = "NotificationContainer"
    NotificationContainer.Parent = Main
    NotificationContainer.BackgroundTransparency = 1
    NotificationContainer.Position = UDim2.new(0, 10, 0, 70)
    NotificationContainer.Size = UDim2.new(1, -20, 1, -80)
    NotificationContainer.ClipsDescendants = false
    NotificationContainer.BorderSizePixel = 0
    NotificationContainer.ZIndex = 100
    
    -- Minimized Container with Image Fix
    local MinimizedContainer = Instance.new("TextButton")
    MinimizedContainer.Name = "MinimizedContainer"
    MinimizedContainer.Parent = ScreenGui
    MinimizedContainer.AnchorPoint = Vector2.new(0.5, 0.5)
    MinimizedContainer.BackgroundColor3 = Theme.Secondary
    MinimizedContainer.Position = UDim2.fromScale(0.5, 0.5)
    MinimizedContainer.Size = UDim2.fromOffset(90, 90)
    MinimizedContainer.Visible = false
    MinimizedContainer.BorderSizePixel = 0
    MinimizedContainer.ZIndex = 5
    MinimizedContainer.Text = ""
    MinimizedContainer.AutoButtonColor = false
    
    CreateUICorner(20).Parent = MinimizedContainer
    CreateStroke(Theme.Accent, 2, 0.4).Parent = MinimizedContainer
    CreateShadow(MinimizedContainer, 16, 0.8)
    
    MakeDraggable(MinimizedContainer, MinimizedContainer)
    
    local MinimizedIcon = Instance.new("ImageLabel")
    MinimizedIcon.Name = "MinimizedIcon"
    MinimizedIcon.Parent = MinimizedContainer
    MinimizedIcon.AnchorPoint = Vector2.new(0.5, 0.5)
    MinimizedIcon.BackgroundTransparency = 1
    MinimizedIcon.Position = UDim2.fromScale(0.5, 0.5)
    MinimizedIcon.Size = UDim2.fromOffset(62, 62)
    MinimizedIcon.Image = ScriptIcon
    MinimizedIcon.ImageTransparency = 1
    MinimizedIcon.ZIndex = 6
    
    local isMinimized = false
    
    MinimizedContainer.MouseEnter:Connect(function()
        Tween(MinimizedIcon, {Size = UDim2.fromOffset(68, 68)}, 0.2)
        Tween(MinimizedContainer, {BackgroundColor3 = Theme.Tertiary}, 0.2)
    end)
    
    MinimizedContainer.MouseLeave:Connect(function()
        Tween(MinimizedIcon, {Size = UDim2.fromOffset(62, 62)}, 0.2)
        Tween(MinimizedContainer, {BackgroundColor3 = Theme.Secondary}, 0.2)
    end)
    
    MinimizedContainer.MouseButton1Click:Connect(function()
        if isMinimized then
            isMinimized = false
            Tween(MinimizedIcon, {ImageTransparency = 1}, 0.3)
            Tween(MinimizedContainer, {Size = UDim2.fromOffset(0, 0)}, 0.3, Enum.EasingStyle.Back)
            task.wait(0.3)
            MinimizedContainer.Visible = false
            Main.Visible = true
            Main.Size = UDim2.fromOffset(0, 0)
            if AutoResponsive then
                Tween(Main, {Size = GetResponsiveSize()}, 0.4, Enum.EasingStyle.Back)
            else
                Tween(Main, {Size = responsiveSize}, 0.4, Enum.EasingStyle.Back)
            end
        end
    end)
    
    -- TopBar
    local TopBar = Instance.new("Frame")
    TopBar.Name = "TopBar"
    TopBar.Parent = Main
    TopBar.BackgroundColor3 = Theme.Secondary
    TopBar.BackgroundTransparency = 0.3
    TopBar.Size = UDim2.new(1, 0, 0, 56)
    TopBar.BorderSizePixel = 0
    TopBar.ZIndex = 2
    
    CreateUICorner(15).Parent = TopBar
    
    local TopBarCover = Instance.new("Frame")
    TopBarCover.Parent = TopBar
    TopBarCover.BackgroundColor3 = Theme.Secondary
    TopBarCover.BackgroundTransparency = 0.3
    TopBarCover.Position = UDim2.fromOffset(0, 42)
    TopBarCover.Size = UDim2.new(1, 0, 0, 14)
    TopBarCover.BorderSizePixel = 0
    TopBarCover.ZIndex = 2
    
    -- Menu Button
    local MenuButton = Instance.new("TextButton")
    MenuButton.Name = "MenuButton"
    MenuButton.Parent = TopBar
    MenuButton.BackgroundColor3 = Theme.Tertiary
    MenuButton.BackgroundTransparency = 0.5
    MenuButton.Position = UDim2.fromOffset(13, 13)
    MenuButton.Size = UDim2.fromOffset(30, 30)
    MenuButton.Text = ""
    MenuButton.AutoButtonColor = false
    MenuButton.BorderSizePixel = 0
    MenuButton.ZIndex = 3
    
    CreateUICorner(8).Parent = MenuButton
    
    local HamburgerContainer = Instance.new("Frame")
    HamburgerContainer.Parent = MenuButton
    HamburgerContainer.AnchorPoint = Vector2.new(0.5, 0.5)
    HamburgerContainer.BackgroundTransparency = 1
    HamburgerContainer.Position = UDim2.fromScale(0.5, 0.5)
    HamburgerContainer.Size = UDim2.fromOffset(15, 12)
    HamburgerContainer.ZIndex = 4
    
    local function CreateLine(yPos)
        local line = Instance.new("Frame")
        line.Parent = HamburgerContainer
        line.BackgroundColor3 = Theme.TextPrimary
        line.Position = UDim2.fromOffset(0, yPos)
        line.Size = UDim2.fromOffset(15, 2)
        line.BorderSizePixel = 0
        line.ZIndex = 5
        CreateUICorner(1).Parent = line
        return line
    end
    
    local Line1 = CreateLine(0)
    local Line2 = CreateLine(5)
    local Line3 = CreateLine(10)
    
    local XIcon = Instance.new("ImageLabel")
    XIcon.Parent = MenuButton
    XIcon.AnchorPoint = Vector2.new(0.5, 0.5)
    XIcon.BackgroundTransparency = 1
    XIcon.Position = UDim2.fromScale(0.5, 0.5)
    XIcon.Size = UDim2.fromOffset(13, 13)
    XIcon.Image = Icons.X
    XIcon.ImageColor3 = Theme.TextPrimary
    XIcon.ImageTransparency = 1
    XIcon.ZIndex = 4
    
    local TopIconContainer = Instance.new("Frame")
    TopIconContainer.Parent = TopBar
    TopIconContainer.BackgroundColor3 = Theme.Accent
    TopIconContainer.BackgroundTransparency = 0.9
    TopIconContainer.Position = UDim2.fromOffset(51, 10)
    TopIconContainer.Size = UDim2.fromOffset(36, 36)
    TopIconContainer.BorderSizePixel = 0
    TopIconContainer.ZIndex = 3
    CreateUICorner(18).Parent = TopIconContainer
    
    local TopIcon = Instance.new("ImageLabel")
    TopIcon.Parent = TopIconContainer
    TopIcon.AnchorPoint = Vector2.new(0.5, 0.5)
    TopIcon.BackgroundTransparency = 1
    TopIcon.Position = UDim2.fromScale(0.5, 0.5)
    TopIcon.Size = UDim2.fromOffset(21, 21)
    TopIcon.Image = ScriptIcon
    TopIcon.ZIndex = 4
    
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Parent = TopBar
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Position = UDim2.fromOffset(98, 12)
    TitleLabel.Size = UDim2.fromOffset(220, 17)
    TitleLabel.Font = Enum.Font.GothamBold
    TitleLabel.Text = Title
    TitleLabel.TextColor3 = Theme.TextPrimary
    TitleLabel.TextSize = 15
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.ZIndex = 3
    
    local SubTitleLabel = Instance.new("TextLabel")
    SubTitleLabel.Parent = TopBar
    SubTitleLabel.BackgroundTransparency = 1
    SubTitleLabel.Position = UDim2.fromOffset(98, 30)
    SubTitleLabel.Size = UDim2.fromOffset(220, 12)
    SubTitleLabel.Font = Enum.Font.Gotham
    SubTitleLabel.Text = SubTitle
    SubTitleLabel.TextColor3 = Theme.TextSecondary
    SubTitleLabel.TextSize = 10
    SubTitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    SubTitleLabel.ZIndex = 3
    
    local CloseButton = Instance.new("TextButton")
    CloseButton.Parent = TopBar
    CloseButton.AnchorPoint = Vector2.new(1, 0)
    CloseButton.BackgroundColor3 = Theme.Tertiary
    CloseButton.BackgroundTransparency = 0.5
    CloseButton.Position = UDim2.new(1, -13, 0, 13)
    CloseButton.Size = UDim2.fromOffset(30, 30)
    CloseButton.Text = ""
    CloseButton.AutoButtonColor = false
    CloseButton.BorderSizePixel = 0
    CloseButton.ZIndex = 3
    CreateUICorner(8).Parent = CloseButton
    
    local CloseIcon = Instance.new("ImageLabel")
    CloseIcon.Parent = CloseButton
    CloseIcon.AnchorPoint = Vector2.new(0.5, 0.5)
    CloseIcon.BackgroundTransparency = 1
    CloseIcon.Position = UDim2.fromScale(0.5, 0.5)
    CloseIcon.Size = UDim2.fromOffset(13, 13)
    CloseIcon.Image = Icons.X
    CloseIcon.ImageColor3 = Theme.TextPrimary
    CloseIcon.ZIndex = 4
    
    local closeDebounce = false
    
    CloseButton.MouseEnter:Connect(function()
        Tween(CloseButton, {BackgroundColor3 = Theme.Error, BackgroundTransparency = 0}, 0.2)
        Tween(CloseIcon, {ImageColor3 = Color3.fromRGB(255, 255, 255)}, 0.2)
    end)
    
    CloseButton.MouseLeave:Connect(function()
        Tween(CloseButton, {BackgroundColor3 = Theme.Tertiary, BackgroundTransparency = 0.5}, 0.2)
        Tween(CloseIcon, {ImageColor3 = Theme.TextPrimary}, 0.2)
    end)
    
    CloseButton.MouseButton1Click:Connect(function()
        if closeDebounce then return end
        closeDebounce = true
        
        CreateConfirmationDialog(
            "Close Confirmation",
            "Are you sure you want to close this window?",
            function()
                Tween(Main, {Size = UDim2.new(0, 0, 0, 0)}, 0.4, Enum.EasingStyle.Back, Enum.EasingDirection.In)
                task.wait(0.4)
                ScreenGui:Destroy()
            end,
            function()
                closeDebounce = false
            end
        )
    end)
    
    local MinimizeButton = Instance.new("TextButton")
    MinimizeButton.Parent = TopBar
    MinimizeButton.AnchorPoint = Vector2.new(1, 0)
    MinimizeButton.BackgroundColor3 = Theme.Tertiary
    MinimizeButton.BackgroundTransparency = 0.5
    MinimizeButton.Position = UDim2.new(1, -48, 0, 13)
    MinimizeButton.Size = UDim2.fromOffset(30, 30)
    MinimizeButton.Text = "-"
    MinimizeButton.Font = Enum.Font.GothamBold
    MinimizeButton.TextColor3 = Theme.TextPrimary
    MinimizeButton.TextSize = 22
    MinimizeButton.AutoButtonColor = false
    MinimizeButton.BorderSizePixel = 0
    MinimizeButton.ZIndex = 3
    CreateUICorner(8).Parent = MinimizeButton
    
    MinimizeButton.MouseEnter:Connect(function()
        Tween(MinimizeButton, {BackgroundColor3 = Theme.Accent, BackgroundTransparency = 0}, 0.2)
    end)
    
    MinimizeButton.MouseLeave:Connect(function()
        Tween(MinimizeButton, {BackgroundColor3 = Theme.Tertiary, BackgroundTransparency = 0.5}, 0.2)
    end)
    
    MinimizeButton.MouseButton1Click:Connect(function()
        if not isMinimized then
            isMinimized = true
            Main.Visible = false
            MinimizedContainer.Visible = true
            MinimizedIcon.ImageTransparency = 1
            MinimizedContainer.Size = UDim2.fromOffset(0, 0)
            Tween(MinimizedContainer, {Size = UDim2.fromOffset(90, 90)}, 0.4, Enum.EasingStyle.Back)
            Tween(MinimizedIcon, {ImageTransparency = 0}, 0.4)
        end
    end)
    
    -- Sidebar with Enhanced Scrolling
    local Sidebar = Instance.new("ScrollingFrame")
    Sidebar.Name = "Sidebar"
    Sidebar.Parent = Main
    Sidebar.Active = true
    Sidebar.BackgroundColor3 = Theme.Secondary
    Sidebar.BackgroundTransparency = 0.1
    Sidebar.Position = UDim2.fromOffset(-235, 56)
    Sidebar.Size = UDim2.new(0, 235, 1, -56)
    Sidebar.BorderSizePixel = 0
    Sidebar.ScrollBarThickness = deviceType == "Mobile" and 6 or 4
    Sidebar.ScrollBarImageColor3 = Theme.Accent
    Sidebar.ScrollBarImageTransparency = 0.5
    Sidebar.CanvasSize = UDim2.fromScale(0, 0)
    Sidebar.ScrollingEnabled = true
    Sidebar.ElasticBehavior = Enum.ElasticBehavior.Never
    Sidebar.ScrollingDirection = Enum.ScrollingDirection.Y
    Sidebar.ZIndex = 50
    
    local SidebarList = Instance.new("UIListLayout")
    SidebarList.Parent = Sidebar
    SidebarList.SortOrder = Enum.SortOrder.LayoutOrder
    SidebarList.Padding = UDim.new(0, 6)
    
    CreatePadding(13, 13, 13, 13).Parent = Sidebar
    
    SidebarList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        Sidebar.CanvasSize = UDim2.fromOffset(0, SidebarList.AbsoluteContentSize.Y + 26)
    end)
    
    local isSidebarOpen = false
    
    local ContentContainer = Instance.new("Frame")
    ContentContainer.Name = "ContentContainer"
    ContentContainer.Parent = Main
    ContentContainer.BackgroundTransparency = 1
    ContentContainer.Position = UDim2.fromOffset(0, 56)
    ContentContainer.Size = UDim2.new(1, 0, 1, -56)
    ContentContainer.BorderSizePixel = 0
    ContentContainer.ClipsDescendants = true
    ContentContainer.ZIndex = 2
    
    local Window = {
        Tabs = {},
        CurrentTab = nil,
        ConfigName = ConfigName,
        SavedData = {},
        ScriptIcon = ScriptIcon,
        AutoResponsive = AutoResponsive,
        DeviceType = deviceType
    }
    
    MenuButton.MouseEnter:Connect(function()
        Tween(MenuButton, {BackgroundTransparency = 0.2}, 0.2)
    end)
    
    MenuButton.MouseLeave:Connect(function()
        Tween(MenuButton, {BackgroundTransparency = 0.5}, 0.2)
    end)
    
    MenuButton.MouseButton1Click:Connect(function()
        if not isSidebarOpen then
            isSidebarOpen = true
            Tween(Sidebar, {Position = UDim2.fromOffset(0, 56)}, 0.4, Enum.EasingStyle.Quart)
            Tween(Line1, {Size = UDim2.fromOffset(0, 2), Position = UDim2.fromOffset(7, 5)}, 0.3)
            Tween(Line2, {Size = UDim2.fromOffset(0, 2)}, 0.3)
            Tween(Line3, {Size = UDim2.fromOffset(0, 2), Position = UDim2.fromOffset(7, 5)}, 0.3)
            task.wait(0.15)
            Tween(XIcon, {ImageTransparency = 0}, 0.2)
        else
            isSidebarOpen = false
            Tween(Sidebar, {Position = UDim2.fromOffset(-235, 56)}, 0.4, Enum.EasingStyle.Quart)
            Tween(XIcon, {ImageTransparency = 1}, 0.2)
            task.wait(0.15)
            Tween(Line1, {Size = UDim2.fromOffset(15, 2), Position = UDim2.fromOffset(0, 0)}, 0.3)
            Tween(Line2, {Size = UDim2.fromOffset(15, 2)}, 0.3)
            Tween(Line3, {Size = UDim2.fromOffset(15, 2), Position = UDim2.fromOffset(0, 10)}, 0.3)
        end
    end)
    
    function Window:CreateTab(options)
        options = options or {}
        local Name = options.Name or "Tab"
        local Icon = options.Icon or Icons.Home
        
        local TabButton = Instance.new("TextButton")
        TabButton.Name = Name
        TabButton.Parent = Sidebar
        TabButton.BackgroundColor3 = Theme.Tertiary
        TabButton.BackgroundTransparency = 0.7
        TabButton.Size = UDim2.new(1, 0, 0, 42)
        TabButton.Text = ""
        TabButton.AutoButtonColor = false
        TabButton.BorderSizePixel = 0
        TabButton.ZIndex = 51
        CreateUICorner(10).Parent = TabButton
        CreateStroke(Theme.Border, 1, 0.8).Parent = TabButton
        
        local TabIcon = Instance.new("ImageLabel")
        TabIcon.Parent = TabButton
        TabIcon.BackgroundTransparency = 1
        TabIcon.Position = UDim2.fromOffset(10, 10)
        TabIcon.Size = UDim2.fromOffset(21, 21)
        TabIcon.Image = Icon
        TabIcon.ImageColor3 = Theme.TextSecondary
        TabIcon.ZIndex = 52
        
        local TabLabel = Instance.new("TextLabel")
        TabLabel.Parent = TabButton
        TabLabel.BackgroundTransparency = 1
        TabLabel.Position = UDim2.fromOffset(41, 0)
        TabLabel.Size = UDim2.new(1, -51, 1, 0)
        TabLabel.Font = Enum.Font.GothamMedium
        TabLabel.Text = Name
        TabLabel.TextColor3 = Theme.TextSecondary
        TabLabel.TextSize = 12
        TabLabel.TextXAlignment = Enum.TextXAlignment.Left
        TabLabel.ZIndex = 52
        
        local TabContent = Instance.new("ScrollingFrame")
        TabContent.Name = Name .. "Content"
        TabContent.Parent = ContentContainer
        TabContent.Active = true
        TabContent.BackgroundTransparency = 1
        TabContent.BorderSizePixel = 0
        TabContent.Size = UDim2.fromScale(1, 1)
        TabContent.ScrollBarThickness = deviceType == "Mobile" and 6 or 4
        TabContent.ScrollBarImageColor3 = Theme.Accent
        TabContent.ScrollBarImageTransparency = 0.5
        TabContent.Visible = false
        TabContent.CanvasSize = UDim2.fromScale(0, 0)
        TabContent.ScrollingEnabled = true
        TabContent.ElasticBehavior = Enum.ElasticBehavior.Never
        TabContent.ScrollingDirection = Enum.ScrollingDirection.Y
        TabContent.AutomaticCanvasSize = Enum.AutomaticSize.None
        TabContent.ZIndex = 3
        
        local ContentList = Instance.new("UIListLayout")
        ContentList.Parent = TabContent
        ContentList.SortOrder = Enum.SortOrder.LayoutOrder
        ContentList.Padding = UDim.new(0, 8)
        
        CreatePadding(13, 17, 17, 17).Parent = TabContent
        
        ContentList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            local contentHeight = ContentList.AbsoluteContentSize.Y
            local paddingTotal = 13 + 17
            TabContent.CanvasSize = UDim2.fromOffset(0, contentHeight + paddingTotal)
        end)
        
        local function SelectTab()
            for _, tab in pairs(Window.Tabs) do
                Tween(tab.Button, {BackgroundColor3 = Theme.Tertiary, BackgroundTransparency = 0.7}, 0.3)
                Tween(tab.Icon, {ImageColor3 = Theme.TextSecondary}, 0.3)
                Tween(tab.Label, {TextColor3 = Theme.TextSecondary}, 0.3)
                local stroke = tab.Button:FindFirstChildOfClass("UIStroke")
                if stroke then Tween(stroke, {Transparency = 0.8}, 0.3) end
                tab.Content.Visible = false
            end
            
            Tween(TabButton, {BackgroundColor3 = Theme.Accent, BackgroundTransparency = 0}, 0.3)
            Tween(TabIcon, {ImageColor3 = Theme.TextPrimary}, 0.3)
            Tween(TabLabel, {TextColor3 = Theme.TextPrimary}, 0.3)
            local stroke = TabButton:FindFirstChildOfClass("UIStroke")
            if stroke then Tween(stroke, {Transparency = 0, Color = Theme.AccentHover}, 0.3) end
            
            TabContent.Visible = true
            Window.CurrentTab = Tab
            
            if isSidebarOpen and deviceType == "Mobile" then
                task.wait(0.2)
                MenuButton.MouseButton1Click:Fire()
            end
        end
        
        TabButton.MouseButton1Click:Connect(SelectTab)
        
        TabButton.MouseEnter:Connect(function()
            if TabButton.BackgroundColor3 ~= Theme.Accent then
                Tween(TabButton, {BackgroundTransparency = 0.3}, 0.2)
            end
        end)
        
        TabButton.MouseLeave:Connect(function()
            if TabButton.BackgroundColor3 ~= Theme.Accent then
                Tween(TabButton, {BackgroundTransparency = 0.7}, 0.2)
            end
        end)
        
        local Tab = {
            Button = TabButton,
            Icon = TabIcon,
            Label = TabLabel,
            Content = TabContent,
            Elements = {}
        }
        
        table.insert(Window.Tabs, Tab)
        
        if #Window.Tabs == 1 then
            task.wait(0.1)
            SelectTab()
        end
        
        function Tab:AddButton(options)
            options = options or {}
            local Title = options.Title or "Button"
            local Description = options.Description or ""
            local Callback = options.Callback or function() end
            local Icon = options.Icon
            
            local ButtonFrame = Instance.new("Frame")
            ButtonFrame.Parent = TabContent
            ButtonFrame.BackgroundColor3 = Theme.Secondary
            ButtonFrame.BackgroundTransparency = 0.5
            ButtonFrame.Size = UDim2.new(1, 0, 0, Description ~= "" and 66 or 46)
            ButtonFrame.BorderSizePixel = 0
            ButtonFrame.ZIndex = 4
            CreateUICorner(10).Parent = ButtonFrame
            CreateStroke(Theme.Border, 1, 0.6).Parent = ButtonFrame
            
            local Button = Instance.new("TextButton")
            Button.Parent = ButtonFrame
            Button.BackgroundTransparency = 1
            Button.Size = UDim2.fromScale(1, 1)
            Button.Text = ""
            Button.AutoButtonColor = false
            Button.ZIndex = 5
            
            local ButtonIcon
            local titleXOffset = 15
            
            if Icon then
                ButtonIcon = Instance.new("ImageLabel")
                ButtonIcon.Parent = Button
                ButtonIcon.BackgroundTransparency = 1
                ButtonIcon.Position = UDim2.fromOffset(15, 13)
                ButtonIcon.Size = UDim2.fromOffset(20, 20)
                ButtonIcon.Image = Icon
                ButtonIcon.ImageColor3 = Theme.Accent
                ButtonIcon.ZIndex = 6
                titleXOffset = 45
            end
            
            local ButtonTitle = Instance.new("TextLabel")
            ButtonTitle.Parent = Button
            ButtonTitle.BackgroundTransparency = 1
            ButtonTitle.Position = UDim2.fromOffset(titleXOffset, 10)
            ButtonTitle.Size = UDim2.new(1, -titleXOffset - 15, 0, 18)
            ButtonTitle.Font = Enum.Font.GothamBold
            ButtonTitle.Text = Title
            ButtonTitle.TextColor3 = Theme.TextPrimary
            ButtonTitle.TextSize = 13
            ButtonTitle.TextXAlignment = Enum.TextXAlignment.Left
            ButtonTitle.ZIndex = 6
            
            if Description ~= "" then
                local ButtonDesc = Instance.new("TextLabel")
                ButtonDesc.Parent = Button
                ButtonDesc.BackgroundTransparency = 1
                ButtonDesc.Position = UDim2.fromOffset(titleXOffset, 30)
                ButtonDesc.Size = UDim2.new(1, -titleXOffset - 15, 0, 24)
                ButtonDesc.Font = Enum.Font.Gotham
                ButtonDesc.Text = Description
                ButtonDesc.TextColor3 = Theme.TextSecondary
                ButtonDesc.TextSize = 11
                ButtonDesc.TextWrapped = true
                ButtonDesc.TextXAlignment = Enum.TextXAlignment.Left
                ButtonDesc.TextYAlignment = Enum.TextYAlignment.Top
                ButtonDesc.ZIndex = 6
            end
            
            Button.MouseEnter:Connect(function()
                Tween(ButtonFrame, {BackgroundTransparency = 0.2}, 0.2)
                local stroke = ButtonFrame:FindFirstChildOfClass("UIStroke")
                if stroke then Tween(stroke, {Transparency = 0.3, Color = Theme.Accent}, 0.2) end
                if ButtonIcon then
                    Tween(ButtonIcon, {ImageColor3 = Theme.AccentHover}, 0.2)
                end
            end)
            
            Button.MouseLeave:Connect(function()
                Tween(ButtonFrame, {BackgroundTransparency = 0.5}, 0.2)
                local stroke = ButtonFrame:FindFirstChildOfClass("UIStroke")
                if stroke then Tween(stroke, {Transparency = 0.6, Color = Theme.Border}, 0.2) end
                if ButtonIcon then
                    Tween(ButtonIcon, {ImageColor3 = Theme.Accent}, 0.2)
                end
            end)
            
            Button.MouseButton1Click:Connect(function()
                if ButtonIcon then
                    Tween(ButtonIcon, {ImageColor3 = Theme.AccentDark, Size = UDim2.fromOffset(18, 18)}, 0.1)
                end
                Tween(ButtonFrame, {BackgroundColor3 = Theme.Accent}, 0.1)
                task.wait(0.15)
                Tween(ButtonFrame, {BackgroundColor3 = Theme.Secondary}, 0.2)
                if ButtonIcon then
                    Tween(ButtonIcon, {ImageColor3 = Theme.Accent, Size = UDim2.fromOffset(20, 20)}, 0.2)
                end
                pcall(Callback)
            end)
            
            return {Frame = ButtonFrame, Icon = ButtonIcon}
        end
        
        function Tab:AddToggle(options)
            options = options or {}
            local Title = options.Title or "Toggle"
            local Description = options.Description or ""
            local Default = options.Default or false
            local Callback = options.Callback or function() end
            local Flag = options.Flag or Title
            
            local ToggleFrame = Instance.new("Frame")
            ToggleFrame.Parent = TabContent
            ToggleFrame.BackgroundColor3 = Theme.Secondary
            ToggleFrame.BackgroundTransparency = 0.5
            ToggleFrame.Size = UDim2.new(1, 0, 0, Description ~= "" and 66 or 46)
            ToggleFrame.BorderSizePixel = 0
            ToggleFrame.ZIndex = 4
            CreateUICorner(10).Parent = ToggleFrame
            CreateStroke(Theme.Border, 1, 0.6).Parent = ToggleFrame
            
            local ToggleTitle = Instance.new("TextLabel")
            ToggleTitle.Parent = ToggleFrame
            ToggleTitle.BackgroundTransparency = 1
            ToggleTitle.Position = UDim2.fromOffset(15, 10)
            ToggleTitle.Size = UDim2.new(1, -80, 0, 18)
            ToggleTitle.Font = Enum.Font.GothamBold
            ToggleTitle.Text = Title
            ToggleTitle.TextColor3 = Theme.TextPrimary
            ToggleTitle.TextSize = 13
            ToggleTitle.TextXAlignment = Enum.TextXAlignment.Left
            ToggleTitle.ZIndex = 5
            
            if Description ~= "" then
                local ToggleDesc = Instance.new("TextLabel")
                ToggleDesc.Parent = ToggleFrame
                ToggleDesc.BackgroundTransparency = 1
                ToggleDesc.Position = UDim2.fromOffset(15, 30)
                ToggleDesc.Size = UDim2.new(1, -80, 0, 24)
                ToggleDesc.Font = Enum.Font.Gotham
                ToggleDesc.Text = Description
                ToggleDesc.TextColor3 = Theme.TextSecondary
                ToggleDesc.TextSize = 11
                ToggleDesc.TextWrapped = true
                ToggleDesc.TextXAlignment = Enum.TextXAlignment.Left
                ToggleDesc.TextYAlignment = Enum.TextYAlignment.Top
                ToggleDesc.ZIndex = 5
            end
            
            local ToggleButton = Instance.new("TextButton")
            ToggleButton.Parent = ToggleFrame
            ToggleButton.AnchorPoint = Vector2.new(1, 0.5)
            ToggleButton.BackgroundColor3 = Theme.Tertiary
            ToggleButton.Position = UDim2.new(1, -15, 0.5, 0)
            ToggleButton.Size = UDim2.fromOffset(46, 24)
            ToggleButton.Text = ""
            ToggleButton.AutoButtonColor = false
            ToggleButton.BorderSizePixel = 0
            ToggleButton.ZIndex = 5
            CreateUICorner(12).Parent = ToggleButton
            CreateStroke(Theme.Border, 1.5, 0.5).Parent = ToggleButton
            
            local ToggleIndicator = Instance.new("Frame")
            ToggleIndicator.Parent = ToggleButton
            ToggleIndicator.BackgroundColor3 = Theme.TextSecondary
            ToggleIndicator.Position = UDim2.fromOffset(3, 3)
            ToggleIndicator.Size = UDim2.fromOffset(18, 18)
            ToggleIndicator.BorderSizePixel = 0
            ToggleIndicator.ZIndex = 6
            CreateUICorner(9).Parent = ToggleIndicator
            
            local Toggled = Default
            
            local function UpdateToggle(value, noCallback)
                Toggled = value
                Window.SavedData[Flag] = value
                
                if Toggled then
                    Tween(ToggleButton, {BackgroundColor3 = Theme.Accent}, 0.3)
                    local stroke = ToggleButton:FindFirstChildOfClass("UIStroke")
                    if stroke then Tween(stroke, {Color = Theme.AccentHover, Transparency = 0.2}, 0.3) end
                    Tween(ToggleIndicator, {Position = UDim2.fromOffset(25, 3), BackgroundColor3 = Theme.TextPrimary}, 0.3, Enum.EasingStyle.Back)
                else
                    Tween(ToggleButton, {BackgroundColor3 = Theme.Tertiary}, 0.3)
                    local stroke = ToggleButton:FindFirstChildOfClass("UIStroke")
                    if stroke then Tween(stroke, {Color = Theme.Border, Transparency = 0.5}, 0.3) end
                    Tween(ToggleIndicator, {Position = UDim2.fromOffset(3, 3), BackgroundColor3 = Theme.TextSecondary}, 0.3, Enum.EasingStyle.Back)
                end
                
                if not noCallback then pcall(Callback, Toggled) end
            end
            
            ToggleButton.MouseButton1Click:Connect(function()
                UpdateToggle(not Toggled)
            end)
            
            UpdateToggle(Default, true)
            
            return {
                Frame = ToggleFrame,
                SetValue = function(value) UpdateToggle(value, true) end,
                GetValue = function() return Toggled end
            }
        end
        
        function Tab:AddSlider(options)
            options = options or {}
            local Title = options.Title or "Slider"
            local Description = options.Description or ""
            local Min = options.Min or 0
            local Max = options.Max or 100
            local Default = options.Default or Min
            local Increment = options.Increment or 1
            local Callback = options.Callback or function() end
            local Flag = options.Flag or Title
            
            local SliderFrame = Instance.new("Frame")
            SliderFrame.Parent = TabContent
            SliderFrame.BackgroundColor3 = Theme.Secondary
            SliderFrame.BackgroundTransparency = 0.5
            SliderFrame.Size = UDim2.new(1, 0, 0, Description ~= "" and 86 or 66)
            SliderFrame.BorderSizePixel = 0
            SliderFrame.ZIndex = 4
            CreateUICorner(10).Parent = SliderFrame
            CreateStroke(Theme.Border, 1, 0.6).Parent = SliderFrame
            
            local SliderTitle = Instance.new("TextLabel")
            SliderTitle.Parent = SliderFrame
            SliderTitle.BackgroundTransparency = 1
            SliderTitle.Position = UDim2.fromOffset(15, 10)
            SliderTitle.Size = UDim2.new(1, -80, 0, 18)
            SliderTitle.Font = Enum.Font.GothamBold
            SliderTitle.Text = Title
            SliderTitle.TextColor3 = Theme.TextPrimary
            SliderTitle.TextSize = 13
            SliderTitle.TextXAlignment = Enum.TextXAlignment.Left
            SliderTitle.ZIndex = 5
            
            local SliderValueBox = Instance.new("TextBox")
            SliderValueBox.Parent = SliderFrame
            SliderValueBox.AnchorPoint = Vector2.new(1, 0)
            SliderValueBox.BackgroundColor3 = Theme.Accent
            SliderValueBox.BackgroundTransparency = 0.9
            SliderValueBox.Position = UDim2.new(1, -15, 0, 10)
            SliderValueBox.Size = UDim2.fromOffset(56, 18)
            SliderValueBox.Font = Enum.Font.GothamBold
            SliderValueBox.Text = tostring(Default)
            SliderValueBox.TextColor3 = Theme.Accent
            SliderValueBox.TextSize = 12
            SliderValueBox.ClearTextOnFocus = false
            SliderValueBox.BorderSizePixel = 0
            SliderValueBox.ZIndex = 5
            CreateUICorner(6).Parent = SliderValueBox
            
            if Description ~= "" then
                local SliderDesc = Instance.new("TextLabel")
                SliderDesc.Parent = SliderFrame
                SliderDesc.BackgroundTransparency = 1
                SliderDesc.Position = UDim2.fromOffset(15, 30)
                SliderDesc.Size = UDim2.new(1, -30, 0, 16)
                SliderDesc.Font = Enum.Font.Gotham
                SliderDesc.Text = Description
                SliderDesc.TextColor3 = Theme.TextSecondary
                SliderDesc.TextSize = 10
                SliderDesc.TextXAlignment = Enum.TextXAlignment.Left
                SliderDesc.ZIndex = 5
            end
            
            local SliderBar = Instance.new("Frame")
            SliderBar.Parent = SliderFrame
            SliderBar.BackgroundColor3 = Theme.Tertiary
            SliderBar.Position = UDim2.new(0, 15, 1, Description ~= "" and -23 or -28)
            SliderBar.Size = UDim2.new(1, -30, 0, 6)
            SliderBar.BorderSizePixel = 0
            SliderBar.ZIndex = 5
            CreateUICorner(4).Parent = SliderBar
            
            local SliderFill = Instance.new("Frame")
            SliderFill.Parent = SliderBar
            SliderFill.BackgroundColor3 = Theme.Accent
            SliderFill.Size = UDim2.new(0, 0, 1, 0)
            SliderFill.BorderSizePixel = 0
            SliderFill.ZIndex = 6
            CreateUICorner(4).Parent = SliderFill
            CreateGradient(0, {Theme.Accent, Theme.AccentHover}).Parent = SliderFill
            
            local SliderButton = Instance.new("TextButton")
            SliderButton.Parent = SliderBar
            SliderButton.BackgroundTransparency = 1
            SliderButton.Size = UDim2.fromScale(1, 1)
            SliderButton.Text = ""
            SliderButton.ZIndex = 7
            
            local CurrentValue = Default
            local Dragging = false
            
            local function UpdateSlider(value, noCallback)
                value = math.clamp(value, Min, Max)
                value = math.floor(value / Increment + 0.5) * Increment
                CurrentValue = value
                Window.SavedData[Flag] = value
                
                SliderValueBox.Text = tostring(value)
                local percentage = (value - Min) / (Max - Min)
                Tween(SliderFill, {Size = UDim2.new(percentage, 0, 1, 0)}, 0.15)
                
                if not noCallback then pcall(Callback, value) end
            end
            
            SliderValueBox.FocusLost:Connect(function(enterPressed)
                local inputValue = tonumber(SliderValueBox.Text)
                if inputValue then
                    UpdateSlider(inputValue)
                else
                    SliderValueBox.Text = tostring(CurrentValue)
                end
            end)
            
            SliderButton.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or
                   input.UserInputType == Enum.UserInputType.Touch then
                    Dragging = true
                    Tween(SliderBar, {BackgroundColor3 = Theme.Border}, 0.2)
                end
            end)
            
            SliderButton.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or
                   input.UserInputType == Enum.UserInputType.Touch then
                    Dragging = false
                    Tween(SliderBar, {BackgroundColor3 = Theme.Tertiary}, 0.2)
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if Dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or
                   input.UserInputType == Enum.UserInputType.Touch) then
                    local sizeX = SliderBar.AbsoluteSize.X
                    local posX = math.clamp(input.Position.X - SliderBar.AbsolutePosition.X, 0, sizeX)
                    local percentage = posX / sizeX
                    local value = Min + (Max - Min) * percentage
                    UpdateSlider(value)
                end
            end)
            
            UpdateSlider(Default, true)
            
            return {
                Frame = SliderFrame,
                SetValue = function(value) UpdateSlider(value, true) end,
                GetValue = function() return CurrentValue end
            }
        end
        
        function Tab:AddInput(options)
            options = options or {}
            local Title = options.Title or "Input"
            local Description = options.Description or ""
            local Default = options.Default or ""
            local Placeholder = options.Placeholder or "Enter text..."
            local Callback = options.Callback or function() end
            local Flag = options.Flag or Title
            
            local InputFrame = Instance.new("Frame")
            InputFrame.Parent = TabContent
            InputFrame.BackgroundColor3 = Theme.Secondary
            InputFrame.BackgroundTransparency = 0.5
            InputFrame.Size = UDim2.new(1, 0, 0, Description ~= "" and 94 or 79)
            InputFrame.BorderSizePixel = 0
            InputFrame.ZIndex = 4
            CreateUICorner(10).Parent = InputFrame
            CreateStroke(Theme.Border, 1, 0.6).Parent = InputFrame
            
            local InputTitle = Instance.new("TextLabel")
            InputTitle.Parent = InputFrame
            InputTitle.BackgroundTransparency = 1
            InputTitle.Position = UDim2.fromOffset(15, 10)
            InputTitle.Size = UDim2.new(1, -30, 0, 18)
            InputTitle.Font = Enum.Font.GothamBold
            InputTitle.Text = Title
            InputTitle.TextColor3 = Theme.TextPrimary
            InputTitle.TextSize = 13
            InputTitle.TextXAlignment = Enum.TextXAlignment.Left
            InputTitle.ZIndex = 5
            
            if Description ~= "" then
                local InputDesc = Instance.new("TextLabel")
                InputDesc.Parent = InputFrame
                InputDesc.BackgroundTransparency = 1
                InputDesc.Position = UDim2.fromOffset(15, 30)
                InputDesc.Size = UDim2.new(1, -30, 0, 16)
                InputDesc.Font = Enum.Font.Gotham
                InputDesc.Text = Description
                InputDesc.TextColor3 = Theme.TextSecondary
                InputDesc.TextSize = 10
                InputDesc.TextXAlignment = Enum.TextXAlignment.Left
                InputDesc.ZIndex = 5
            end
            
            local InputBox = Instance.new("TextBox")
            InputBox.Parent = InputFrame
            InputBox.BackgroundColor3 = Theme.Tertiary
            InputBox.BackgroundTransparency = 0.5
            InputBox.Position = UDim2.new(0, 15, 1, Description ~= "" and -39 or -44)
            InputBox.Size = UDim2.new(1, -30, 0, 33)
            InputBox.Font = Enum.Font.Gotham
            InputBox.PlaceholderText = Placeholder
            InputBox.PlaceholderColor3 = Theme.TextTertiary
            InputBox.Text = Default
            InputBox.TextColor3 = Theme.TextPrimary
            InputBox.TextSize = 12
            InputBox.ClearTextOnFocus = false
            InputBox.BorderSizePixel = 0
            InputBox.ZIndex = 5
            CreateUICorner(8).Parent = InputBox
            CreateStroke(Theme.Border, 1, 0.6).Parent = InputBox
            CreatePadding(10, 10, 10, 10).Parent = InputBox
            
            InputBox.Focused:Connect(function()
                Tween(InputBox, {BackgroundTransparency = 0.2}, 0.2)
                local stroke = InputBox:FindFirstChildOfClass("UIStroke")
                if stroke then Tween(stroke, {Color = Theme.Accent, Transparency = 0.2}, 0.2) end
            end)
            
            InputBox.FocusLost:Connect(function(enterPressed)
                Tween(InputBox, {BackgroundTransparency = 0.5}, 0.2)
                local stroke = InputBox:FindFirstChildOfClass("UIStroke")
                if stroke then Tween(stroke, {Color = Theme.Border, Transparency = 0.6}, 0.2) end
                
                if enterPressed then
                    Window.SavedData[Flag] = InputBox.Text
                    pcall(Callback, InputBox.Text)
                end
            end)
            
            return {
                Frame = InputFrame,
                SetValue = function(value) InputBox.Text = value Window.SavedData[Flag] = value end,
                GetValue = function() return InputBox.Text end
            }
        end
        
        function Tab:AddDropdown(options)
            options = options or {}
            local Title = options.Title or "Dropdown"
            local Description = options.Description or ""
            local Options = options.Options or {"Option 1", "Option 2"}
            local Default = options.Default or Options[1]
            local Callback = options.Callback or function() end
            local Flag = options.Flag or Title
            
            local DropFrame = Instance.new("Frame")
            DropFrame.Parent = TabContent
            DropFrame.BackgroundColor3 = Theme.Secondary
            DropFrame.BackgroundTransparency = 0.5
            DropFrame.Size = UDim2.new(1, 0, 0, Description ~= "" and 94 or 79)
            DropFrame.ClipsDescendants = false
            DropFrame.BorderSizePixel = 0
            DropFrame.ZIndex = 20
            CreateUICorner(10).Parent = DropFrame
            CreateStroke(Theme.Border, 1, 0.6).Parent = DropFrame
            
            local DropTitle = Instance.new("TextLabel")
            DropTitle.Parent = DropFrame
            DropTitle.BackgroundTransparency = 1
            DropTitle.Position = UDim2.fromOffset(15, 10)
            DropTitle.Size = UDim2.new(1, -30, 0, 18)
            DropTitle.Font = Enum.Font.GothamBold
            DropTitle.Text = Title
            DropTitle.TextColor3 = Theme.TextPrimary
            DropTitle.TextSize = 13
            DropTitle.TextXAlignment = Enum.TextXAlignment.Left
            DropTitle.ZIndex = 21
            
            if Description ~= "" then
                local DropDesc = Instance.new("TextLabel")
                DropDesc.Parent = DropFrame
                DropDesc.BackgroundTransparency = 1
                DropDesc.Position = UDim2.fromOffset(15, 30)
                DropDesc.Size = UDim2.new(1, -30, 0, 16)
                DropDesc.Font = Enum.Font.Gotham
                DropDesc.Text = Description
                DropDesc.TextColor3 = Theme.TextSecondary
                DropDesc.TextSize = 10
                DropDesc.TextXAlignment = Enum.TextXAlignment.Left
                DropDesc.ZIndex = 21
            end
            
            local DropButton = Instance.new("TextButton")
            DropButton.Parent = DropFrame
            DropButton.BackgroundColor3 = Theme.Tertiary
            DropButton.BackgroundTransparency = 0.5
            DropButton.Position = UDim2.new(0, 15, 1, Description ~= "" and -39 or -44)
            DropButton.Size = UDim2.new(1, -30, 0, 33)
            DropButton.Text = ""
            DropButton.AutoButtonColor = false
            DropButton.BorderSizePixel = 0
            DropButton.ZIndex = 21
            CreateUICorner(8).Parent = DropButton
            CreateStroke(Theme.Border, 1, 0.6).Parent = DropButton
            
            local DropLabel = Instance.new("TextLabel")
            DropLabel.Parent = DropButton
            DropLabel.BackgroundTransparency = 1
            DropLabel.Position = UDim2.fromOffset(12, 0)
            DropLabel.Size = UDim2.new(1, -40, 1, 0)
            DropLabel.Font = Enum.Font.Gotham
            DropLabel.Text = Default
            DropLabel.TextColor3 = Theme.TextPrimary
            DropLabel.TextSize = 12
            DropLabel.TextXAlignment = Enum.TextXAlignment.Left
            DropLabel.ZIndex = 22
            
            local DropIcon = Instance.new("ImageLabel")
            DropIcon.Parent = DropButton
            DropIcon.AnchorPoint = Vector2.new(1, 0.5)
            DropIcon.BackgroundTransparency = 1
            DropIcon.Position = UDim2.new(1, -10, 0.5, 0)
            DropIcon.Size = UDim2.fromOffset(14, 14)
            DropIcon.Image = Icons.ChevronDown
            DropIcon.ImageColor3 = Theme.TextSecondary
            DropIcon.ZIndex = 22
            
            local DropList = Instance.new("ScrollingFrame")
            DropList.Parent = DropFrame
            DropList.Active = true
            DropList.BackgroundColor3 = Theme.Tertiary
            DropList.BackgroundTransparency = 0.1
            DropList.Position = UDim2.new(0, 15, 1, Description ~= "" and -2 or -7)
            DropList.Size = UDim2.new(1, -30, 0, 0)
            DropList.Visible = false
            DropList.ClipsDescendants = true
            DropList.ScrollBarThickness = deviceType == "Mobile" and 6 or 4
            DropList.ScrollBarImageColor3 = Theme.Accent
            DropList.ScrollBarImageTransparency = 0.5
            DropList.BorderSizePixel = 0
            DropList.CanvasSize = UDim2.fromScale(0, 0)
            DropList.ScrollingEnabled = true
            DropList.ElasticBehavior = Enum.ElasticBehavior.Never
            DropList.ZIndex = 23
            CreateUICorner(8).Parent = DropList
            CreateStroke(Theme.Accent, 2, 0.3).Parent = DropList
            
            local DropListLayout = Instance.new("UIListLayout")
            DropListLayout.Parent = DropList
            DropListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            DropListLayout.Padding = UDim.new(0, 3)
            CreatePadding(5, 5, 5, 5).Parent = DropList
            
            DropListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                DropList.CanvasSize = UDim2.fromOffset(0, DropListLayout.AbsoluteContentSize.Y + 10)
            end)
            
            local IsOpen = false
            local CurrentValue = Default
            local CurrentOptions = Options
            
            local function CloseDropdown()
                IsOpen = false
                Tween(DropList, {Size = UDim2.new(1, -30, 0, 0)}, 0.3, Enum.EasingStyle.Back)
                Tween(DropIcon, {Rotation = 0}, 0.3)
                local stroke = DropButton:FindFirstChildOfClass("UIStroke")
                if stroke then Tween(stroke, {Color = Theme.Border, Transparency = 0.6}, 0.2) end
                task.wait(0.3)
                DropList.Visible = false
            end
            
            local function OpenDropdown()
                IsOpen = true
                DropList.Visible = true
                local targetHeight = math.min(#CurrentOptions * 33 + 13, 165)
                Tween(DropList, {Size = UDim2.new(1, -30, 0, targetHeight)}, 0.3, Enum.EasingStyle.Back)
                Tween(DropIcon, {Rotation = 180}, 0.3)
                local stroke = DropButton:FindFirstChildOfClass("UIStroke")
                if stroke then Tween(stroke, {Color = Theme.Accent, Transparency = 0.3}, 0.2) end
            end
            
            local function CreateOption(option)
                local OptionButton = Instance.new("TextButton")
                OptionButton.Name = option
                OptionButton.Parent = DropList
                OptionButton.BackgroundColor3 = Theme.Secondary
                OptionButton.BackgroundTransparency = 0.6
                OptionButton.Size = UDim2.new(1, 0, 0, 30)
                OptionButton.Text = ""
                OptionButton.AutoButtonColor = false
                OptionButton.BorderSizePixel = 0
                OptionButton.ZIndex = 24
                CreateUICorner(6).Parent = OptionButton
                
                local OptionLabel = Instance.new("TextLabel")
                OptionLabel.Parent = OptionButton
                OptionLabel.BackgroundTransparency = 1
                OptionLabel.Size = UDim2.new(1, -17, 1, 0)
                OptionLabel.Position = UDim2.fromOffset(10, 0)
                OptionLabel.Font = Enum.Font.Gotham
                OptionLabel.Text = option
                OptionLabel.TextColor3 = Theme.TextPrimary
                OptionLabel.TextSize = 11
                OptionLabel.TextXAlignment = Enum.TextXAlignment.Left
                OptionLabel.ZIndex = 25
                
                OptionButton.MouseEnter:Connect(function()
                    Tween(OptionButton, {BackgroundColor3 = Theme.Accent, BackgroundTransparency = 0.2}, 0.2)
                end)
                
                OptionButton.MouseLeave:Connect(function()
                    Tween(OptionButton, {BackgroundColor3 = Theme.Secondary, BackgroundTransparency = 0.6}, 0.2)
                end)
                
                OptionButton.MouseButton1Click:Connect(function()
                    CurrentValue = option
                    DropLabel.Text = option
                    Window.SavedData[Flag] = option
                    CloseDropdown()
                    pcall(Callback, option)
                end)
                
                return OptionButton
            end
            
            for _, option in ipairs(CurrentOptions) do
                CreateOption(option)
            end
            
            DropButton.MouseButton1Click:Connect(function()
                if IsOpen then CloseDropdown() else OpenDropdown() end
            end)
            
            DropButton.MouseEnter:Connect(function()
                if not IsOpen then Tween(DropButton, {BackgroundTransparency = 0.3}, 0.2) end
            end)
            
            DropButton.MouseLeave:Connect(function()
                if not IsOpen then Tween(DropButton, {BackgroundTransparency = 0.5}, 0.2) end
            end)
            
            return {
                Frame = DropFrame,
                SetValue = function(value)
                    CurrentValue = value
                    DropLabel.Text = value
                    Window.SavedData[Flag] = value
                end,
                GetValue = function()
                    return CurrentValue
                end,
                AddOption = function(option)
                    if not table.find(CurrentOptions, option) then
                        table.insert(CurrentOptions, option)
                        CreateOption(option)
                    end
                end,
                RemoveOption = function(option)
                    for i, v in ipairs(CurrentOptions) do
                        if v == option then
                            table.remove(CurrentOptions, i)
                            for _, child in ipairs(DropList:GetChildren()) do
                                if child.Name == option and child:IsA("TextButton") then
                                    child:Destroy()
                                end
                            end
                            break
                        end
                    end
                end,
                ClearOptions = function()
                    CurrentOptions = {}
                    for _, child in ipairs(DropList:GetChildren()) do
                        if child:IsA("TextButton") then
                            child:Destroy()
                        end
                    end
                    DropLabel.Text = "No Options"
                end,
                UpdateOptions = function(newOptions)
                    for _, child in ipairs(DropList:GetChildren()) do
                        if child:IsA("TextButton") then
                            child:Destroy()
                        end
                    end
                    CurrentOptions = newOptions
                    for _, option in ipairs(newOptions) do
                        CreateOption(option)
                    end
                    if #newOptions > 0 then
                        DropLabel.Text = newOptions[1]
                        CurrentValue = newOptions[1]
                    end
                end
            }
        end
        
        -- Enhanced Paragraph with Beautiful Accent Bar
        function Tab:AddParagraph(options)
            options = options or {}
            local Title = options.Title or "Paragraph"
            local Content = options.Content or "Content here"
            
            local ParaFrame = Instance.new("Frame")
            ParaFrame.Parent = TabContent
            ParaFrame.BackgroundColor3 = Theme.Accent
            ParaFrame.BackgroundTransparency = 0.95
            ParaFrame.Size = UDim2.new(1, 0, 0, 66)
            ParaFrame.AutomaticSize = Enum.AutomaticSize.Y
            ParaFrame.BorderSizePixel = 0
            ParaFrame.ZIndex = 4
            CreateUICorner(10).Parent = ParaFrame
            CreateStroke(Theme.Accent, 1, 0.7).Parent = ParaFrame
            
            -- Enhanced Rounded Accent Line
            local AccentLine = Instance.new("Frame")
            AccentLine.Parent = ParaFrame
            AccentLine.BackgroundColor3 = Theme.Accent
            AccentLine.BorderSizePixel = 0
            AccentLine.Position = UDim2.fromOffset(8, 8)
            AccentLine.Size = UDim2.new(0, 5, 1, -16)
            AccentLine.ZIndex = 5
            CreateUICorner(3).Parent = AccentLine
            
            -- Gradient on Accent Line
            CreateGradient(90, {
                Theme.Accent,
                Theme.AccentHover,
                Theme.Accent
            }).Parent = AccentLine
            
            local ParaTitle = Instance.new("TextLabel")
            ParaTitle.Parent = ParaFrame
            ParaTitle.BackgroundTransparency = 1
            ParaTitle.Position = UDim2.fromOffset(23, 12)
            ParaTitle.Size = UDim2.new(1, -33, 0, 18)
            ParaTitle.Font = Enum.Font.GothamBold
            ParaTitle.Text = Title
            ParaTitle.TextColor3 = Theme.Accent
            ParaTitle.TextSize = 13
            ParaTitle.TextXAlignment = Enum.TextXAlignment.Left
            ParaTitle.ZIndex = 5
            
            local ParaContent = Instance.new("TextLabel")
            ParaContent.Parent = ParaFrame
            ParaContent.BackgroundTransparency = 1
            ParaContent.Position = UDim2.fromOffset(23, 34)
            ParaContent.Size = UDim2.new(1, -33, 0, 0)
            ParaContent.AutomaticSize = Enum.AutomaticSize.Y
            ParaContent.Font = Enum.Font.Gotham
            ParaContent.Text = Content
            ParaContent.TextColor3 = Theme.TextPrimary
            ParaContent.TextSize = 11
            ParaContent.TextWrapped = true
            ParaContent.TextXAlignment = Enum.TextXAlignment.Left
            ParaContent.TextYAlignment = Enum.TextYAlignment.Top
            ParaContent.ZIndex = 5
            
            local bottomPadding = Instance.new("Frame")
            bottomPadding.Parent = ParaFrame
            bottomPadding.BackgroundTransparency = 1
            bottomPadding.Position = UDim2.fromScale(0, 1)
            bottomPadding.Size = UDim2.new(1, 0, 0, 12)
            bottomPadding.ZIndex = 5
            
            return {
                Frame = ParaFrame,
                SetTitle = function(text) ParaTitle.Text = text end,
                SetContent = function(text) ParaContent.Text = text end
            }
        end
        
        function Tab:AddDivider(text)
            local Divider = Instance.new("Frame")
            Divider.Parent = TabContent
            Divider.BackgroundTransparency = 1
            Divider.Size = UDim2.new(1, 0, 0, text and 32 or 17)
            Divider.ZIndex = 4
            
            local Line = Instance.new("Frame")
            Line.Parent = Divider
            Line.AnchorPoint = Vector2.new(0.5, 0.5)
            Line.BackgroundColor3 = Theme.Border
            Line.BorderSizePixel = 0
            Line.Position = UDim2.fromScale(0.5, 0.5)
            Line.Size = UDim2.new(1, -30, 0, 1)
            Line.ZIndex = 5
            
            if text then
                local DividerText = Instance.new("TextLabel")
                DividerText.Parent = Divider
                DividerText.AnchorPoint = Vector2.new(0.5, 0.5)
                DividerText.BackgroundColor3 = Theme.Background
                DividerText.Position = UDim2.fromScale(0.5, 0.5)
                DividerText.Size = UDim2.new(0, 0, 0, 19)
                DividerText.AutomaticSize = Enum.AutomaticSize.X
                DividerText.Font = Enum.Font.GothamMedium
                DividerText.Text = "  " .. text .. "  "
                DividerText.TextColor3 = Theme.TextSecondary
                DividerText.TextSize = 11
                DividerText.ZIndex = 6
            end
            
            return {Frame = Divider}
        end
        
        return Tab
    end
    
    function Window:SaveConfig()
        local success = SaveConfig(self.ConfigName, self.SavedData)
        if success then
            CreateNotification("Saved", "Configuration saved successfully", 2, "success")
        else
            CreateNotification("Error", "Failed to save configuration", 2, "error")
        end
        return success
    end
    
    function Window:LoadConfig()
        local data = LoadConfig(self.ConfigName)
        if data then
            self.SavedData = data
            CreateNotification("Loaded", "Configuration loaded successfully", 2, "success")
            return true
        else
            CreateNotification("Info", "No saved configuration found", 2, "info")
            return false
        end
    end
    
    function Window:Destroy()
        CreateConfirmationDialog(
            "Destroy Window",
            "Are you sure you want to destroy this window?",
            function()
                Tween(Main, {Size = UDim2.new(0, 0, 0, 0)}, 0.4, Enum.EasingStyle.Back, Enum.EasingDirection.In)
                task.wait(0.4)
                ScreenGui:Destroy()
            end
        )
    end
    
    if options.AutoLoad ~= false then
        task.spawn(function()
            task.wait(1)
            Window:LoadConfig()
        end)
    end
    
    Main.Size = UDim2.fromOffset(0, 0)
    if AutoResponsive then
        Tween(Main, {Size = GetResponsiveSize()}, 0.5, Enum.EasingStyle.Back)
    else
        Tween(Main, {Size = responsiveSize}, 0.5, Enum.EasingStyle.Back)
    end
    
    return Window
end

return Drakthon
