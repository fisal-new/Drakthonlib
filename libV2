--[[
    ╔══════════════════════════════════════════════════════════════╗
    ║            DRAKTHON HUB - PERFECT VERSION                   ║
    ║                   100% No Errors                            ║
    ╚══════════════════════════════════════════════════════════════╝
]]

local Library = {}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")

-- Theme
local Theme = {
    Background = Color3.fromRGB(16, 16, 20),
    TopBar = Color3.fromRGB(20, 20, 26),
    Surface = Color3.fromRGB(24, 24, 30),
    Element = Color3.fromRGB(30, 30, 38),
    Hover = Color3.fromRGB(38, 38, 48),
    Primary = Color3.fromRGB(147, 51, 234),
    Text = Color3.fromRGB(255, 255, 255),
    SubText = Color3.fromRGB(160, 160, 170),
}

-- Helpers
local function Tween(obj, props, time)
    local tween = TweenService:Create(obj, TweenInfo.new(time or 0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), props)
    tween:Play()
    return tween
end

local function Round(obj, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 8)
    corner.Parent = obj
end

local function Ripple(btn)
    btn.ClipsDescendants = true
    btn.MouseButton1Down:Connect(function()
        local ripple = Instance.new("Frame")
        ripple.AnchorPoint = Vector2.new(0.5, 0.5)
        ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
        ripple.Size = UDim2.new(0, 0, 0, 0)
        ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        ripple.BackgroundTransparency = 0.8
        ripple.BorderSizePixel = 0
        ripple.Parent = btn
        Round(ripple, 999)
        
        local size = math.max(btn.AbsoluteSize.X, btn.AbsoluteSize.Y) * 2
        Tween(ripple, {Size = UDim2.new(0, size, 0, size), BackgroundTransparency = 1}, 0.5)
        
        task.delay(0.5, function()
            if ripple and ripple.Parent then
                ripple:Destroy()
            end
        end)
    end)
end

-- Create Window
function Library:CreateWindow(title)
    title = title or "Drakthon Hub"
    
    -- ScreenGui
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "DrakthonHub"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    if gethui then
        ScreenGui.Parent = gethui()
    elseif syn and syn.protect_gui then
        syn.protect_gui(ScreenGui)
        ScreenGui.Parent = game:GetService("CoreGui")
    else
        ScreenGui.Parent = game:GetService("CoreGui")
    end

    -- Main Frame
    local Main = Instance.new("Frame")
    Main.Name = "Main"
    Main.AnchorPoint = Vector2.new(0.5, 0.5)
    Main.Position = UDim2.new(0.5, 0, 0.5, 0)
    Main.Size = UDim2.new(0, 560, 0, 400)
    Main.BackgroundColor3 = Theme.Background
    Main.BorderSizePixel = 0
    Main.Parent = ScreenGui
    Round(Main, 12)

    -- Shadow
    local Shadow = Instance.new("ImageLabel")
    Shadow.Name = "Shadow"
    Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    Shadow.Position = UDim2.new(0.5, 0, 0.5, 6)
    Shadow.Size = UDim2.new(1, 30, 1, 30)
    Shadow.BackgroundTransparency = 1
    Shadow.Image = "rbxassetid://6014261993"
    Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    Shadow.ImageTransparency = 0.6
    Shadow.ScaleType = Enum.ScaleType.Slice
    Shadow.SliceCenter = Rect.new(99, 99, 99, 99)
    Shadow.ZIndex = -1
    Shadow.Parent = Main

    -- TopBar
    local TopBar = Instance.new("Frame")
    TopBar.Name = "TopBar"
    TopBar.Size = UDim2.new(1, 0, 0, 45)
    TopBar.BackgroundColor3 = Theme.TopBar
    TopBar.BorderSizePixel = 0
    TopBar.Parent = Main
    Round(TopBar, 12)

    local TopCover = Instance.new("Frame")
    TopCover.Size = UDim2.new(1, 0, 0, 12)
    TopCover.Position = UDim2.new(0, 0, 1, -12)
    TopCover.BackgroundColor3 = Theme.TopBar
    TopCover.BorderSizePixel = 0
    TopCover.Parent = TopBar

    -- Loading Bar
    local LoadingBar = Instance.new("Frame")
    LoadingBar.Size = UDim2.new(1, 0, 0, 2)
    LoadingBar.BackgroundColor3 = Theme.Surface
    LoadingBar.BorderSizePixel = 0
    LoadingBar.Parent = TopBar

    local LoadingFill = Instance.new("Frame")
    LoadingFill.Size = UDim2.new(0, 0, 1, 0)
    LoadingFill.BackgroundColor3 = Theme.Primary
    LoadingFill.BorderSizePixel = 0
    LoadingFill.Parent = LoadingBar

    -- Animate Loading
    task.spawn(function()
        for i = 0, 100, 4 do
            Tween(LoadingFill, {Size = UDim2.new(i / 100, 0, 1, 0)}, 0.03)
            task.wait(0.02)
        end
        task.wait(0.2)
        Tween(LoadingBar, {BackgroundTransparency = 1}, 0.3)
        Tween(LoadingFill, {BackgroundTransparency = 1}, 0.3)
        task.wait(0.3)
        LoadingBar:Destroy()
    end)

    -- Title
    local Title = Instance.new("TextLabel")
    Title.Position = UDim2.new(0, 14, 0, 0)
    Title.Size = UDim2.new(1, -90, 1, -2)
    Title.BackgroundTransparency = 1
    Title.Text = title
    Title.Font = Enum.Font.GothamBold
    Title.TextSize = 15
    Title.TextColor3 = Theme.Text
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = TopBar

    -- Close Button
    local CloseBtn = Instance.new("TextButton")
    CloseBtn.AnchorPoint = Vector2.new(1, 0.5)
    CloseBtn.Position = UDim2.new(1, -10, 0.5, 1)
    CloseBtn.Size = UDim2.new(0, 30, 0, 30)
    CloseBtn.BackgroundColor3 = Theme.Element
    CloseBtn.BorderSizePixel = 0
    CloseBtn.Text = "×"
    CloseBtn.Font = Enum.Font.GothamBold
    CloseBtn.TextSize = 18
    CloseBtn.TextColor3 = Theme.Text
    CloseBtn.Parent = TopBar
    Round(CloseBtn, 6)
    Ripple(CloseBtn)

    CloseBtn.MouseEnter:Connect(function()
        Tween(CloseBtn, {BackgroundColor3 = Color3.fromRGB(220, 50, 50)})
    end)

    CloseBtn.MouseLeave:Connect(function()
        Tween(CloseBtn, {BackgroundColor3 = Theme.Element})
    end)

    CloseBtn.MouseButton1Click:Connect(function()
        Tween(Main, {Size = UDim2.new(0, 0, 0, 0)}, 0.3)
        task.wait(0.3)
        ScreenGui:Destroy()
    end)

    -- Minimize Button
    local MinBtn = Instance.new("TextButton")
    MinBtn.AnchorPoint = Vector2.new(1, 0.5)
    MinBtn.Position = UDim2.new(1, -45, 0.5, 1)
    MinBtn.Size = UDim2.new(0, 30, 0, 30)
    MinBtn.BackgroundColor3 = Theme.Element
    MinBtn.BorderSizePixel = 0
    MinBtn.Text = "−"
    MinBtn.Font = Enum.Font.GothamBold
    MinBtn.TextSize = 16
    MinBtn.TextColor3 = Theme.Text
    MinBtn.Parent = TopBar
    Round(MinBtn, 6)
    Ripple(MinBtn)

    local minimized = false
    local originalSize = Main.Size

    MinBtn.MouseEnter:Connect(function()
        Tween(MinBtn, {BackgroundColor3 = Theme.Primary})
    end)

    MinBtn.MouseLeave:Connect(function()
        Tween(MinBtn, {BackgroundColor3 = Theme.Element})
    end)

    MinBtn.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            Tween(Main, {Size = UDim2.new(Main.Size.X.Scale, Main.Size.X.Offset, 0, 45)}, 0.25)
        else
            Tween(Main, {Size = originalSize}, 0.25)
        end
    end)

    -- Dragging
    local dragging = false
    local dragInput
    local dragStart
    local startPos

    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = Main.Position
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input == dragInput then
            local delta = input.Position - dragStart
            Main.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    -- Tab Bar
    local TabBar = Instance.new("Frame")
    TabBar.Position = UDim2.new(0, 10, 0, 53)
    TabBar.Size = UDim2.new(1, -20, 0, 36)
    TabBar.BackgroundColor3 = Theme.Surface
    TabBar.BorderSizePixel = 0
    TabBar.Parent = Main
    Round(TabBar, 8)

    local TabList = Instance.new("Frame")
    TabList.Size = UDim2.new(1, -10, 1, -10)
    TabList.Position = UDim2.new(0, 5, 0, 5)
    TabList.BackgroundTransparency = 1
    TabList.Parent = TabBar

    local TabLayout = Instance.new("UIListLayout")
    TabLayout.FillDirection = Enum.FillDirection.Horizontal
    TabLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    TabLayout.Padding = UDim.new(0, 6)
    TabLayout.Parent = TabList

    -- Content
    local Content = Instance.new("Frame")
    Content.Position = UDim2.new(0, 10, 0, 97)
    Content.Size = UDim2.new(1, -20, 1, -107)
    Content.BackgroundColor3 = Theme.Surface
    Content.BorderSizePixel = 0
    Content.Parent = Main
    Round(Content, 8)

    local Pages = Instance.new("Frame")
    Pages.Size = UDim2.new(1, 0, 1, 0)
    Pages.BackgroundTransparency = 1
    Pages.Parent = Content

    -- Window Object
    local Window = {
        Tabs = {},
        CurrentTab = nil
    }

    -- Create Tab
    function Window:Tab(name)
        name = name or "Tab"

        -- Tab Button
        local TabButton = Instance.new("TextButton")
        TabButton.Size = UDim2.new(0, 80, 1, 0)
        TabButton.BackgroundColor3 = Theme.Element
        TabButton.BorderSizePixel = 0
        TabButton.Text = name
        TabButton.Font = Enum.Font.GothamSemibold
        TabButton.TextSize = 13
        TabButton.TextColor3 = Theme.SubText
        TabButton.Parent = TabList
        Round(TabButton, 6)
        Ripple(TabButton)

        -- Tab Page
        local Page = Instance.new("ScrollingFrame")
        Page.Size = UDim2.new(1, -20, 1, -20)
        Page.Position = UDim2.new(0, 10, 0, 10)
        Page.BackgroundTransparency = 1
        Page.BorderSizePixel = 0
        Page.ScrollBarThickness = 4
        Page.ScrollBarImageColor3 = Theme.Primary
        Page.CanvasSize = UDim2.new(0, 0, 0, 0)
        Page.Visible = false
        Page.Parent = Pages

        local PageLayout = Instance.new("UIListLayout")
        PageLayout.SortOrder = Enum.SortOrder.LayoutOrder
        PageLayout.Padding = UDim.new(0, 8)
        PageLayout.Parent = Page

        PageLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            Page.CanvasSize = UDim2.new(0, 0, 0, PageLayout.AbsoluteContentSize.Y + 10)
        end)

        -- Tab Click
        TabButton.MouseButton1Click:Connect(function()
            for _, tab in pairs(Window.Tabs) do
                tab.Page.Visible = false
                tab.Button.BackgroundColor3 = Theme.Element
                tab.Button.TextColor3 = Theme.SubText
            end
            
            Page.Visible = true
            TabButton.BackgroundColor3 = Theme.Primary
            TabButton.TextColor3 = Theme.Text
            Window.CurrentTab = name
        end)

        TabButton.MouseEnter:Connect(function()
            if Window.CurrentTab ~= name then
                Tween(TabButton, {BackgroundColor3 = Theme.Hover})
            end
        end)

        TabButton.MouseLeave:Connect(function()
            if Window.CurrentTab ~= name then
                Tween(TabButton, {BackgroundColor3 = Theme.Element})
            end
        end)

        local Tab = {
            Button = TabButton,
            Page = Page
        }

        Window.Tabs[name] = Tab

        if not Window.CurrentTab then
            TabButton.MouseButton1Click()
        end

        -- Elements
        local Elements = {}

        -- Section
        function Elements:Section(text)
            local Section = Instance.new("Frame")
            Section.Size = UDim2.new(1, 0, 0, 28)
            Section.BackgroundTransparency = 1
            Section.Parent = Page

            local Line1 = Instance.new("Frame")
            Line1.Size = UDim2.new(0.4, 0, 0, 1)
            Line1.Position = UDim2.new(0, 0, 0.5, 0)
            Line1.BackgroundColor3 = Theme.Primary
            Line1.BorderSizePixel = 0
            Line1.Parent = Section

            local Label = Instance.new("TextLabel")
            Label.AnchorPoint = Vector2.new(0.5, 0.5)
            Label.Position = UDim2.new(0.5, 0, 0.5, 0)
            Label.Size = UDim2.new(0.15, 0, 1, 0)
            Label.BackgroundTransparency = 1
            Label.Text = text or "Section"
            Label.Font = Enum.Font.GothamBold
            Label.TextSize = 13
            Label.TextColor3 = Theme.Primary
            Label.Parent = Section

            local Line2 = Instance.new("Frame")
            Line2.AnchorPoint = Vector2.new(1, 0)
            Line2.Size = UDim2.new(0.4, 0, 0, 1)
            Line2.Position = UDim2.new(1, 0, 0.5, 0)
            Line2.BackgroundColor3 = Theme.Primary
            Line2.BorderSizePixel = 0
            Line2.Parent = Section
        end

        -- Label
        function Elements:Label(text)
            local Label = Instance.new("TextLabel")
            Label.Size = UDim2.new(1, 0, 0, 30)
            Label.BackgroundColor3 = Theme.Element
            Label.BorderSizePixel = 0
            Label.Text = text or "Label"
            Label.Font = Enum.Font.Gotham
            Label.TextSize = 13
            Label.TextColor3 = Theme.Text
            Label.Parent = Page
            Round(Label, 6)

            return {
                SetText = function(self, newText)
                    Label.Text = newText
                end
            }
        end

        -- Button
        function Elements:Button(text, callback)
            callback = callback or function() end

            local Button = Instance.new("TextButton")
            Button.Size = UDim2.new(1, 0, 0, 35)
            Button.BackgroundColor3 = Theme.Element
            Button.BorderSizePixel = 0
            Button.Text = text or "Button"
            Button.Font = Enum.Font.GothamSemibold
            Button.TextSize = 13
            Button.TextColor3 = Theme.Text
            Button.Parent = Page
            Round(Button, 6)
            Ripple(Button)

            Button.MouseEnter:Connect(function()
                Tween(Button, {BackgroundColor3 = Theme.Primary})
            end)

            Button.MouseLeave:Connect(function()
                Tween(Button, {BackgroundColor3 = Theme.Element})
            end)

            Button.MouseButton1Click:Connect(function()
                Tween(Button, {Size = UDim2.new(1, 0, 0, 33)}, 0.1)
                task.wait(0.1)
                Tween(Button, {Size = UDim2.new(1, 0, 0, 35)}, 0.1)
                pcall(callback)
            end)
        end

        -- Toggle
        function Elements:Toggle(text, default, callback)
            callback = callback or function() end
            local toggled = default or false

            local Frame = Instance.new("Frame")
            Frame.Size = UDim2.new(1, 0, 0, 38)
            Frame.BackgroundColor3 = Theme.Element
            Frame.BorderSizePixel = 0
            Frame.Parent = Page
            Round(Frame, 6)

            local Label = Instance.new("TextLabel")
            Label.Size = UDim2.new(1, -60, 1, 0)
            Label.Position = UDim2.new(0, 10, 0, 0)
            Label.BackgroundTransparency = 1
            Label.Text = text or "Toggle"
            Label.Font = Enum.Font.Gotham
            Label.TextSize = 13
            Label.TextColor3 = Theme.Text
            Label.TextXAlignment = Enum.TextXAlignment.Left
            Label.Parent = Frame

            local Toggle = Instance.new("TextButton")
            Toggle.AnchorPoint = Vector2.new(1, 0.5)
            Toggle.Position = UDim2.new(1, -10, 0.5, 0)
            Toggle.Size = UDim2.new(0, 40, 0, 22)
            Toggle.BackgroundColor3 = Theme.Hover
            Toggle.BorderSizePixel = 0
            Toggle.Text = ""
            Toggle.Parent = Frame
            Round(Toggle, 11)

            local Circle = Instance.new("Frame")
            Circle.Position = UDim2.new(0, 2, 0.5, -9)
            Circle.Size = UDim2.new(0, 18, 0, 18)
            Circle.BackgroundColor3 = Theme.SubText
            Circle.BorderSizePixel = 0
            Circle.Parent = Toggle
            Round(Circle, 9)

            local function Update()
                if toggled then
                    Tween(Toggle, {BackgroundColor3 = Theme.Primary}, 0.2)
                    Tween(Circle, {Position = UDim2.new(1, -20, 0.5, -9), BackgroundColor3 = Theme.Text}, 0.2)
                else
                    Tween(Toggle, {BackgroundColor3 = Theme.Hover}, 0.2)
                    Tween(Circle, {Position = UDim2.new(0, 2, 0.5, -9), BackgroundColor3 = Theme.SubText}, 0.2)
                end
                pcall(callback, toggled)
            end

            Toggle.MouseButton1Click:Connect(function()
                toggled = not toggled
                Update()
            end)

            if default then
                Update()
            end

            return {
                Set = function(self, value)
                    toggled = value
                    Update()
                end
            }
        end

        -- Slider
        function Elements:Slider(text, min, max, default, callback)
            callback = callback or function() end
            min = min or 0
            max = max or 100
            default = default or min
            local value = default

            local Frame = Instance.new("Frame")
            Frame.Size = UDim2.new(1, 0, 0, 48)
            Frame.BackgroundColor3 = Theme.Element
            Frame.BorderSizePixel = 0
            Frame.Parent = Page
            Round(Frame, 6)

            local Label = Instance.new("TextLabel")
            Label.Size = UDim2.new(1, -70, 0, 20)
            Label.Position = UDim2.new(0, 10, 0, 6)
            Label.BackgroundTransparency = 1
            Label.Text = text or "Slider"
            Label.Font = Enum.Font.Gotham
            Label.TextSize = 13
            Label.TextColor3 = Theme.Text
            Label.TextXAlignment = Enum.TextXAlignment.Left
            Label.Parent = Frame

            local Value = Instance.new("TextLabel")
            Value.AnchorPoint = Vector2.new(1, 0)
            Value.Size = UDim2.new(0, 50, 0, 20)
            Value.Position = UDim2.new(1, -10, 0, 6)
            Value.BackgroundTransparency = 1
            Value.Text = tostring(default)
            Value.Font = Enum.Font.GothamBold
            Value.TextSize = 13
            Value.TextColor3 = Theme.Primary
            Value.TextXAlignment = Enum.TextXAlignment.Right
            Value.Parent = Frame

            local Track = Instance.new("Frame")
            Track.Position = UDim2.new(0, 10, 0, 30)
            Track.Size = UDim2.new(1, -20, 0, 6)
            Track.BackgroundColor3 = Theme.Hover
            Track.BorderSizePixel = 0
            Track.Parent = Frame
            Round(Track, 3)

            local Fill = Instance.new("Frame")
            Fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
            Fill.BackgroundColor3 = Theme.Primary
            Fill.BorderSizePixel = 0
            Fill.Parent = Track
            Round(Fill, 3)

            local dragging = false

            local function Update(input)
                local pos = math.clamp((input.Position.X - Track.AbsolutePosition.X) / Track.AbsoluteSize.X, 0, 1)
                value = math.floor(min + (max - min) * pos)
                Value.Text = tostring(value)
                Fill.Size = UDim2.new(pos, 0, 1, 0)
                pcall(callback, value)
            end

            Track.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    Update(input)
                end
            end)

            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    Update(input)
                end
            end)

            return {
                Set = function(self, newValue)
                    value = math.clamp(newValue, min, max)
                    Value.Text = tostring(value)
                    Fill.Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
                end
            }
        end

        -- Textbox
        function Elements:Textbox(text, placeholder, callback)
            callback = callback or function() end

            local Frame = Instance.new("Frame")
            Frame.Size = UDim2.new(1, 0, 0, 58)
            Frame.BackgroundColor3 = Theme.Element
            Frame.BorderSizePixel = 0
            Frame.Parent = Page
            Round(Frame, 6)

            local Label = Instance.new("TextLabel")
            Label.Size = UDim2.new(1, -20, 0, 18)
            Label.Position = UDim2.new(0, 10, 0, 6)
            Label.BackgroundTransparency = 1
            Label.Text = text or "Textbox"
            Label.Font = Enum.Font.Gotham
            Label.TextSize = 12
            Label.TextColor3 = Theme.SubText
            Label.TextXAlignment = Enum.TextXAlignment.Left
            Label.Parent = Frame

            local Input = Instance.new("TextBox")
            Input.Position = UDim2.new(0, 10, 0, 28)
            Input.Size = UDim2.new(1, -20, 0, 24)
            Input.BackgroundColor3 = Theme.Hover
            Input.BorderSizePixel = 0
            Input.Font = Enum.Font.Gotham
            Input.TextSize = 12
            Input.TextColor3 = Theme.Text
            Input.PlaceholderText = placeholder or "Enter text..."
            Input.PlaceholderColor3 = Theme.SubText
            Input.Text = ""
            Input.ClearTextOnFocus = false
            Input.Parent = Frame
            Round(Input, 4)

            local Padding = Instance.new("UIPadding")
            Padding.PaddingLeft = UDim.new(0, 8)
            Padding.PaddingRight = UDim.new(0, 8)
            Padding.Parent = Input

            Input.Focused:Connect(function()
                Tween(Input, {BackgroundColor3 = Theme.Surface})
            end)

            Input.FocusLost:Connect(function(enterPressed)
                Tween(Input, {BackgroundColor3 = Theme.Hover})
                if enterPressed then
                    pcall(callback, Input.Text)
                end
            end)

            return {
                Set = function(self, value)
                    Input.Text = value
                end
            }
        end

        -- Dropdown
        function Elements:Dropdown(text, options, callback)
            callback = callback or function() end
            options = options or {"Option 1", "Option 2"}
            
            local selected = options[1]
            local isOpen = false

            local Frame = Instance.new("Frame")
            Frame.Size = UDim2.new(1, 0, 0, 38)
            Frame.BackgroundColor3 = Theme.Element
            Frame.BorderSizePixel = 0
            Frame.ClipsDescendants = true
            Frame.Parent = Page
            Round(Frame, 6)

            local Button = Instance.new("TextButton")
            Button.Size = UDim2.new(1, 0, 0, 38)
            Button.BackgroundTransparency = 1
            Button.Text = ""
            Button.Parent = Frame

            local Label = Instance.new("TextLabel")
            Label.Size = UDim2.new(1, -40, 1, 0)
            Label.Position = UDim2.new(0, 10, 0, 0)
            Label.BackgroundTransparency = 1
            Label.Text = text .. ": " .. selected
            Label.Font = Enum.Font.Gotham
            Label.TextSize = 13
            Label.TextColor3 = Theme.Text
            Label.TextXAlignment = Enum.TextXAlignment.Left
            Label.Parent = Button

            local Arrow = Instance.new("TextLabel")
            Arrow.AnchorPoint = Vector2.new(1, 0.5)
            Arrow.Position = UDim2.new(1, -10, 0.5, 0)
            Arrow.Size = UDim2.new(0, 16, 0, 16)
            Arrow.BackgroundTransparency = 1
            Arrow.Text = "▼"
            Arrow.Font = Enum.Font.Gotham
            Arrow.TextSize = 10
            Arrow.TextColor3 = Theme.Primary
            Arrow.Parent = Button

            local List = Instance.new("Frame")
            List.Position = UDim2.new(0, 6, 0, 38)
            List.Size = UDim2.new(1, -12, 0, 0)
            List.BackgroundTransparency = 1
            List.Parent = Frame

            local ListLayout = Instance.new("UIListLayout")
            ListLayout.Padding = UDim.new(0, 4)
            ListLayout.Parent = List

            for _, option in ipairs(options) do
                local OptionButton = Instance.new("TextButton")
                OptionButton.Size = UDim2.new(1, 0, 0, 30)
                OptionButton.BackgroundColor3 = Theme.Hover
                OptionButton.BorderSizePixel = 0
                OptionButton.Text = option
                OptionButton.Font = Enum.Font.Gotham
                OptionButton.TextSize = 12
                OptionButton.TextColor3 = Theme.Text
                OptionButton.Parent = List
                Round(OptionButton, 4)
                Ripple(OptionButton)

                OptionButton.MouseEnter:Connect(function()
                    Tween(OptionButton, {BackgroundColor3 = Theme.Primary})
                end)

                OptionButton.MouseLeave:Connect(function()
                    Tween(OptionButton, {BackgroundColor3 = Theme.Hover})
                end)

                OptionButton.MouseButton1Click:Connect(function()
                    selected = option
                    Label.Text = text .. ": " .. option
                    
                    isOpen = false
                    Tween(Frame, {Size = UDim2.new(1, 0, 0, 38)}, 0.25)
                    Tween(List, {Size = UDim2.new(1, -12, 0, 0)}, 0.25)
                    Tween(Arrow, {Rotation = 0}, 0.25)
                    
                    pcall(callback, option)
                end)
            end

            Button.MouseButton1Click:Connect(function()
                isOpen = not isOpen
                if isOpen then
                    local height = math.min(#options * 34, 140)
                    Tween(Frame, {Size = UDim2.new(1, 0, 0, 38 + height + 6)}, 0.25)
                    Tween(List, {Size = UDim2.new(1, -12, 0, height)}, 0.25)
                    Tween(Arrow, {Rotation = 180}, 0.25)
                else
                    Tween(Frame, {Size = UDim2.new(1, 0, 0, 38)}, 0.25)
                    Tween(List, {Size = UDim2.new(1, -12, 0, 0)}, 0.25)
                    Tween(Arrow, {Rotation = 0}, 0.25)
                end
            end)

            return {
                Set = function(self, value)
                    if table.find(options, value) then
                        selected = value
                        Label.Text = text .. ": " .. value
                    end
                end
            }
        end

        return Elements
    end

    return Window
end

-- Notify
function Library:Notify(title, text, duration)
    title = title or "Notification"
    text = text or "This is a notification"
    duration = duration or 3

    local colors = {
        Info = Theme.Primary,
        Success = Color3.fromRGB(34, 197, 94),
        Warning = Color3.fromRGB(245, 158, 11),
        Error = Color3.fromRGB(239, 68, 68)
    }

    local color = colors[title] or Theme.Primary

    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "Notification"
    ScreenGui.ResetOnSpawn = false
    
    if gethui then
        ScreenGui.Parent = gethui()
    else
        ScreenGui.Parent = game:GetService("CoreGui")
    end

    local Notif = Instance.new("Frame")
    Notif.AnchorPoint = Vector2.new(1, 0)
    Notif.Position = UDim2.new(1, 10, 0, 10)
    Notif.Size = UDim2.new(0, 300, 0, 70)
    Notif.BackgroundColor3 = Theme.Surface
    Notif.BorderSizePixel = 0
    Notif.Parent = ScreenGui
    Round(Notif, 8)

    local Bar = Instance.new("Frame")
    Bar.Size = UDim2.new(0, 3, 1, 0)
    Bar.BackgroundColor3 = color
    Bar.BorderSizePixel = 0
    Bar.Parent = Notif

    local Title = Instance.new("TextLabel")
    Title.Position = UDim2.new(0, 14, 0, 10)
    Title.Size = UDim2.new(1, -28, 0, 20)
    Title.BackgroundTransparency = 1
    Title.Text = title
    Title.Font = Enum.Font.GothamBold
    Title.TextSize = 14
    Title.TextColor3 = Theme.Text
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = Notif

    local Desc = Instance.new("TextLabel")
    Desc.Position = UDim2.new(0, 14, 0, 34)
    Desc.Size = UDim2.new(1, -28, 0, 28)
    Desc.BackgroundTransparency = 1
    Desc.Text = text
    Desc.Font = Enum.Font.Gotham
    Desc.TextSize = 12
    Desc.TextColor3 = Theme.SubText
    Desc.TextXAlignment = Enum.TextXAlignment.Left
    Desc.TextWrapped = true
    Desc.Parent = Notif

    Tween(Notif, {Position = UDim2.new(1, -10, 0, 10)}, 0.3)

    task.delay(duration, function()
        Tween(Notif, {Position = UDim2.new(1, 10, 0, 10)}, 0.2)
        task.wait(0.3)
        ScreenGui:Destroy()
    end)
end

return Library
