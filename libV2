--[[
    ════════════════════════════════════════════════════════════════════════════
    🐉 Drakthon UI Library V2.1 - Complete & Enhanced
    ════════════════════════════════════════════════════════════════════════════
    
    GitHub: https://github.com/fisal-new/Drakthonlib
    
    ✅ Features:
    • Theme System (loads from GitHub)
    • Enhanced Notification System
    • Responsive Design (Auto-resize)
    • Smooth Animations
    • All UI Elements
    • Mobile Support
    
    ════════════════════════════════════════════════════════════════════════════
]]

local Drakthon = {
    Version = "2.1.0",
    Author = "Drakthon Team",
    Flags = {}
}

--[[
    ════════════════════════════════════════════════════════════════════════════
    🎮 SERVICES
    ════════════════════════════════════════════════════════════════════════════
]]

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local Camera = workspace.CurrentCamera

--[[
    ════════════════════════════════════════════════════════════════════════════
    🎨 LOAD THEME SYSTEM
    ════════════════════════════════════════════════════════════════════════════
]]

local Theme
local themeLoaded, themeError = pcall(function()
    Theme = loadstring(game:HttpGet("https://raw.githubusercontent.com/fisal-new/Drakthonlib/main/Theme.lua"))()
end)

if not themeLoaded then
    warn("❌ Failed to load Theme.lua:", themeError)
    warn("⚠️ Using fallback theme system")
    
    -- Fallback Theme
    Theme = {
        CurrentTheme = "Ocean",
        Elements = {},
        Themes = {
            Ocean = {
                BG = Color3.fromRGB(12, 18, 28),
                BG2 = Color3.fromRGB(16, 23, 36),
                BG3 = Color3.fromRGB(20, 28, 44),
                Accent = Color3.fromRGB(0, 149, 255),
                Text = Color3.fromRGB(255, 255, 255),
                Text2 = Color3.fromRGB(160, 180, 200),
                Green = Color3.fromRGB(46, 204, 113),
                Red = Color3.fromRGB(231, 76, 60),
                Yellow = Color3.fromRGB(241, 196, 15),
                Blue = Color3.fromRGB(52, 152, 219)
            }
        },
        GetColor = function(self, name) return self.Themes[self.CurrentTheme][name] end,
        Set = function(self, theme) self.CurrentTheme = theme end,
        Register = function(self, element, type, color) end,
        List = function(self) return {"Ocean"} end
    }
    
    function Theme.BG() return Theme:GetColor("BG") end
    function Theme.BG2() return Theme:GetColor("BG2") end
    function Theme.BG3() return Theme:GetColor("BG3") end
    function Theme.Accent() return Theme:GetColor("Accent") end
    function Theme.Text() return Theme:GetColor("Text") end
    function Theme.Text2() return Theme:GetColor("Text2") end
    function Theme.Green() return Theme:GetColor("Green") end
    function Theme.Red() return Theme:GetColor("Red") end
    function Theme.Yellow() return Theme:GetColor("Yellow") end
    function Theme.Blue() return Theme:GetColor("Blue") end
else
    print("✅ Theme.lua loaded successfully!")
end

--[[
    ════════════════════════════════════════════════════════════════════════════
    📐 RESPONSIVE CONFIGURATION
    ════════════════════════════════════════════════════════════════════════════
]]

local RESPONSIVE = {
    MinWidth = 400,
    MinHeight = 300,
    MaxWidth = 1400,
    MaxHeight = 900,
    DefaultWidth = 650,
    DefaultHeight = 450,
    MobileWidth = 380,
    MobileHeight = 600
}

local function GetResponsiveSize()
    local viewportSize = Camera.ViewportSize
    local isMobile = viewportSize.X < 600
    
    if isMobile then
        return {RESPONSIVE.MobileWidth, RESPONSIVE.MobileHeight}
    end
    
    local width = math.clamp(
        viewportSize.X * 0.5,
        RESPONSIVE.MinWidth,
        RESPONSIVE.MaxWidth
    )
    
    local height = math.clamp(
        viewportSize.Y * 0.65,
        RESPONSIVE.MinHeight,
        RESPONSIVE.MaxHeight
    )
    
    return {width, height}
end

--[[
    ════════════════════════════════════════════════════════════════════════════
    🛠️ UTILITY FUNCTIONS
    ════════════════════════════════════════════════════════════════════════════
]]

local function Tween(obj, props, dur, style, dir)
    if not obj or not obj.Parent then return end
    local tween = TweenService:Create(
        obj, 
        TweenInfo.new(dur or 0.3, style or Enum.EasingStyle.Quad, dir or Enum.EasingDirection.Out), 
        props
    )
    tween:Play()
    return tween
end

local function Create(class, props)
    local obj = Instance.new(class)
    for k, v in pairs(props) do
        if k ~= "Parent" then 
            pcall(function() obj[k] = v end)
        end
    end
    if props.Parent then obj.Parent = props.Parent end
    return obj
end

local function AddCorner(parent, radius)
    return Create("UICorner", {Parent = parent, CornerRadius = UDim.new(0, radius or 8)})
end

local function AddPadding(parent, p)
    return Create("UIPadding", {
        Parent = parent,
        PaddingTop = UDim.new(0, p or 10),
        PaddingLeft = UDim.new(0, p or 10),
        PaddingRight = UDim.new(0, p or 10),
        PaddingBottom = UDim.new(0, p or 10)
    })
end

--[[
    ════════════════════════════════════════════════════════════════════════════
    🖱️ DRAGGING SYSTEM
    ════════════════════════════════════════════════════════════════════════════
]]

local function MakeDraggable(frame, handle)
    local dragging, dragInput, dragStart, startPos
    
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    handle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or 
           input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input == dragInput then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(
                startPos.X.Scale, 
                startPos.X.Offset + delta.X, 
                startPos.Y.Scale, 
                startPos.Y.Offset + delta.Y
            )
        end
    end)
end

--[[
    ════════════════════════════════════════════════════════════════════════════
    🔔 NOTIFICATION SYSTEM - ENHANCED
    ════════════════════════════════════════════════════════════════════════════
]]

local NotificationQueue = {}
local IsProcessing = false
local MaxNotifications = 5
local ActiveNotifications = {}

function Drakthon:Notify(config)
    config = config or {}
    
    local notif = {
        Title = config.Title or "Notification",
        Content = config.Content or "",
        Duration = config.Duration or 3,
        Type = config.Type or "Default",
        Icon = config.Icon
    }
    
    if notif.Type == "Success" then 
        notif.Color = Theme.Green()
        notif.Icon = notif.Icon or "✓"
    elseif notif.Type == "Warning" then 
        notif.Color = Theme.Yellow()
        notif.Icon = notif.Icon or "⚠"
    elseif notif.Type == "Error" then 
        notif.Color = Theme.Red()
        notif.Icon = notif.Icon or "✕"
    elseif notif.Type == "Info" then 
        notif.Color = Theme.Blue()
        notif.Icon = notif.Icon or "ℹ"
    else 
        notif.Color = Theme.Accent()
        notif.Icon = notif.Icon or "●"
    end
    
    table.insert(NotificationQueue, notif)
    
    if not IsProcessing then
        IsProcessing = true
        task.spawn(function() self:ProcessQueue() end)
    end
end

function Drakthon:ProcessQueue()
    while #NotificationQueue > 0 do
        while #ActiveNotifications >= MaxNotifications do
            task.wait(0.1)
        end
        
        local notif = table.remove(NotificationQueue, 1)
        if not notif then break end
        
        task.spawn(function()
            self:ShowNotification(notif)
        end)
        
        task.wait(0.15)
    end
    IsProcessing = false
end

function Drakthon:ShowNotification(notif)
    local holder = self.NotificationHolder
    if not holder or not holder.Parent then return end
    
    -- Calculate position
    local yPos = 20
    for _, activeNotif in ipairs(ActiveNotifications) do
        if activeNotif and activeNotif.Parent then
            yPos = yPos + 90
        end
    end
    
    local NotifFrame = Create("Frame", {
        Parent = holder,
        BackgroundColor3 = Theme.BG2(),
        BorderSizePixel = 0,
        Position = UDim2.new(1, 10, 0, yPos),
        Size = UDim2.new(0, 0, 0, 80),
        ZIndex = 1000,
        ClipsDescendants = true
    })
    
    table.insert(ActiveNotifications, NotifFrame)
    Theme:Register(NotifFrame, "Color", "BG2")
    AddCorner(NotifFrame, 10)
    
    -- Shadow
    Create("ImageLabel", {
        Parent = NotifFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, -10, 0, -10),
        Size = UDim2.new(1, 20, 1, 20),
        ZIndex = 999,
        Image = "rbxassetid://5554236805",
        ImageColor3 = Color3.fromRGB(0, 0, 0),
        ImageTransparency = 0.8,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(23, 23, 277, 277)
    })
    
    -- Accent Bar
    Create("Frame", {
        Parent = NotifFrame,
        BackgroundColor3 = notif.Color,
        BorderSizePixel = 0,
        Size = UDim2.new(0, 4, 1, 0),
        ZIndex = 1001
    })
    
    -- Icon
    if notif.Icon then
        local IconLabel = Create("TextLabel", {
            Parent = NotifFrame,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 15, 0, 0),
            Size = UDim2.new(0, 40, 0, 40),
            Font = Enum.Font.GothamBold,
            Text = notif.Icon,
            TextColor3 = notif.Color,
            TextSize = 24,
            ZIndex = 1001
        })
    end
    
    -- Title
    local TitleLabel = Create("TextLabel", {
        Parent = NotifFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, notif.Icon and 60 or 15, 0, 10),
        Size = UDim2.new(1, notif.Icon and -75 or -30, 0, 20),
        Font = Enum.Font.GothamBold,
        Text = notif.Title,
        TextColor3 = Theme.Text(),
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 1001
    })
    
    Theme:Register(TitleLabel, "TextColor", "Text")
    
    -- Content
    local ContentLabel = Create("TextLabel", {
        Parent = NotifFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, notif.Icon and 60 or 15, 0, 35),
        Size = UDim2.new(1, notif.Icon and -75 or -30, 0, 35),
        Font = Enum.Font.Gotham,
        Text = notif.Content,
        TextColor3 = Theme.Text2(),
        TextSize = 12,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextWrapped = true,
        TextYAlignment = Enum.TextYAlignment.Top,
        ZIndex = 1001
    })
    
    Theme:Register(ContentLabel, "TextColor", "Text2")
    
    -- Progress Bar Background
    local ProgressBG = Create("Frame", {
        Parent = NotifFrame,
        BackgroundColor3 = Theme.BG3(),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, -3),
        Size = UDim2.new(1, 0, 0, 3),
        ZIndex = 1001
    })
    
    Theme:Register(ProgressBG, "Color", "BG3")
    
    -- Progress Bar
    local Progress = Create("Frame", {
        Parent = ProgressBG,
        BackgroundColor3 = notif.Color,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        ZIndex = 1002
    })
    
    -- Slide In
    Tween(NotifFrame, {
        Position = UDim2.new(1, -330, 0, yPos),
        Size = UDim2.new(0, 320, 0, 80)
    }, 0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
    
    task.wait(0.4)
    
    -- Progress Animation
    Tween(Progress, {Size = UDim2.new(0, 0, 1, 0)}, notif.Duration, Enum.EasingStyle.Linear)
    task.wait(notif.Duration)
    
    -- Slide Out
    Tween(NotifFrame, {
        Position = UDim2.new(1, 10, 0, yPos),
        Size = UDim2.new(0, 0, 0, 80)
    }, 0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In)
    
    task.wait(0.3)
    
    -- Remove from active list
    for i, v in ipairs(ActiveNotifications) do
        if v == NotifFrame then
            table.remove(ActiveNotifications, i)
            break
        end
    end
    
    NotifFrame:Destroy()
    
    -- Reposition remaining notifications
    task.wait(0.1)
    local newYPos = 20
    for _, activeNotif in ipairs(ActiveNotifications) do
        if activeNotif and activeNotif.Parent then
            Tween(activeNotif, {Position = UDim2.new(1, -330, 0, newYPos)}, 0.2)
            newYPos = newYPos + 90
        end
    end
end

--[[
    ════════════════════════════════════════════════════════════════════════════
    🪟 CREATE WINDOW
    ════════════════════════════════════════════════════════════════════════════
]]

function Drakthon:CreateWindow(config)
    config = config or {}
    
    local responsiveSize = GetResponsiveSize()
    
    local WindowConfig = {
        Name = config.Name or "Drakthon UI",
        Icon = config.Icon or "rbxassetid://7733955511",
        IntroEnabled = config.IntroEnabled ~= false,
        Keybind = config.Keybind or Enum.KeyCode.RightControl,
        Size = config.Size or responsiveSize,
        Theme = config.Theme or "Ocean"
    }
    
    Theme:Set(WindowConfig.Theme)
    
    local function getParent()
        if gethui then return gethui()
        elseif syn and syn.protect_gui then
            local gui = Instance.new("ScreenGui")
            syn.protect_gui(gui)
            gui.Parent = game:GetService("CoreGui")
            return game:GetService("CoreGui")
        else return game:GetService("CoreGui") end
    end
    
    local ScreenGui = Create("ScreenGui", {
        Name = "DrakthonUI_" .. HttpService:GenerateGUID(false):sub(1, 8),
        Parent = getParent(),
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false,
        DisplayOrder = 999,
        IgnoreGuiInset = true
    })
    
    self.NotificationHolder = Create("Frame", {
        Name = "NotificationHolder",
        Parent = ScreenGui,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        ZIndex = 1000
    })
    
    local Main = Create("Frame", {
        Name = "Main",
        Parent = ScreenGui,
        BackgroundColor3 = Theme.BG(),
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -WindowConfig.Size[1]/2, 0.5, -WindowConfig.Size[2]/2),
        Size = UDim2.new(0, 0, 0, 0),
        ClipsDescendants = false
    })
    
    Theme:Register(Main, "Color", "BG")
    AddCorner(Main, 12)
    
    -- Shadow
    Create("ImageLabel", {
        Parent = Main,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, -15, 0, -15),
        Size = UDim2.new(1, 30, 1, 30),
        ZIndex = 0,
        Image = "rbxassetid://5554236805",
        ImageColor3 = Color3.fromRGB(0, 0, 0),
        ImageTransparency = 0.7,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(23, 23, 277, 277)
    })
    
    local Header = Create("Frame", {
        Parent = Main,
        BackgroundColor3 = Theme.BG2(),
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 50)
    })
    
    Theme:Register(Header, "Color", "BG2")
    AddCorner(Header, 12)
    
    Create("Frame", {
        Parent = Header,
        BackgroundColor3 = Theme.BG2(),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, -12),
        Size = UDim2.new(1, 0, 0, 12)
    })
    
    local HeaderGradient = Create("Frame", {
        Parent = Header,
        BackgroundColor3 = Theme.Accent(),
        BackgroundTransparency = 0.9,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        ZIndex = 2
    })
    
    Theme:Register(HeaderGradient, "Color", "Accent")
    AddCorner(HeaderGradient, 12)
    
    local gradient = Theme:Gradient()
    gradient.Parent = HeaderGradient
    gradient.Rotation = 45
    
    local Title = Create("TextLabel", {
        Parent = Header,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 15, 0, 0),
        Size = UDim2.new(1, -100, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = WindowConfig.Name,
        TextColor3 = Theme.Text(),
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 3
    })
    
    Theme:Register(Title, "TextColor", "Text")
    
    local MinimizeBtn = Create("TextButton", {
        Parent = Header,
        BackgroundColor3 = Theme.BG3(),
        Position = UDim2.new(1, -70, 0.5, 0),
        Size = UDim2.new(0, 25, 0, 25),
        AnchorPoint = Vector2.new(0, 0.5),
        Font = Enum.Font.GothamBold,
        Text = "_",
        TextColor3 = Theme.Text(),
        TextSize = 16,
        AutoButtonColor = false,
        ZIndex = 3
    })
    
    Theme:Register(MinimizeBtn, "Color", "BG3")
    Theme:Register(MinimizeBtn, "TextColor", "Text")
    AddCorner(MinimizeBtn, 6)
    
    local CloseBtn = Create("TextButton", {
        Parent = Header,
        BackgroundColor3 = Theme.Red(),
        Position = UDim2.new(1, -35, 0.5, 0),
        Size = UDim2.new(0, 25, 0, 25),
        AnchorPoint = Vector2.new(0, 0.5),
        Font = Enum.Font.GothamBold,
        Text = "×",
        TextColor3 = Theme.Text(),
        TextSize = 18,
        AutoButtonColor = false,
        ZIndex = 3
    })
    
    Theme:Register(CloseBtn, "TextColor", "Text")
    AddCorner(CloseBtn, 6)
    
    local Nav = Create("Frame", {
        Parent = Main,
        BackgroundColor3 = Theme.BG2(),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 50),
        Size = UDim2.new(0, 160, 1, -50)
    })
    
    Theme:Register(Nav, "Color", "BG2")
    Create("UIListLayout", {Parent = Nav, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0, 5)})
    AddPadding(Nav, 10)
    
    local Content = Create("Frame", {
        Parent = Main,
        BackgroundColor3 = Theme.BG3(),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 160, 0, 50),
        Size = UDim2.new(1, -160, 1, -50)
    })
    
    Theme:Register(Content, "Color", "BG3")
    MakeDraggable(Main, Header)
    
    -- Minimize System
    local minimized = false
    MinimizeBtn.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            Tween(Main, {Size = UDim2.new(0, WindowConfig.Size[1], 0, 50)}, 0.3, Enum.EasingStyle.Quart)
            MinimizeBtn.Text = "□"
        else
            Tween(Main, {Size = UDim2.new(0, WindowConfig.Size[1], 0, WindowConfig.Size[2])}, 0.3, Enum.EasingStyle.Quart)
            MinimizeBtn.Text = "_"
        end
    end)
    
    MinimizeBtn.MouseEnter:Connect(function()
        Tween(MinimizeBtn, {BackgroundColor3 = Theme.Accent()}, 0.2)
        Tween(MinimizeBtn, {Size = UDim2.new(0, 28, 0, 28)}, 0.2, Enum.EasingStyle.Back)
    end)
    
    MinimizeBtn.MouseLeave:Connect(function()
        Tween(MinimizeBtn, {BackgroundColor3 = Theme.BG3()}, 0.2)
        Tween(MinimizeBtn, {Size = UDim2.new(0, 25, 0, 25)}, 0.2, Enum.EasingStyle.Back)
    end)
    
    CloseBtn.MouseButton1Click:Connect(function()
        Tween(Main, {Size = UDim2.new(0, 0, 0, 0)}, 0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        task.wait(0.3)
        ScreenGui:Destroy()
    end)
    
    CloseBtn.MouseEnter:Connect(function()
        Tween(CloseBtn, {BackgroundColor3 = Color3.fromRGB(255, 80, 80)}, 0.2)
        Tween(CloseBtn, {Size = UDim2.new(0, 28, 0, 28)}, 0.2, Enum.EasingStyle.Back)
    end)
    
    CloseBtn.MouseLeave:Connect(function()
        Tween(CloseBtn, {BackgroundColor3 = Theme.Red()}, 0.2)
        Tween(CloseBtn, {Size = UDim2.new(0, 25, 0, 25)}, 0.2, Enum.EasingStyle.Back)
    end)
    
    -- Intro
    if WindowConfig.IntroEnabled then
        Tween(Main, {Size = UDim2.new(0, WindowConfig.Size[1], 0, WindowConfig.Size[2])}, 0.6, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
        task.wait(0.6)
    else
        Main.Size = UDim2.new(0, WindowConfig.Size[1], 0, WindowConfig.Size[2])
    end
    
    -- Keybind
    UserInputService.InputBegan:Connect(function(input, gpe)
        if not gpe and input.KeyCode == WindowConfig.Keybind then
            Main.Visible = not Main.Visible
        end
    end)
    
    -- Responsive Resize
    Camera:GetPropertyChangedSignal("ViewportSize"):Connect(function()
        if not minimized then
            local newSize = GetResponsiveSize()
            WindowConfig.Size = newSize
            Tween(Main, {
                Size = UDim2.new(0, newSize[1], 0, newSize[2]),
                Position = UDim2.new(0.5, -newSize[1]/2, 0.5, -newSize[2]/2)
            }, 0.3)
        end
    end)
    
    local Window = {
        Tabs = {},
        CurrentTab = nil,
        ScreenGui = ScreenGui,
        MainFrame = Main,
        Theme = Theme,
        Config = WindowConfig
    }
    
    --[[
        ════════════════════════════════════════════════════════════════════════
        📂 CREATE TAB
        ════════════════════════════════════════════════════════════════════════
    ]]
    
    function Window:CreateTab(config)
        config = config or {}
        local TabName = config.Name or "Tab"
        local TabIcon = config.Icon
        
        local TabBtn = Create("TextButton", {
            Parent = Nav,
            BackgroundColor3 = Theme.BG3(),
            Size = UDim2.new(1, 0, 0, 38),
            Font = Enum.Font.GothamSemibold,
            Text = "",
            AutoButtonColor = false,
            ZIndex = 2
        })
        
        Theme:Register(TabBtn, "Color", "BG3")
        AddCorner(TabBtn, 8)
        
        if TabIcon then
            local Icon = Create("ImageLabel", {
                Parent = TabBtn,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0.5, 0),
                Size = UDim2.new(0, 20, 0, 20),
                AnchorPoint = Vector2.new(0, 0.5),
                Image = TabIcon,
                ImageColor3 = Theme.Text2(),
                ZIndex = 3
            })
            Theme:Register(Icon, "ImageColor", "Text2")
        end
        
        local Label = Create("TextLabel", {
            Parent = TabBtn,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, TabIcon and 38 or 15, 0, 0),
            Size = UDim2.new(1, TabIcon and -45 or -20, 1, 0),
            Font = Enum.Font.GothamSemibold,
            Text = TabName,
            TextColor3 = Theme.Text2(),
            TextSize = 13,
            TextXAlignment = Enum.TextXAlignment.Left,
            ZIndex = 3
        })
        
        Theme:Register(Label, "TextColor", "Text2")
        
        local TabContent = Create("ScrollingFrame", {
            Parent = Content,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            Visible = false,
            ScrollBarThickness = 4,
            ScrollBarImageColor3 = Theme.Accent(),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            BorderSizePixel = 0,
            ZIndex = 2
        })
        
        AddPadding(TabContent, 15)
        Create("UIListLayout", {
            Parent = TabContent, 
            SortOrder = Enum.SortOrder.LayoutOrder, 
            Padding = UDim.new(0, 10)
        })
        
        TabBtn.MouseButton1Click:Connect(function()
            for _, tab in pairs(Window.Tabs) do
                if tab.Deselect then tab:Deselect() end
            end
            
            Window.CurrentTab = TabName
            TabContent.Visible = true
            
            Tween(TabBtn, {BackgroundColor3 = Theme.Accent()}, 0.2)
            Tween(Label, {TextColor3 = Theme.Text()}, 0.2)
            
            if TabIcon then
                for _, child in pairs(TabBtn:GetChildren()) do
                    if child:IsA("ImageLabel") then
                        Tween(child, {ImageColor3 = Theme.Text()}, 0.2)
                    end
                end
            end
        end)
        
        TabBtn.MouseEnter:Connect(function()
            if Window.CurrentTab ~= TabName then
                Tween(TabBtn, {BackgroundColor3 = Color3.fromRGB(30, 30, 40)}, 0.2)
            end
        end)
        
        TabBtn.MouseLeave:Connect(function()
            if Window.CurrentTab ~= TabName then
                Tween(TabBtn, {BackgroundColor3 = Theme.BG3()}, 0.2)
            end
        end)
        
        local Tab = {Name = TabName, Button = TabBtn, Content = TabContent}
        
        function Tab:Deselect()
            TabContent.Visible = false
            TabBtn.BackgroundColor3 = Theme.BG3()
            Label.TextColor3 = Theme.Text2()
            
            if TabIcon then
                for _, child in pairs(TabBtn:GetChildren()) do
                    if child:IsA("ImageLabel") then
                        child.ImageColor3 = Theme.Text2()
                    end
                end
            end
        end
        
        -- Button
        function Tab:CreateButton(config)
            config = config or {}
            local Btn = Create("TextButton", {
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 38),
                Font = Enum.Font.GothamSemibold,
                Text = config.Name or "Button",
                TextColor3 = Theme.Text(),
                TextSize = 13,
                AutoButtonColor = false,
                ZIndex = 3
            })
            
            Theme:Register(Btn, "Color", "BG2")
            Theme:Register(Btn, "TextColor", "Text")
            AddCorner(Btn, 8)
            
            Btn.MouseButton1Click:Connect(function()
                task.spawn(config.Callback or function() end)
            end)
            
            Btn.MouseEnter:Connect(function() 
                Tween(Btn, {BackgroundColor3 = Theme.BG3()}, 0.2) 
            end)
            
            Btn.MouseLeave:Connect(function() 
                Tween(Btn, {BackgroundColor3 = Theme.BG2()}, 0.2) 
            end)
            
            return Btn
        end
        
        -- Toggle
        function Tab:CreateToggle(config)
            config = config or {}
            local Frame = Create("Frame", {
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 38),
                ZIndex = 3
            })
            
            Theme:Register(Frame, "Color", "BG2")
            AddCorner(Frame, 8)
            
            local Label = Create("TextLabel", {
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -70, 1, 0),
                Font = Enum.Font.GothamSemibold,
                Text = config.Name or "Toggle",
                TextColor3 = Theme.Text(),
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 4
            })
            
            Theme:Register(Label, "TextColor", "Text")
            
            local toggled = config.Default or false
            
            local ToggleBtn = Create("TextButton", {
                Parent = Frame,
                BackgroundColor3 = toggled and Theme.Accent() or Theme.BG3(),
                Position = UDim2.new(1, -50, 0.5, 0),
                Size = UDim2.new(0, 42, 0, 22),
                AnchorPoint = Vector2.new(0, 0.5),
                Text = "",
                AutoButtonColor = false,
                ZIndex = 4
            })
            
            Theme:Register(ToggleBtn, "Color", toggled and "Accent" or "BG3")
            AddCorner(ToggleBtn, 999)
            
            local Indicator = Create("Frame", {
                Parent = ToggleBtn,
                BackgroundColor3 = Theme.Text(),
                Position = toggled and UDim2.new(1, -20, 0.5, 0) or UDim2.new(0, 2, 0.5, 0),
                Size = UDim2.new(0, 18, 0, 18),
                AnchorPoint = Vector2.new(0, 0.5),
                ZIndex = 5
            })
            
            Theme:Register(Indicator, "Color", "Text")
            AddCorner(Indicator, 999)
            
            ToggleBtn.MouseButton1Click:Connect(function()
                toggled = not toggled
                ToggleBtn.BackgroundColor3 = toggled and Theme.Accent() or Theme.BG3()
                Tween(Indicator, {
                    Position = toggled and UDim2.new(1, -20, 0.5, 0) or UDim2.new(0, 2, 0.5, 0)
                }, 0.2)
                task.spawn(config.Callback or function() end, toggled)
            end)
            
            return {
                Set = function(self, val)
                    toggled = val
                    ToggleBtn.BackgroundColor3 = toggled and Theme.Accent() or Theme.BG3()
                    Indicator.Position = toggled and UDim2.new(1, -20, 0.5, 0) or UDim2.new(0, 2, 0.5, 0)
                end,
                Get = function(self) return toggled end
            }
        end
        
        -- Slider
        function Tab:CreateSlider(config)
            config = config or {}
            local Frame = Create("Frame", {
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 60),
                ZIndex = 3
            })
            
            Theme:Register(Frame, "Color", "BG2")
            AddCorner(Frame, 8)
            
            local Label = Create("TextLabel", {
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 5),
                Size = UDim2.new(1, -80, 0, 20),
                Font = Enum.Font.GothamSemibold,
                Text = config.Name or "Slider",
                TextColor3 = Theme.Text(),
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 4
            })
            
            Theme:Register(Label, "TextColor", "Text")
            
            local Min = config.Min or 0
            local Max = config.Max or 100
            local Increment = config.Increment or 1
            local value = config.Default or Min
            
            local ValueBox = Create("TextLabel", {
                Parent = Frame,
                BackgroundColor3 = Theme.BG3(),
                Position = UDim2.new(1, -65, 0, 5),
                Size = UDim2.new(0, 50, 0, 22),
                Font = Enum.Font.GothamBold,
                Text = tostring(value),
                TextColor3 = Theme.Accent(),
                TextSize = 13,
                ZIndex = 4
            })
            
            Theme:Register(ValueBox, "Color", "BG3")
            Theme:Register(ValueBox, "TextColor", "Accent")
            AddCorner(ValueBox, 6)
            
            local Track = Create("Frame", {
                Parent = Frame,
                BackgroundColor3 = Theme.BG3(),
                Position = UDim2.new(0, 15, 1, -20),
                Size = UDim2.new(1, -30, 0, 5),
                ZIndex = 4
            })
            
            Theme:Register(Track, "Color", "BG3")
            AddCorner(Track, 999)
            
            local Fill = Create("Frame", {
                Parent = Track,
                BackgroundColor3 = Theme.Accent(),
                Size = UDim2.new(0, 0, 1, 0),
                ZIndex = 5
            })
            
            Theme:Register(Fill, "Color", "Accent")
            AddCorner(Fill, 999)
            
            local Dot = Create("Frame", {
                Parent = Track,
                BackgroundColor3 = Theme.Text(),
                Position = UDim2.new(0, 0, 0.5, 0),
                Size = UDim2.new(0, 14, 0, 14),
                AnchorPoint = Vector2.new(0.5, 0.5),
                ZIndex = 6
            })
            
            Theme:Register(Dot, "Color", "Text")
            AddCorner(Dot, 999)
            
            local dragging = false
            
            local function Update(val)
                value = math.clamp(math.floor((val / Increment) + 0.5) * Increment, Min, Max)
                local percent = (value - Min) / (Max - Min)
                ValueBox.Text = tostring(value)
                Fill.Size = UDim2.new(percent, 0, 1, 0)
                Dot.Position = UDim2.new(percent, 0, 0.5, 0)
                task.spawn(config.Callback or function() end, value)
            end
            
            Update(value)
            
            Track.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or
                   input.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                    Tween(Dot, {Size = UDim2.new(0, 18, 0, 18)}, 0.1)
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or
                   input.UserInputType == Enum.UserInputType.Touch then
                    dragging = false
                    Tween(Dot, {Size = UDim2.new(0, 14, 0, 14)}, 0.1)
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or
                                input.UserInputType == Enum.UserInputType.Touch) then
                    local percent = math.clamp(
                        (input.Position.X - Track.AbsolutePosition.X) / Track.AbsoluteSize.X, 
                        0, 1
                    )
                    Update(Min + (percent * (Max - Min)))
                end
            end)
            
            return {
                Set = function(self, val) Update(val) end,
                Get = function(self) return value end
            }
        end
        
        -- Dropdown - ENHANCED
        function Tab:CreateDropdown(config)
            config = config or {}
            local Options = config.Options or {"Option 1"}
            
            local Frame = Create("Frame", {
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 38),
                ClipsDescendants = true,
                ZIndex = 3
            })
            
            Theme:Register(Frame, "Color", "BG2")
            AddCorner(Frame, 8)
            
            local Btn = Create("TextButton", {
                Parent = Frame,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 38),
                Text = "",
                AutoButtonColor = false,
                ZIndex = 4
            })
            
            local Label = Create("TextLabel", {
                Parent = Btn,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -80, 1, 0),
                Font = Enum.Font.GothamSemibold,
                Text = config.Name or "Dropdown",
                TextColor3 = Theme.Text(),
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 5
            })
            
            Theme:Register(Label, "TextColor", "Text")
            
            local Selected = Create("TextLabel", {
                Parent = Btn,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -65, 0, 0),
                Size = UDim2.new(0, 50, 1, 0),
                Font = Enum.Font.Gotham,
                Text = config.Default or "...",
                TextColor3 = Theme.Accent(),
                TextSize = 12,
                TextXAlignment = Enum.TextXAlignment.Right,
                ZIndex = 5
            })
            
            Theme:Register(Selected, "TextColor", "Accent")
            
            local Arrow = Create("TextLabel", {
                Parent = Btn,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -18, 0, 0),
                Size = UDim2.new(0, 18, 1, 0),
                Font = Enum.Font.GothamBold,
                Text = "▼",
                TextColor3 = Theme.Text2(),
                TextSize = 10,
                ZIndex = 5
            })
            
            Theme:Register(Arrow, "TextColor", "Text2")
            
            local OptionsContainer = Create("ScrollingFrame", {
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 38),
                Size = UDim2.new(1, 0, 0, 0),
                ScrollBarThickness = 4,
                CanvasSize = UDim2.new(0, 0, 0, 0),
                AutomaticCanvasSize = Enum.AutomaticSize.Y,
                BorderSizePixel = 0,
                Visible = false,
                ZIndex = 4
            })
            
            Create("UIListLayout", {
                Parent = OptionsContainer, 
                SortOrder = Enum.SortOrder.LayoutOrder, 
                Padding = UDim.new(0, 2)
            })
            
            local opened = false
            local selected = config.Default
            
            for i, opt in ipairs(Options) do
                local OptBtn = Create("TextButton", {
                    Parent = OptionsContainer,
                    BackgroundColor3 = Theme.BG3(),
                    Size = UDim2.new(1, 0, 0, 28),
                    Font = Enum.Font.Gotham,
                    Text = opt,
                    TextColor3 = Theme.Text(),
                    TextSize = 12,
                    AutoButtonColor = false,
                    ZIndex = 5
                })
                
                Theme:Register(OptBtn, "Color", "BG3")
                Theme:Register(OptBtn, "TextColor", "Text")
                AddCorner(OptBtn, 6)
                
                OptBtn.MouseButton1Click:Connect(function()
                    selected = opt
                    Selected.Text = opt
                    opened = false
                    OptionsContainer.Visible = false
                    Arrow.Rotation = 0
                    
                    Tween(Frame, {Size = UDim2.new(1, 0, 0, 38)}, 0.3)
                    task.spawn(config.Callback or function() end, opt)
                end)
                
                OptBtn.MouseEnter:Connect(function() 
                    Tween(OptBtn, {BackgroundColor3 = Theme.Accent()}, 0.2) 
                end)
                
                OptBtn.MouseLeave:Connect(function() 
                    Tween(OptBtn, {BackgroundColor3 = Theme.BG3()}, 0.2) 
                end)
            end
            
            Btn.MouseButton1Click:Connect(function()
                opened = not opened
                OptionsContainer.Visible = opened
                
                if opened then
                    Arrow.Rotation = 180
                    local maxHeight = math.min(#Options * 30, 150)
                    Tween(Frame, {Size = UDim2.new(1, 0, 0, 38 + maxHeight + 5)}, 0.3)
                else
                    Arrow.Rotation = 0
                    Tween(Frame, {Size = UDim2.new(1, 0, 0, 38)}, 0.3)
                end
            end)
            
            return {
                Set = function(self, opt)
                    if table.find(Options, opt) then
                        selected = opt
                        Selected.Text = opt
                    end
                end,
                Get = function(self) return selected end
            }
        end
        
        -- Input
        function Tab:CreateInput(config)
            config = config or {}
            local Frame = Create("Frame", {
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 65),
                ZIndex = 3
            })
            
            Theme:Register(Frame, "Color", "BG2")
            AddCorner(Frame, 8)
            
            local Label = Create("TextLabel", {
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 5),
                Size = UDim2.new(1, -30, 0, 20),
                Font = Enum.Font.GothamSemibold,
                Text = config.Name or "Input",
                TextColor3 = Theme.Text(),
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 4
            })
            
            Theme:Register(Label, "TextColor", "Text")
            
            local Input = Create("TextBox", {
                Parent = Frame,
                BackgroundColor3 = Theme.BG3(),
                Position = UDim2.new(0, 15, 0, 30),
                Size = UDim2.new(1, -30, 0, 28),
                Font = Enum.Font.Gotham,
                PlaceholderText = config.Placeholder or "Type here...",
                PlaceholderColor3 = Theme.Text2(),
                Text = config.Default or "",
                TextColor3 = Theme.Text(),
                TextSize = 12,
                ClearTextOnFocus = false,
                ZIndex = 4
            })
            
            Theme:Register(Input, "Color", "BG3")
            Theme:Register(Input, "TextColor", "Text")
            AddCorner(Input, 6)
            AddPadding(Input, 8)
            
            Input.Focused:Connect(function()
                Tween(Input, {BackgroundColor3 = Color3.fromRGB(35, 35, 45)}, 0.2)
            end)
            
            Input.FocusLost:Connect(function()
                Tween(Input, {BackgroundColor3 = Theme.BG3()}, 0.2)
                task.spawn(config.Callback or function() end, Input.Text)
            end)
            
            return {
                Set = function(self, txt) Input.Text = txt end,
                Get = function(self) return Input.Text end
            }
        end
        
        -- Label
        function Tab:CreateLabel(text)
            local Label = Create("TextLabel", {
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 32),
                Font = Enum.Font.Gotham,
                Text = text or "Label",
                TextColor3 = Theme.Text2(),
                TextSize = 13,
                TextWrapped = true,
                ZIndex = 3
            })
            
            Theme:Register(Label, "Color", "BG2")
            Theme:Register(Label, "TextColor", "Text2")
            AddCorner(Label, 8)
            AddPadding(Label, 8)
            
            return {
                Set = function(self, txt) Label.Text = txt end,
                Get = function(self) return Label.Text end
            }
        end
        
        -- Section
        function Tab:CreateSection(name)
            local Section = Create("Frame", {
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 35),
                ZIndex = 3
            })
            
            Theme:Register(Section, "Color", "BG2")
            AddCorner(Section, 8)
            
            local SectionLabel = Create("TextLabel", {
                Parent = Section,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -30, 1, 0),
                Font = Enum.Font.GothamBold,
                Text = name or "Section",
                TextColor3 = Theme.Accent(),
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 4
            })
            
            Theme:Register(SectionLabel, "TextColor", "Accent")
            
            return Section
        end
        
        -- Paragraph
        function Tab:CreateParagraph(title, content)
            local Frame = Create("Frame", {
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y,
                ZIndex = 3
            })
            
            Theme:Register(Frame, "Color", "BG2")
            AddCorner(Frame, 8)
            AddPadding(Frame, 10)
            
            Create("UIListLayout", {
                Parent = Frame, 
                SortOrder = Enum.SortOrder.LayoutOrder, 
                Padding = UDim.new(0, 5)
            })
            
            local Title = Create("TextLabel", {
                Parent = Frame,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 20),
                Font = Enum.Font.GothamBold,
                Text = title or "Title",
                TextColor3 = Theme.Accent(),
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Top,
                ZIndex = 4
            })
            
            Theme:Register(Title, "TextColor", "Accent")
            
            local Content = Create("TextLabel", {
                Parent = Frame,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y,
                Font = Enum.Font.Gotham,
                Text = content or "Content",
                TextColor3 = Theme.Text2(),
                TextSize = 12,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Top,
                TextWrapped = true,
                ZIndex = 4
            })
            
            Theme:Register(Content, "TextColor", "Text2")
            
            return {
                Set = function(self, t, c)
                    if t then Title.Text = t end
                    if c then Content.Text = c end
                end
            }
        end
        
        table.insert(Window.Tabs, Tab)
        
        if #Window.Tabs == 1 then
            task.delay(0.1, function() TabBtn.MouseButton1Click:Fire() end)
        end
        
        return Tab
    end
    
    if WindowConfig.IntroEnabled then
        task.delay(1, function()
            self:Notify({
                Title = "Welcome!",
                Content = WindowConfig.Name .. " loaded successfully!",
                Type = "Success",
                Duration = 3
            })
        end)
    end
    
    return Window
end

print("✅ Drakthon UI Library V" .. Drakthon.Version .. " Loaded!")

return Drakthon
