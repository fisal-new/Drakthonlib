--[[
    ╔══════════════════════════════════════════════════════════════╗
    ║            DRAKTHON HUB - PROFESSIONAL UI LIBRARY           ║
    ║                    Version 3.0 Final                         ║
    ║                  No Errors - Perfect Code                    ║
    ╚══════════════════════════════════════════════════════════════╝
]]

local Library = {}
Library.Version = "3.0"

-- ═══════════════════════════════════════════════════════════════
-- Services
-- ═══════════════════════════════════════════════════════════════
local Services = {
    TweenService = game:GetService("TweenService"),
    UserInputService = game:GetService("UserInputService"),
    RunService = game:GetService("RunService"),
    Players = game:GetService("Players"),
    CoreGui = game:GetService("CoreGui"),
}

local Player = Services.Players.LocalPlayer

-- ═══════════════════════════════════════════════════════════════
-- Theme Colors
-- ═══════════════════════════════════════════════════════════════
local Theme = {
    -- Backgrounds
    Background = Color3.fromRGB(15, 15, 17),
    Surface = Color3.fromRGB(22, 22, 26),
    SurfaceLight = Color3.fromRGB(28, 28, 33),
    Hover = Color3.fromRGB(35, 35, 42),
    
    -- Primary
    Primary = Color3.fromRGB(139, 92, 246),
    PrimaryDark = Color3.fromRGB(124, 58, 237),
    PrimaryLight = Color3.fromRGB(167, 139, 250),
    
    -- Text
    Text = Color3.fromRGB(255, 255, 255),
    TextSecondary = Color3.fromRGB(156, 163, 175),
    TextDark = Color3.fromRGB(107, 114, 128),
    
    -- Status
    Success = Color3.fromRGB(34, 197, 94),
    Error = Color3.fromRGB(239, 68, 68),
    Warning = Color3.fromRGB(245, 158, 11),
    Info = Color3.fromRGB(59, 130, 246),
    
    -- Other
    Border = Color3.fromRGB(39, 39, 42),
    Shadow = Color3.fromRGB(0, 0, 0),
}

-- ═══════════════════════════════════════════════════════════════
-- Utility Functions
-- ═══════════════════════════════════════════════════════════════
local Utility = {}

function Utility:Tween(instance, properties, duration, style, direction)
    local tween = Services.TweenService:Create(
        instance,
        TweenInfo.new(
            duration or 0.25,
            style or Enum.EasingStyle.Quad,
            direction or Enum.EasingDirection.Out
        ),
        properties
    )
    tween:Play()
    return tween
end

function Utility:Round(instance, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 8)
    corner.Parent = instance
    return corner
end

function Utility:Stroke(instance, color, thickness)
    local stroke = Instance.new("UIStroke")
    stroke.Color = color or Theme.Border
    stroke.Thickness = thickness or 1
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Parent = instance
    return stroke
end

function Utility:Padding(instance, all)
    local padding = Instance.new("UIPadding")
    padding.PaddingLeft = UDim.new(0, all or 0)
    padding.PaddingRight = UDim.new(0, all or 0)
    padding.PaddingTop = UDim.new(0, all or 0)
    padding.PaddingBottom = UDim.new(0, all or 0)
    padding.Parent = instance
    return padding
end

function Utility:Ripple(button)
    button.ClipsDescendants = true
    
    button.MouseButton1Down:Connect(function()
        local ripple = Instance.new("Frame")
        ripple.AnchorPoint = Vector2.new(0.5, 0.5)
        ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
        ripple.Size = UDim2.new(0, 0, 0, 0)
        ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        ripple.BackgroundTransparency = 0.7
        ripple.BorderSizePixel = 0
        ripple.ZIndex = 999
        ripple.Parent = button
        
        self:Round(ripple, 999)
        
        local size = math.max(button.AbsoluteSize.X, button.AbsoluteSize.Y) * 2
        
        self:Tween(ripple, {
            Size = UDim2.new(0, size, 0, size),
            BackgroundTransparency = 1
        }, 0.6)
        
        task.delay(0.6, function()
            ripple:Destroy()
        end)
    end)
end

function Utility:MakeDraggable(frame, handle)
    local dragging = false
    local dragInput, mousePos, framePos
    
    handle = handle or frame
    
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    handle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    Services.UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - mousePos
            frame.Position = UDim2.new(
                framePos.X.Scale,
                framePos.X.Offset + delta.X,
                framePos.Y.Scale,
                framePos.Y.Offset + delta.Y
            )
        end
    end)
end

-- ═══════════════════════════════════════════════════════════════
-- Create Window
-- ═══════════════════════════════════════════════════════════════
function Library:CreateWindow(config)
    config = config or {}
    local WindowTitle = config.Title or "Drakthon Hub"
    local WindowSize = config.Size or UDim2.new(0, 580, 0, 420)
    
    -- ScreenGui
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "DrakthonHub_" .. math.random(1000, 9999)
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ScreenGui.DisplayOrder = 100
    
    -- Parent to CoreGui with protection
    if gethui then
        ScreenGui.Parent = gethui()
    elseif syn and syn.protect_gui then
        syn.protect_gui(ScreenGui)
        ScreenGui.Parent = Services.CoreGui
    else
        ScreenGui.Parent = Services.CoreGui
    end
    
    -- Main Container
    local Main = Instance.new("Frame")
    Main.Name = "MainContainer"
    Main.AnchorPoint = Vector2.new(0.5, 0.5)
    Main.Position = UDim2.new(0.5, 0, 0.5, 0)
    Main.Size = WindowSize
    Main.BackgroundColor3 = Theme.Background
    Main.BorderSizePixel = 0
    Main.ClipsDescendants = false
    Main.Parent = ScreenGui
    
    Utility:Round(Main, 12)
    Utility:Stroke(Main, Theme.Border, 1)
    
    -- Shadow
    local Shadow = Instance.new("ImageLabel")
    Shadow.Name = "Shadow"
    Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    Shadow.Position = UDim2.new(0.5, 0, 0.5, 8)
    Shadow.Size = UDim2.new(1, 40, 1, 40)
    Shadow.BackgroundTransparency = 1
    Shadow.Image = "rbxassetid://6014261993"
    Shadow.ImageColor3 = Theme.Shadow
    Shadow.ImageTransparency = 0.5
    Shadow.ScaleType = Enum.ScaleType.Slice
    Shadow.SliceCenter = Rect.new(99, 99, 99, 99)
    Shadow.ZIndex = -1
    Shadow.Parent = Main
    
    -- Responsive
    local function UpdateSize()
        local ViewportSize = workspace.CurrentCamera.ViewportSize
        if ViewportSize.X < 600 then
            Main.Size = UDim2.new(0.95, 0, 0.9, 0)
        else
            Main.Size = WindowSize
        end
    end
    UpdateSize()
    workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(UpdateSize)
    
    -- Top Bar
    local TopBar = Instance.new("Frame")
    TopBar.Name = "TopBar"
    TopBar.Size = UDim2.new(1, 0, 0, 48)
    TopBar.BackgroundColor3 = Theme.Surface
    TopBar.BorderSizePixel = 0
    TopBar.Parent = Main
    
    Utility:Round(TopBar, 12)
    
    local TopBarCover = Instance.new("Frame")
    TopBarCover.Size = UDim2.new(1, 0, 0, 12)
    TopBarCover.Position = UDim2.new(0, 0, 1, -12)
    TopBarCover.BackgroundColor3 = Theme.Surface
    TopBarCover.BorderSizePixel = 0
    TopBarCover.Parent = TopBar
    
    -- Loading Bar (Top of window)
    local LoadingBar = Instance.new("Frame")
    LoadingBar.Name = "LoadingBar"
    LoadingBar.Size = UDim2.new(1, 0, 0, 3)
    LoadingBar.Position = UDim2.new(0, 0, 0, 0)
    LoadingBar.BackgroundColor3 = Theme.Surface
    LoadingBar.BorderSizePixel = 0
    LoadingBar.Parent = TopBar
    
    local LoadingFill = Instance.new("Frame")
    LoadingFill.Name = "Fill"
    LoadingFill.Size = UDim2.new(0, 0, 1, 0)
    LoadingFill.BackgroundColor3 = Theme.Primary
    LoadingFill.BorderSizePixel = 0
    LoadingFill.Parent = LoadingBar
    
    -- Loading Animation
    task.spawn(function()
        for i = 0, 100, 5 do
            Utility:Tween(LoadingFill, {Size = UDim2.new(i / 100, 0, 1, 0)}, 0.1)
            task.wait(0.05)
        end
        task.wait(0.3)
        Utility:Tween(LoadingBar, {BackgroundTransparency = 1}, 0.3)
        Utility:Tween(LoadingFill, {BackgroundTransparency = 1}, 0.3)
        task.wait(0.3)
        LoadingBar:Destroy()
    end)
    
    -- Title
    local Title = Instance.new("TextLabel")
    Title.Position = UDim2.new(0, 16, 0, 0)
    Title.Size = UDim2.new(1, -90, 1, -3)
    Title.BackgroundTransparency = 1
    Title.Text = WindowTitle
    Title.Font = Enum.Font.GothamBold
    Title.TextSize = 16
    Title.TextColor3 = Theme.Text
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = TopBar
    
    -- Close Button
    local CloseButton = Instance.new("TextButton")
    CloseButton.AnchorPoint = Vector2.new(1, 0.5)
    CloseButton.Position = UDim2.new(1, -12, 0.5, 1)
    CloseButton.Size = UDim2.new(0, 32, 0, 32)
    CloseButton.BackgroundColor3 = Theme.SurfaceLight
    CloseButton.BorderSizePixel = 0
    CloseButton.Text = ""
    CloseButton.AutoButtonColor = false
    CloseButton.Parent = TopBar
    
    Utility:Round(CloseButton, 8)
    Utility:Ripple(CloseButton)
    
    local CloseIcon = Instance.new("TextLabel")
    CloseIcon.Size = UDim2.new(1, 0, 1, 0)
    CloseIcon.BackgroundTransparency = 1
    CloseIcon.Text = "×"
    CloseIcon.Font = Enum.Font.GothamBold
    CloseIcon.TextSize = 20
    CloseIcon.TextColor3 = Theme.Text
    CloseIcon.Parent = CloseButton
    
    CloseButton.MouseEnter:Connect(function()
        Utility:Tween(CloseButton, {BackgroundColor3 = Theme.Error}, 0.2)
    end)
    
    CloseButton.MouseLeave:Connect(function()
        Utility:Tween(CloseButton, {BackgroundColor3 = Theme.SurfaceLight}, 0.2)
    end)
    
    CloseButton.MouseButton1Click:Connect(function()
        Utility:Tween(Main, {Size = UDim2.new(0, 0, 0, 0)}, 0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        Utility:Tween(Shadow, {ImageTransparency = 1}, 0.3)
        task.wait(0.3)
        ScreenGui:Destroy()
    end)
    
    -- Minimize Button
    local MinimizeButton = Instance.new("TextButton")
    MinimizeButton.AnchorPoint = Vector2.new(1, 0.5)
    MinimizeButton.Position = UDim2.new(1, -50, 0.5, 1)
    MinimizeButton.Size = UDim2.new(0, 32, 0, 32)
    MinimizeButton.BackgroundColor3 = Theme.SurfaceLight
    MinimizeButton.BorderSizePixel = 0
    MinimizeButton.Text = ""
    MinimizeButton.AutoButtonColor = false
    MinimizeButton.Parent = TopBar
    
    Utility:Round(MinimizeButton, 8)
    Utility:Ripple(MinimizeButton)
    
    local MinIcon = Instance.new("TextLabel")
    MinIcon.Size = UDim2.new(1, 0, 1, 0)
    MinIcon.BackgroundTransparency = 1
    MinIcon.Text = "−"
    MinIcon.Font = Enum.Font.GothamBold
    MinIcon.TextSize = 18
    MinIcon.TextColor3 = Theme.Text
    MinIcon.Parent = MinimizeButton
    
    local minimized = false
    local originalSize = Main.Size
    
    MinimizeButton.MouseEnter:Connect(function()
        Utility:Tween(MinimizeButton, {BackgroundColor3 = Theme.Primary}, 0.2)
    end)
    
    MinimizeButton.MouseLeave:Connect(function()
        Utility:Tween(MinimizeButton, {BackgroundColor3 = Theme.SurfaceLight}, 0.2)
    end)
    
    MinimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            Utility:Tween(Main, {Size = UDim2.new(Main.Size.X.Scale, Main.Size.X.Offset, 0, 48)}, 0.3)
        else
            Utility:Tween(Main, {Size = originalSize}, 0.3)
        end
    end)
    
    -- Make Draggable
    Utility:MakeDraggable(Main, TopBar)
    
    -- Tab Container
    local TabBar = Instance.new("Frame")
    TabBar.Name = "TabBar"
    TabBar.Position = UDim2.new(0, 12, 0, 58)
    TabBar.Size = UDim2.new(1, -24, 0, 38)
    TabBar.BackgroundColor3 = Theme.Surface
    TabBar.BorderSizePixel = 0
    TabBar.Parent = Main
    
    Utility:Round(TabBar, 10)
    
    local TabList = Instance.new("Frame")
    TabList.Size = UDim2.new(1, -12, 1, -12)
    TabList.Position = UDim2.new(0, 6, 0, 6)
    TabList.BackgroundTransparency = 1
    TabList.Parent = TabBar
    
    local TabLayout = Instance.new("UIListLayout")
    TabLayout.FillDirection = Enum.FillDirection.Horizontal
    TabLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    TabLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    TabLayout.Padding = UDim.new(0, 6)
    TabLayout.Parent = TabList
    
    -- Content Container
    local ContentContainer = Instance.new("Frame")
    ContentContainer.Name = "Content"
    ContentContainer.Position = UDim2.new(0, 12, 0, 106)
    ContentContainer.Size = UDim2.new(1, -24, 1, -118)
    ContentContainer.BackgroundColor3 = Theme.Surface
    ContentContainer.BorderSizePixel = 0
    ContentContainer.Parent = Main
    
    Utility:Round(ContentContainer, 10)
    
    local Pages = Instance.new("Frame")
    Pages.Size = UDim2.new(1, 0, 1, 0)
    Pages.BackgroundTransparency = 1
    Pages.Parent = ContentContainer
    
    -- Window Object
    local Window = {
        GUI = ScreenGui,
        Main = Main,
        Tabs = {},
        CurrentTab = nil,
    }
    
    -- Create Tab Function
    function Window:CreateTab(tabName)
        tabName = tabName or "Tab"
        
        -- Tab Button
        local TabButton = Instance.new("TextButton")
        TabButton.Name = tabName
        TabButton.Size = UDim2.new(0, 85, 1, 0)
        TabButton.BackgroundColor3 = Theme.SurfaceLight
        TabButton.BorderSizePixel = 0
        TabButton.Text = ""
        TabButton.AutoButtonColor = false
        TabButton.Parent = TabList
        
        Utility:Round(TabButton, 7)
        Utility:Ripple(TabButton)
        
        local TabLabel = Instance.new("TextLabel")
        TabLabel.Size = UDim2.new(1, 0, 1, 0)
        TabLabel.BackgroundTransparency = 1
        TabLabel.Text = tabName
        TabLabel.Font = Enum.Font.GothamSemibold
        TabLabel.TextSize = 13
        TabLabel.TextColor3 = Theme.TextSecondary
        TabLabel.Parent = TabButton
        
        -- Tab Page
        local Page = Instance.new("ScrollingFrame")
        Page.Name = tabName .. "Page"
        Page.Size = UDim2.new(1, -24, 1, -24)
        Page.Position = UDim2.new(0, 12, 0, 12)
        Page.BackgroundTransparency = 1
        Page.BorderSizePixel = 0
        Page.ScrollBarThickness = 5
        Page.ScrollBarImageColor3 = Theme.Primary
        Page.CanvasSize = UDim2.new(0, 0, 0, 0)
        Page.Visible = false
        Page.Parent = Pages
        
        local PageLayout = Instance.new("UIListLayout")
        PageLayout.SortOrder = Enum.SortOrder.LayoutOrder
        PageLayout.Padding = UDim.new(0, 10)
        PageLayout.Parent = Page
        
        PageLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            Page.CanvasSize = UDim2.new(0, 0, 0, PageLayout.AbsoluteContentSize.Y + 12)
        end)
        
        -- Tab Click Handler
        TabButton.MouseButton1Click:Connect(function()
            for _, tab in pairs(Window.Tabs) do
                tab.Page.Visible = false
                tab.Button.BackgroundColor3 = Theme.SurfaceLight
                tab.Label.TextColor3 = Theme.TextSecondary
            end
            
            Page.Visible = true
            TabButton.BackgroundColor3 = Theme.Primary
            TabLabel.TextColor3 = Theme.Text
            Window.CurrentTab = tabName
        end)
        
        TabButton.MouseEnter:Connect(function()
            if Window.CurrentTab ~= tabName then
                Utility:Tween(TabButton, {BackgroundColor3 = Theme.Hover}, 0.2)
            end
        end)
        
        TabButton.MouseLeave:Connect(function()
            if Window.CurrentTab ~= tabName then
                Utility:Tween(TabButton, {BackgroundColor3 = Theme.SurfaceLight}, 0.2)
            end
        end)
        
        local Tab = {
            Button = TabButton,
            Label = TabLabel,
            Page = Page,
            Layout = PageLayout,
        }
        
        Window.Tabs[tabName] = Tab
        
        -- Auto select first tab
        if not Window.CurrentTab then
            TabButton.MouseButton1Click()
        end
        
        -- Tab Elements API
        local Elements = {}
        
        -- Section
        function Elements:Section(text)
            local SectionFrame = Instance.new("Frame")
            SectionFrame.Name = "Section"
            SectionFrame.Size = UDim2.new(1, 0, 0, 32)
            SectionFrame.BackgroundTransparency = 1
            SectionFrame.Parent = Page
            
            local LeftLine = Instance.new("Frame")
            LeftLine.Size = UDim2.new(0.38, 0, 0, 1)
            LeftLine.Position = UDim2.new(0, 0, 0.5, 0)
            LeftLine.BackgroundColor3 = Theme.Primary
            LeftLine.BorderSizePixel = 0
            LeftLine.Parent = SectionFrame
            
            local SectionLabel = Instance.new("TextLabel")
            SectionLabel.AnchorPoint = Vector2.new(0.5, 0.5)
            SectionLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
            SectionLabel.Size = UDim2.new(0.2, 0, 1, 0)
            SectionLabel.BackgroundTransparency = 1
            SectionLabel.Text = text or "Section"
            SectionLabel.Font = Enum.Font.GothamBold
            SectionLabel.TextSize = 14
            SectionLabel.TextColor3 = Theme.Primary
            SectionLabel.Parent = SectionFrame
            
            local RightLine = Instance.new("Frame")
            RightLine.AnchorPoint = Vector2.new(1, 0)
            RightLine.Size = UDim2.new(0.38, 0, 0, 1)
            RightLine.Position = UDim2.new(1, 0, 0.5, 0)
            RightLine.BackgroundColor3 = Theme.Primary
            RightLine.BorderSizePixel = 0
            RightLine.Parent = SectionFrame
            
            return SectionFrame
        end
        
        -- Label
        function Elements:Label(text)
            local LabelFrame = Instance.new("Frame")
            LabelFrame.Name = "Label"
            LabelFrame.Size = UDim2.new(1, 0, 0, 32)
            LabelFrame.BackgroundColor3 = Theme.SurfaceLight
            LabelFrame.BorderSizePixel = 0
            LabelFrame.Parent = Page
            
            Utility:Round(LabelFrame, 8)
            
            local LabelText = Instance.new("TextLabel")
            LabelText.Size = UDim2.new(1, -20, 1, 0)
            LabelText.Position = UDim2.new(0, 10, 0, 0)
            LabelText.BackgroundTransparency = 1
            LabelText.Text = text or "Label"
            LabelText.Font = Enum.Font.Gotham
            LabelText.TextSize = 13
            LabelText.TextColor3 = Theme.Text
            LabelText.TextXAlignment = Enum.TextXAlignment.Left
            LabelText.Parent = LabelFrame
            
            return {
                SetText = function(_, newText)
                    LabelText.Text = newText
                end
            }
        end
        
        -- Button
        function Elements:Button(text, callback)
            callback = callback or function() end
            
            local ButtonFrame = Instance.new("TextButton")
            ButtonFrame.Name = "Button"
            ButtonFrame.Size = UDim2.new(1, 0, 0, 38)
            ButtonFrame.BackgroundColor3 = Theme.SurfaceLight
            ButtonFrame.BorderSizePixel = 0
            ButtonFrame.Text = ""
            ButtonFrame.AutoButtonColor = false
            ButtonFrame.Parent = Page
            
            Utility:Round(ButtonFrame, 8)
            Utility:Ripple(ButtonFrame)
            
            local ButtonText = Instance.new("TextLabel")
            ButtonText.Size = UDim2.new(1, -20, 1, 0)
            ButtonText.Position = UDim2.new(0, 10, 0, 0)
            ButtonText.BackgroundTransparency = 1
            ButtonText.Text = text or "Button"
            ButtonText.Font = Enum.Font.GothamSemibold
            ButtonText.TextSize = 14
            ButtonText.TextColor3 = Theme.Text
            ButtonText.Parent = ButtonFrame
            
            ButtonFrame.MouseEnter:Connect(function()
                Utility:Tween(ButtonFrame, {BackgroundColor3 = Theme.Primary}, 0.2)
            end)
            
            ButtonFrame.MouseLeave:Connect(function()
                Utility:Tween(ButtonFrame, {BackgroundColor3 = Theme.SurfaceLight}, 0.2)
            end)
            
            ButtonFrame.MouseButton1Click:Connect(function()
                Utility:Tween(ButtonFrame, {Size = UDim2.new(1, 0, 0, 36)}, 0.1)
                task.wait(0.1)
                Utility:Tween(ButtonFrame, {Size = UDim2.new(1, 0, 0, 38)}, 0.1)
                pcall(callback)
            end)
            
            return ButtonFrame
        end
        
        -- Toggle
        function Elements:Toggle(text, default, callback)
            callback = callback or function() end
            local toggled = default or false
            
            local ToggleFrame = Instance.new("Frame")
            ToggleFrame.Name = "Toggle"
            ToggleFrame.Size = UDim2.new(1, 0, 0, 42)
            ToggleFrame.BackgroundColor3 = Theme.SurfaceLight
            ToggleFrame.BorderSizePixel = 0
            ToggleFrame.Parent = Page
            
            Utility:Round(ToggleFrame, 8)
            
            local ToggleLabel = Instance.new("TextLabel")
            ToggleLabel.Size = UDim2.new(1, -70, 1, 0)
            ToggleLabel.Position = UDim2.new(0, 12, 0, 0)
            ToggleLabel.BackgroundTransparency = 1
            ToggleLabel.Text = text or "Toggle"
            ToggleLabel.Font = Enum.Font.Gotham
            ToggleLabel.TextSize = 13
            ToggleLabel.TextColor3 = Theme.Text
            ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
            ToggleLabel.Parent = ToggleFrame
            
            local ToggleButton = Instance.new("TextButton")
            ToggleButton.AnchorPoint = Vector2.new(1, 0.5)
            ToggleButton.Position = UDim2.new(1, -12, 0.5, 0)
            ToggleButton.Size = UDim2.new(0, 44, 0, 24)
            ToggleButton.BackgroundColor3 = Theme.Hover
            ToggleButton.BorderSizePixel = 0
            ToggleButton.Text = ""
            ToggleButton.AutoButtonColor = false
            ToggleButton.Parent = ToggleFrame
            
            Utility:Round(ToggleButton, 12)
            
            local ToggleIndicator = Instance.new("Frame")
            ToggleIndicator.Name = "Indicator"
            ToggleIndicator.Position = UDim2.new(0, 3, 0.5, -9)
            ToggleIndicator.Size = UDim2.new(0, 18, 0, 18)
            ToggleIndicator.BackgroundColor3 = Theme.TextSecondary
            ToggleIndicator.BorderSizePixel = 0
            ToggleIndicator.Parent = ToggleButton
            
            Utility:Round(ToggleIndicator, 9)
            
            local function UpdateToggle()
                if toggled then
                    Utility:Tween(ToggleButton, {BackgroundColor3 = Theme.Primary}, 0.25)
                    Utility:Tween(ToggleIndicator, {
                        Position = UDim2.new(1, -21, 0.5, -9),
                        BackgroundColor3 = Theme.Text
                    }, 0.25)
                else
                    Utility:Tween(ToggleButton, {BackgroundColor3 = Theme.Hover}, 0.25)
                    Utility:Tween(ToggleIndicator, {
                        Position = UDim2.new(0, 3, 0.5, -9),
                        BackgroundColor3 = Theme.TextSecondary
                    }, 0.25)
                end
                pcall(callback, toggled)
            end
            
            ToggleButton.MouseButton1Click:Connect(function()
                toggled = not toggled
                UpdateToggle()
            end)
            
            if default then
                UpdateToggle()
            end
            
            return {
                Set = function(_, value)
                    toggled = value
                    UpdateToggle()
                end,
                Get = function()
                    return toggled
                end
            }
        end
        
        -- Slider
        function Elements:Slider(text, min, max, default, callback)
            callback = callback or function() end
            min = min or 0
            max = max or 100
            default = default or min
            
            local currentValue = default
            
            local SliderFrame = Instance.new("Frame")
            SliderFrame.Name = "Slider"
            SliderFrame.Size = UDim2.new(1, 0, 0, 54)
            SliderFrame.BackgroundColor3 = Theme.SurfaceLight
            SliderFrame.BorderSizePixel = 0
            SliderFrame.Parent = Page
            
            Utility:Round(SliderFrame, 8)
            
            local SliderLabel = Instance.new("TextLabel")
            SliderLabel.Size = UDim2.new(1, -80, 0, 22)
            SliderLabel.Position = UDim2.new(0, 12, 0, 8)
            SliderLabel.BackgroundTransparency = 1
            SliderLabel.Text = text or "Slider"
            SliderLabel.Font = Enum.Font.Gotham
            SliderLabel.TextSize = 13
            SliderLabel.TextColor3 = Theme.Text
            SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
            SliderLabel.Parent = SliderFrame
            
            local ValueLabel = Instance.new("TextLabel")
            ValueLabel.AnchorPoint = Vector2.new(1, 0)
            ValueLabel.Size = UDim2.new(0, 60, 0, 22)
            ValueLabel.Position = UDim2.new(1, -12, 0, 8)
            ValueLabel.BackgroundTransparency = 1
            ValueLabel.Text = tostring(default)
            ValueLabel.Font = Enum.Font.GothamBold
            ValueLabel.TextSize = 13
            ValueLabel.TextColor3 = Theme.Primary
            ValueLabel.TextXAlignment = Enum.TextXAlignment.Right
            ValueLabel.Parent = SliderFrame
            
            local SliderTrack = Instance.new("Frame")
            SliderTrack.Position = UDim2.new(0, 12, 0, 36)
            SliderTrack.Size = UDim2.new(1, -24, 0, 8)
            SliderTrack.BackgroundColor3 = Theme.Hover
            SliderTrack.BorderSizePixel = 0
            SliderTrack.Parent = SliderFrame
            
            Utility:Round(SliderTrack, 4)
            
            local SliderFill = Instance.new("Frame")
            SliderFill.Name = "Fill"
            SliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
            SliderFill.BackgroundColor3 = Theme.Primary
            SliderFill.BorderSizePixel = 0
            SliderFill.Parent = SliderTrack
            
            Utility:Round(SliderFill, 4)
            
            local SliderDot = Instance.new("Frame")
            SliderDot.AnchorPoint = Vector2.new(0.5, 0.5)
            SliderDot.Position = UDim2.new(1, 0, 0.5, 0)
            SliderDot.Size = UDim2.new(0, 16, 0, 16)
            SliderDot.BackgroundColor3 = Theme.Text
            SliderDot.BorderSizePixel = 0
            SliderDot.Parent = SliderFill
            
            Utility:Round(SliderDot, 8)
            
            local dragging = false
            
            local function UpdateSlider(input)
                local pos = math.clamp(
                    (input.Position.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X,
                    0,
                    1
                )
                currentValue = math.floor(min + (max - min) * pos)
                ValueLabel.Text = tostring(currentValue)
                SliderFill.Size = UDim2.new(pos, 0, 1, 0)
                pcall(callback, currentValue)
            end
            
            SliderTrack.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or
                   input.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                    UpdateSlider(input)
                end
            end)
            
            Services.UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or
                   input.UserInputType == Enum.UserInputType.Touch then
                    dragging = false
                end
            end)
            
            Services.UserInputService.InputChanged:Connect(function(input)
                if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or
                   input.UserInputType == Enum.UserInputType.Touch) then
                    UpdateSlider(input)
                end
            end)
            
            return {
                Set = function(_, value)
                    currentValue = math.clamp(value, min, max)
                    ValueLabel.Text = tostring(currentValue)
                    SliderFill.Size = UDim2.new((currentValue - min) / (max - min), 0, 1, 0)
                end,
                Get = function()
                    return currentValue
                end
            }
        end
        
        -- Textbox
        function Elements:Textbox(text, placeholder, callback)
            callback = callback or function() end
            
            local TextboxFrame = Instance.new("Frame")
            TextboxFrame.Name = "Textbox"
            TextboxFrame.Size = UDim2.new(1, 0, 0, 62)
            TextboxFrame.BackgroundColor3 = Theme.SurfaceLight
            TextboxFrame.BorderSizePixel = 0
            TextboxFrame.Parent = Page
            
            Utility:Round(TextboxFrame, 8)
            
            local TextboxLabel = Instance.new("TextLabel")
            TextboxLabel.Size = UDim2.new(1, -24, 0, 20)
            TextboxLabel.Position = UDim2.new(0, 12, 0, 8)
            TextboxLabel.BackgroundTransparency = 1
            TextboxLabel.Text = text or "Textbox"
            TextboxLabel.Font = Enum.Font.Gotham
            TextboxLabel.TextSize = 12
            TextboxLabel.TextColor3 = Theme.TextSecondary
            TextboxLabel.TextXAlignment = Enum.TextXAlignment.Left
            TextboxLabel.Parent = TextboxFrame
            
            local TextboxInput = Instance.new("TextBox")
            TextboxInput.Position = UDim2.new(0, 12, 0, 34)
            TextboxInput.Size = UDim2.new(1, -24, 0, 24)
            TextboxInput.BackgroundColor3 = Theme.Hover
            TextboxInput.BorderSizePixel = 0
            TextboxInput.Font = Enum.Font.Gotham
            TextboxInput.TextSize = 13
            TextboxInput.TextColor3 = Theme.Text
            TextboxInput.PlaceholderText = placeholder or "Enter text..."
            TextboxInput.PlaceholderColor3 = Theme.TextDark
            TextboxInput.Text = ""
            TextboxInput.ClearTextOnFocus = false
            TextboxInput.TextXAlignment = Enum.TextXAlignment.Left
            TextboxInput.Parent = TextboxFrame
            
            Utility:Round(TextboxInput, 6)
            Utility:Padding(TextboxInput, 8)
            
            TextboxInput.Focused:Connect(function()
                Utility:Tween(TextboxInput, {BackgroundColor3 = Theme.Surface}, 0.2)
            end)
            
            TextboxInput.FocusLost:Connect(function(enterPressed)
                Utility:Tween(TextboxInput, {BackgroundColor3 = Theme.Hover}, 0.2)
                if enterPressed then
                    pcall(callback, TextboxInput.Text)
                end
            end)
            
            return {
                Set = function(_, value)
                    TextboxInput.Text = value
                end,
                Get = function()
                    return TextboxInput.Text
                end
            }
        end
        
        -- Dropdown
        function Elements:Dropdown(text, options, callback)
            callback = callback or function() end
            options = options or {"Option 1", "Option 2"}
            
            local selected = options[1]
            local isOpen = false
            
            local DropdownFrame = Instance.new("Frame")
            DropdownFrame.Name = "Dropdown"
            DropdownFrame.Size = UDim2.new(1, 0, 0, 42)
            DropdownFrame.BackgroundColor3 = Theme.SurfaceLight
            DropdownFrame.BorderSizePixel = 0
            DropdownFrame.ClipsDescendants = true
            DropdownFrame.Parent = Page
            
            Utility:Round(DropdownFrame, 8)
            
            local DropdownButton = Instance.new("TextButton")
            DropdownButton.Size = UDim2.new(1, 0, 0, 42)
            DropdownButton.BackgroundTransparency = 1
            DropdownButton.Text = ""
            DropdownButton.AutoButtonColor = false
            DropdownButton.Parent = DropdownFrame
            
            local DropdownLabel = Instance.new("TextLabel")
            DropdownLabel.Size = UDim2.new(1, -50, 1, 0)
            DropdownLabel.Position = UDim2.new(0, 12, 0, 0)
            DropdownLabel.BackgroundTransparency = 1
            DropdownLabel.Text = text .. ": " .. selected
            DropdownLabel.Font = Enum.Font.Gotham
            DropdownLabel.TextSize = 13
            DropdownLabel.TextColor3 = Theme.Text
            DropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
            DropdownLabel.Parent = DropdownButton
            
            local DropdownArrow = Instance.new("TextLabel")
            DropdownArrow.AnchorPoint = Vector2.new(1, 0.5)
            DropdownArrow.Position = UDim2.new(1, -12, 0.5, 0)
            DropdownArrow.Size = UDim2.new(0, 18, 0, 18)
            DropdownArrow.BackgroundTransparency = 1
            DropdownArrow.Text = "▼"
            DropdownArrow.Font = Enum.Font.Gotham
            DropdownArrow.TextSize = 11
            DropdownArrow.TextColor3 = Theme.Primary
            DropdownArrow.Parent = DropdownButton
            
            local OptionsList = Instance.new("Frame")
            OptionsList.Position = UDim2.new(0, 8, 0, 42)
            OptionsList.Size = UDim2.new(1, -16, 0, 0)
            OptionsList.BackgroundTransparency = 1
            OptionsList.Parent = DropdownFrame
            
            local OptionsLayout = Instance.new("UIListLayout")
            OptionsLayout.Padding = UDim.new(0, 4)
            OptionsLayout.Parent = OptionsList
            
            for _, option in ipairs(options) do
                local OptionButton = Instance.new("TextButton")
                OptionButton.Size = UDim2.new(1, 0, 0, 32)
                OptionButton.BackgroundColor3 = Theme.Hover
                OptionButton.BorderSizePixel = 0
                OptionButton.Text = option
                OptionButton.Font = Enum.Font.Gotham
                OptionButton.TextSize = 12
                OptionButton.TextColor3 = Theme.Text
                OptionButton.AutoButtonColor = false
                OptionButton.Parent = OptionsList
                
                Utility:Round(OptionButton, 6)
                Utility:Ripple(OptionButton)
                
                OptionButton.MouseEnter:Connect(function()
                    Utility:Tween(OptionButton, {BackgroundColor3 = Theme.Primary}, 0.2)
                end)
                
                OptionButton.MouseLeave:Connect(function()
                    Utility:Tween(OptionButton, {BackgroundColor3 = Theme.Hover}, 0.2)
                end)
                
                OptionButton.MouseButton1Click:Connect(function()
                    selected = option
                    DropdownLabel.Text = text .. ": " .. option
                    
                    isOpen = false
                    Utility:Tween(DropdownFrame, {Size = UDim2.new(1, 0, 0, 42)}, 0.3)
                    Utility:Tween(OptionsList, {Size = UDim2.new(1, -16, 0, 0)}, 0.3)
                    Utility:Tween(DropdownArrow, {Rotation = 0}, 0.3)
                    
                    pcall(callback, option)
                end)
            end
            
            DropdownButton.MouseButton1Click:Connect(function()
                isOpen = not isOpen
                if isOpen then
                    local height = math.min(#options * 36, 150)
                    Utility:Tween(DropdownFrame, {Size = UDim2.new(1, 0, 0, 42 + height + 8)}, 0.3)
                    Utility:Tween(OptionsList, {Size = UDim2.new(1, -16, 0, height)}, 0.3)
                    Utility:Tween(DropdownArrow, {Rotation = 180}, 0.3)
                else
                    Utility:Tween(DropdownFrame, {Size = UDim2.new(1, 0, 0, 42)}, 0.3)
                    Utility:Tween(OptionsList, {Size = UDim2.new(1, -16, 0, 0)}, 0.3)
                    Utility:Tween(DropdownArrow, {Rotation = 0}, 0.3)
                end
            end)
            
            return {
                Set = function(_, value)
                    if table.find(options, value) then
                        selected = value
                        DropdownLabel.Text = text .. ": " .. value
                    end
                end,
                Get = function()
                    return selected
                end
            }
        end
        
        return Elements
    end
    
    return Window
end

-- ═══════════════════════════════════════════════════════════════
-- Notification System
-- ═══════════════════════════════════════════════════════════════
function Library:Notify(config)
    config = config or {}
    local title = config.Title or "Notification"
    local text = config.Text or "This is a notification"
    local duration = config.Duration or 3
    local type = config.Type or "Info"
    
    local typeColors = {
        Info = Theme.Info,
        Success = Theme.Success,
        Warning = Theme.Warning,
        Error = Theme.Error,
    }
    
    local color = typeColors[type] or Theme.Info
    
    local NotifGui = Instance.new("ScreenGui")
    NotifGui.Name = "Notification"
    NotifGui.ResetOnSpawn = false
    NotifGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    if gethui then
        NotifGui.Parent = gethui()
    else
        NotifGui.Parent = Services.CoreGui
    end
    
    local NotifFrame = Instance.new("Frame")
    NotifFrame.AnchorPoint = Vector2.new(1, 0)
    NotifFrame.Position = UDim2.new(1, 20, 0, 20)
    NotifFrame.Size = UDim2.new(0, 320, 0, 75)
    NotifFrame.BackgroundColor3 = Theme.Surface
    NotifFrame.BorderSizePixel = 0
    NotifFrame.Parent = NotifGui
    
    Utility:Round(NotifFrame, 10)
    Utility:Stroke(NotifFrame, color, 2)
    
    local AccentBar = Instance.new("Frame")
    AccentBar.Size = UDim2.new(0, 4, 1, 0)
    AccentBar.BackgroundColor3 = color
    AccentBar.BorderSizePixel = 0
    AccentBar.Parent = NotifFrame
    
    Utility:Round(AccentBar, 10)
    
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Position = UDim2.new(0, 16, 0, 12)
    TitleLabel.Size = UDim2.new(1, -32, 0, 22)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Text = title
    TitleLabel.Font = Enum.Font.GothamBold
    TitleLabel.TextSize = 14
    TitleLabel.TextColor3 = Theme.Text
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Parent = NotifFrame
    
    local TextLabel = Instance.new("TextLabel")
    TextLabel.Position = UDim2.new(0, 16, 0, 38)
    TextLabel.Size = UDim2.new(1, -32, 0, 30)
    TextLabel.BackgroundTransparency = 1
    TextLabel.Text = text
    TextLabel.Font = Enum.Font.Gotham
    TextLabel.TextSize = 12
    TextLabel.TextColor3 = Theme.TextSecondary
    TextLabel.TextXAlignment = Enum.TextXAlignment.Left
    TextLabel.TextYAlignment = Enum.TextYAlignment.Top
    TextLabel.TextWrapped = true
    TextLabel.Parent = NotifFrame
    
    Utility:Tween(NotifFrame, {Position = UDim2.new(1, -20, 0, 20)}, 0.4, Enum.EasingStyle.Back)
    
    task.delay(duration, function()
        Utility:Tween(NotifFrame, {Position = UDim2.new(1, 20, 0, 20)}, 0.3)
        task.wait(0.4)
        NotifGui:Destroy()
    end)
end

return Library
