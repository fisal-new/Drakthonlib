--[[
    ╔══════════════════════════════════════════════════════════════╗
    ║               DRAKTHON HUB UI LIBRARY V4                    ║
    ║            Professional & Complete - No Errors              ║
    ╚══════════════════════════════════════════════════════════════╝
]]

local Library = {}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

-- Theme
local Theme = {
    BG = Color3.fromRGB(16, 16, 20),
    TopBar = Color3.fromRGB(20, 20, 26),
    Surface = Color3.fromRGB(24, 24, 30),
    Element = Color3.fromRGB(30, 30, 38),
    Hover = Color3.fromRGB(38, 38, 48),
    Primary = Color3.fromRGB(147, 51, 234),
    Text = Color3.fromRGB(255, 255, 255),
    SubText = Color3.fromRGB(160, 160, 170),
    Border = Color3.fromRGB(40, 40, 50),
}

-- Tween Helper
local function Tween(obj, props, time)
    TweenService:Create(obj, TweenInfo.new(time or 0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), props):Play()
end

-- Round Corners
local function Round(obj, radius)
    local c = Instance.new("UICorner")
    c.CornerRadius = UDim.new(0, radius or 8)
    c.Parent = obj
    return c
end

-- Ripple Effect
local function Ripple(btn)
    btn.ClipsDescendants = true
    btn.MouseButton1Down:Connect(function()
        local ripple = Instance.new("Frame")
        ripple.AnchorPoint = Vector2.new(0.5, 0.5)
        ripple.Position = UDim2.new(0.5, 0, 0.5, 0)
        ripple.Size = UDim2.new(0, 0, 0, 0)
        ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        ripple.BackgroundTransparency = 0.8
        ripple.BorderSizePixel = 0
        ripple.Parent = btn
        Round(ripple, 999)
        local size = math.max(btn.AbsoluteSize.X, btn.AbsoluteSize.Y) * 2
        Tween(ripple, {Size = UDim2.new(0, size, 0, size), BackgroundTransparency = 1}, 0.5)
        task.delay(0.5, function() ripple:Destroy() end)
    end)
end

-- Create Window
function Library:CreateWindow(title)
    title = title or "Drakthon Hub"
    
    -- ScreenGui
    local Gui = Instance.new("ScreenGui")
    Gui.Name = "DrakthonHub"
    Gui.ResetOnSpawn = false
    Gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    if gethui then
        Gui.Parent = gethui()
    elseif syn and syn.protect_gui then
        syn.protect_gui(Gui)
        Gui.Parent = game:GetService("CoreGui")
    else
        Gui.Parent = game:GetService("CoreGui")
    end

    -- Main
    local Main = Instance.new("Frame")
    Main.Name = "Main"
    Main.AnchorPoint = Vector2.new(0.5, 0.5)
    Main.Position = UDim2.new(0.5, 0, 0.5, 0)
    Main.Size = UDim2.new(0, 560, 0, 400)
    Main.BackgroundColor3 = Theme.BG
    Main.BorderSizePixel = 0
    Main.ClipsDescendants = false
    Main.Parent = Gui
    Round(Main, 12)

    -- Shadow
    local Shadow = Instance.new("ImageLabel")
    Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    Shadow.Position = UDim2.new(0.5, 0, 0.5, 6)
    Shadow.Size = UDim2.new(1, 30, 1, 30)
    Shadow.BackgroundTransparency = 1
    Shadow.Image = "rbxassetid://6014261993"
    Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    Shadow.ImageTransparency = 0.6
    Shadow.ScaleType = Enum.ScaleType.Slice
    Shadow.SliceCenter = Rect.new(99, 99, 99, 99)
    Shadow.ZIndex = -1
    Shadow.Parent = Main

    -- TopBar
    local TopBar = Instance.new("Frame")
    TopBar.Size = UDim2.new(1, 0, 0, 45)
    TopBar.BackgroundColor3 = Theme.TopBar
    TopBar.BorderSizePixel = 0
    TopBar.Parent = Main
    Round(TopBar, 12)

    local TopCover = Instance.new("Frame")
    TopCover.Size = UDim2.new(1, 0, 0, 12)
    TopCover.Position = UDim2.new(0, 0, 1, -12)
    TopCover.BackgroundColor3 = Theme.TopBar
    TopCover.BorderSizePixel = 0
    TopCover.Parent = TopBar

    -- Loading Bar
    local LoadBar = Instance.new("Frame")
    LoadBar.Size = UDim2.new(1, 0, 0, 2)
    LoadBar.BackgroundColor3 = Theme.Surface
    LoadBar.BorderSizePixel = 0
    LoadBar.Parent = TopBar

    local LoadFill = Instance.new("Frame")
    LoadFill.Size = UDim2.new(0, 0, 1, 0)
    LoadFill.BackgroundColor3 = Theme.Primary
    LoadFill.BorderSizePixel = 0
    LoadFill.Parent = LoadBar

    task.spawn(function()
        for i = 0, 100, 4 do
            Tween(LoadFill, {Size = UDim2.new(i/100, 0, 1, 0)}, 0.03)
            task.wait(0.02)
        end
        task.wait(0.2)
        Tween(LoadBar, {BackgroundTransparency = 1}, 0.3)
        Tween(LoadFill, {BackgroundTransparency = 1}, 0.3)
        task.wait(0.3)
        LoadBar:Destroy()
    end)

    -- Title
    local Title = Instance.new("TextLabel")
    Title.Position = UDim2.new(0, 14, 0, 0)
    Title.Size = UDim2.new(1, -90, 1, -2)
    Title.BackgroundTransparency = 1
    Title.Text = title
    Title.Font = Enum.Font.GothamBold
    Title.TextSize = 15
    Title.TextColor3 = Theme.Text
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = TopBar

    -- Close
    local Close = Instance.new("TextButton")
    Close.AnchorPoint = Vector2.new(1, 0.5)
    Close.Position = UDim2.new(1, -10, 0.5, 1)
    Close.Size = UDim2.new(0, 30, 0, 30)
    Close.BackgroundColor3 = Theme.Element
    Close.Text = "×"
    Close.Font = Enum.Font.GothamBold
    Close.TextSize = 18
    Close.TextColor3 = Theme.Text
    Close.BorderSizePixel = 0
    Close.Parent = TopBar
    Round(Close, 6)
    Ripple(Close)

    Close.MouseEnter:Connect(function() Tween(Close, {BackgroundColor3 = Color3.fromRGB(220, 50, 50)}) end)
    Close.MouseLeave:Connect(function() Tween(Close, {BackgroundColor3 = Theme.Element}) end)
    Close.MouseButton1Click:Connect(function()
        Tween(Main, {Size = UDim2.new(0, 0, 0, 0)}, 0.3)
        task.wait(0.3)
        Gui:Destroy()
    end)

    -- Minimize
    local Minimize = Instance.new("TextButton")
    Minimize.AnchorPoint = Vector2.new(1, 0.5)
    Minimize.Position = UDim2.new(1, -45, 0.5, 1)
    Minimize.Size = UDim2.new(0, 30, 0, 30)
    Minimize.BackgroundColor3 = Theme.Element
    Minimize.Text = "−"
    Minimize.Font = Enum.Font.GothamBold
    Minimize.TextSize = 16
    Minimize.TextColor3 = Theme.Text
    Minimize.BorderSizePixel = 0
    Minimize.Parent = TopBar
    Round(Minimize, 6)
    Ripple(Minimize)

    local minimized = false
    local origSize = Main.Size

    Minimize.MouseEnter:Connect(function() Tween(Minimize, {BackgroundColor3 = Theme.Primary}) end)
    Minimize.MouseLeave:Connect(function() Tween(Minimize, {BackgroundColor3 = Theme.Element}) end)
    Minimize.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            Tween(Main, {Size = UDim2.new(Main.Size.X.Scale, Main.Size.X.Offset, 0, 45)}, 0.25)
        else
            Tween(Main, {Size = origSize}, 0.25)
        end
    end)

    -- Drag
    local dragging, dragInput, dragStart, startPos
    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = Main.Position
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input == dragInput then
            local delta = input.Position - dragStart
            Main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    -- TabBar
    local TabBar = Instance.new("Frame")
    TabBar.Position = UDim2.new(0, 10, 0, 53)
    TabBar.Size = UDim2.new(1, -20, 0, 36)
    TabBar.BackgroundColor3 = Theme.Surface
    TabBar.BorderSizePixel = 0
    TabBar.Parent = Main
    Round(TabBar, 8)

    local TabList = Instance.new("Frame")
    TabList.Size = UDim2.new(1, -10, 1, -10)
    TabList.Position = UDim2.new(0, 5, 0, 5)
    TabList.BackgroundTransparency = 1
    TabList.Parent = TabBar

    local TabLayout = Instance.new("UIListLayout")
    TabLayout.FillDirection = Enum.FillDirection.Horizontal
    TabLayout.Padding = UDim.new(0, 6)
    TabLayout.Parent = TabList

    -- Content
    local Content = Instance.new("Frame")
    Content.Position = UDim2.new(0, 10, 0, 97)
    Content.Size = UDim2.new(1, -20, 1, -107)
    Content.BackgroundColor3 = Theme.Surface
    Content.BorderSizePixel = 0
    Content.Parent = Main
    Round(Content, 8)

    local Pages = Instance.new("Frame")
    Pages.Size = UDim2.new(1, 0, 1, 0)
    Pages.BackgroundTransparency = 1
    Pages.Parent = Content

    -- Window Object
    local Window = {
        Tabs = {},
        Current = nil
    }

    -- Create Tab
    function Window:Tab(name)
        name = name or "Tab"

        -- Button
        local Btn = Instance.new("TextButton")
        Btn.Size = UDim2.new(0, 80, 1, 0)
        Btn.BackgroundColor3 = Theme.Element
        Btn.Text = name
        Btn.Font = Enum.Font.GothamSemibold
        Btn.TextSize = 13
        Btn.TextColor3 = Theme.SubText
        Btn.BorderSizePixel = 0
        Btn.Parent = TabList
        Round(Btn, 6)
        Ripple(Btn)

        -- Page
        local Page = Instance.new("ScrollingFrame")
        Page.Size = UDim2.new(1, -20, 1, -20)
        Page.Position = UDim2.new(0, 10, 0, 10)
        Page.BackgroundTransparency = 1
        Page.BorderSizePixel = 0
        Page.ScrollBarThickness = 4
        Page.ScrollBarImageColor3 = Theme.Primary
        Page.CanvasSize = UDim2.new(0, 0, 0, 0)
        Page.Visible = false
        Page.Parent = Pages

        local List = Instance.new("UIListLayout")
        List.Padding = UDim.new(0, 8)
        List.Parent = Page

        List:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            Page.CanvasSize = UDim2.new(0, 0, 0, List.AbsoluteContentSize.Y + 10)
        end)

        -- Click
        Btn.MouseButton1Click:Connect(function()
            for _, t in pairs(Window.Tabs) do
                t.Page.Visible = false
                t.Btn.BackgroundColor3 = Theme.Element
                t.Btn.TextColor3 = Theme.SubText
            end
            Page.Visible = true
            Btn.BackgroundColor3 = Theme.Primary
            Btn.TextColor3 = Theme.Text
            Window.Current = name
        end)

        Btn.MouseEnter:Connect(function()
            if Window.Current ~= name then
                Tween(Btn, {BackgroundColor3 = Theme.Hover})
            end
        end)

        Btn.MouseLeave:Connect(function()
            if Window.Current ~= name then
                Tween(Btn, {BackgroundColor3 = Theme.Element})
            end
        end)

        local T = {Btn = Btn, Page = Page}
        Window.Tabs[name] = T

        if not Window.Current then
            Btn.MouseButton1Click()
        end

        -- Elements
        local E = {}

        -- Section
        function E:Section(txt)
            local S = Instance.new("Frame")
            S.Size = UDim2.new(1, 0, 0, 28)
            S.BackgroundTransparency = 1
            S.Parent = Page

            local L1 = Instance.new("Frame")
            L1.Size = UDim2.new(0.4, 0, 0, 1)
            L1.Position = UDim2.new(0, 0, 0.5, 0)
            L1.BackgroundColor3 = Theme.Primary
            L1.BorderSizePixel = 0
            L1.Parent = S

            local Txt = Instance.new("TextLabel")
            Txt.AnchorPoint = Vector2.new(0.5, 0.5)
            Txt.Position = UDim2.new(0.5, 0, 0.5, 0)
            Txt.Size = UDim2.new(0.15, 0, 1, 0)
            Txt.BackgroundTransparency = 1
            Txt.Text = txt
            Txt.Font = Enum.Font.GothamBold
            Txt.TextSize = 13
            Txt.TextColor3 = Theme.Primary
            Txt.Parent = S

            local L2 = Instance.new("Frame")
            L2.AnchorPoint = Vector2.new(1, 0)
            L2.Size = UDim2.new(0.4, 0, 0, 1)
            L2.Position = UDim2.new(1, 0, 0.5, 0)
            L2.BackgroundColor3 = Theme.Primary
            L2.BorderSizePixel = 0
            L2.Parent = S
        end

        -- Label
        function E:Label(txt)
            local L = Instance.new("TextLabel")
            L.Size = UDim2.new(1, 0, 0, 30)
            L.BackgroundColor3 = Theme.Element
            L.Text = txt
            L.Font = Enum.Font.Gotham
            L.TextSize = 13
            L.TextColor3 = Theme.Text
            L.BorderSizePixel = 0
            L.Parent = Page
            Round(L, 6)

            return {
                Set = function(_, t)
                    L.Text = t
                end
            }
        end

        -- Button
        function E:Button(txt, cb)
            cb = cb or function() end

            local B = Instance.new("TextButton")
            B.Size = UDim2.new(1, 0, 0, 35)
            B.BackgroundColor3 = Theme.Element
            B.Text = txt
            B.Font = Enum.Font.GothamSemibold
            B.TextSize = 13
            B.TextColor3 = Theme.Text
            B.BorderSizePixel = 0
            B.Parent = Page
            Round(B, 6)
            Ripple(B)

            B.MouseEnter:Connect(function() Tween(B, {BackgroundColor3 = Theme.Primary}) end)
            B.MouseLeave:Connect(function() Tween(B, {BackgroundColor3 = Theme.Element}) end)
            B.MouseButton1Click:Connect(function()
                Tween(B, {Size = UDim2.new(1, 0, 0, 33)}, 0.1)
                task.wait(0.1)
                Tween(B, {Size = UDim2.new(1, 0, 0, 35)}, 0.1)
                pcall(cb)
            end)
        end

        -- Toggle
        function E:Toggle(txt, def, cb)
            cb = cb or function() end
            local on = def or false

            local F = Instance.new("Frame")
            F.Size = UDim2.new(1, 0, 0, 38)
            F.BackgroundColor3 = Theme.Element
            F.BorderSizePixel = 0
            F.Parent = Page
            Round(F, 6)

            local L = Instance.new("TextLabel")
            L.Size = UDim2.new(1, -60, 1, 0)
            L.Position = UDim2.new(0, 10, 0, 0)
            L.BackgroundTransparency = 1
            L.Text = txt
            L.Font = Enum.Font.Gotham
            L.TextSize = 13
            L.TextColor3 = Theme.Text
            L.TextXAlignment = Enum.TextXAlignment.Left
            L.Parent = F

            local B = Instance.new("TextButton")
            B.AnchorPoint = Vector2.new(1, 0.5)
            B.Position = UDim2.new(1, -10, 0.5, 0)
            B.Size = UDim2.new(0, 40, 0, 22)
            B.BackgroundColor3 = Theme.Hover
            B.Text = ""
            B.BorderSizePixel = 0
            B.Parent = F
            Round(B, 11)

            local C = Instance.new("Frame")
            C.Position = UDim2.new(0, 2, 0.5, -9)
            C.Size = UDim2.new(0, 18, 0, 18)
            C.BackgroundColor3 = Theme.SubText
            C.BorderSizePixel = 0
            C.Parent = B
            Round(C, 9)

            local function upd()
                if on then
                    Tween(B, {BackgroundColor3 = Theme.Primary}, 0.2)
                    Tween(C, {Position = UDim2.new(1, -20, 0.5, -9), BackgroundColor3 = Theme.Text}, 0.2)
                else
                    Tween(B, {BackgroundColor3 = Theme.Hover}, 0.2)
                    Tween(C, {Position = UDim2.new(0, 2, 0.5, -9), BackgroundColor3 = Theme.SubText}, 0.2)
                end
                pcall(cb, on)
            end

            B.MouseButton1Click:Connect(function()
                on = not on
                upd()
            end)

            if def then upd() end

            return {
                Set = function(_, v)
                    on = v
                    upd()
                end
            }
        end

        -- Slider
        function E:Slider(txt, min, max, def, cb)
            cb = cb or function() end
            min = min or 0
            max = max or 100
            def = def or min
            local val = def

            local F = Instance.new("Frame")
            F.Size = UDim2.new(1, 0, 0, 48)
            F.BackgroundColor3 = Theme.Element
            F.BorderSizePixel = 0
            F.Parent = Page
            Round(F, 6)

            local L = Instance.new("TextLabel")
            L.Size = UDim2.new(1, -70, 0, 20)
            L.Position = UDim2.new(0, 10, 0, 6)
            L.BackgroundTransparency = 1
            L.Text = txt
            L.Font = Enum.Font.Gotham
            L.TextSize = 13
            L.TextColor3 = Theme.Text
            L.TextXAlignment = Enum.TextXAlignment.Left
            L.Parent = F

            local V = Instance.new("TextLabel")
            V.AnchorPoint = Vector2.new(1, 0)
            V.Size = UDim2.new(0, 50, 0, 20)
            V.Position = UDim2.new(1, -10, 0, 6)
            V.BackgroundTransparency = 1
            V.Text = tostring(def)
            V.Font = Enum.Font.GothamBold
            V.TextSize = 13
            V.TextColor3 = Theme.Primary
            V.TextXAlignment = Enum.TextXAlignment.Right
            V.Parent = F

            local T = Instance.new("Frame")
            T.Position = UDim2.new(0, 10, 0, 30)
            T.Size = UDim2.new(1, -20, 0, 6)
            T.BackgroundColor3 = Theme.Hover
            T.BorderSizePixel = 0
            T.Parent = F
            Round(T, 3)

            local Fi = Instance.new("Frame")
            Fi.Size = UDim2.new((def-min)/(max-min), 0, 1, 0)
            Fi.BackgroundColor3 = Theme.Primary
            Fi.BorderSizePixel = 0
            Fi.Parent = T
            Round(Fi, 3)

            local drag = false

            local function upd(inp)
                local pos = math.clamp((inp.Position.X - T.AbsolutePosition.X) / T.AbsoluteSize.X, 0, 1)
                val = math.floor(min + (max - min) * pos)
                V.Text = tostring(val)
                Fi.Size = UDim2.new(pos, 0, 1, 0)
                pcall(cb, val)
            end

            T.InputBegan:Connect(function(inp)
                if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                    drag = true
                    upd(inp)
                end
            end)

            UserInputService.InputEnded:Connect(function(inp)
                if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                    drag = false
                end
            end)

            UserInputService.InputChanged:Connect(function(inp)
                if drag and inp.UserInputType == Enum.UserInputType.MouseMovement then
                    upd(inp)
                end
            end)

            return {
                Set = function(_, v)
                    val = math.clamp(v, min, max)
                    V.Text = tostring(val)
                    Fi.Size = UDim2.new((val-min)/(max-min), 0, 1, 0)
                end
            }
        end

        -- Textbox
        function E:Textbox(txt, ph, cb)
            cb = cb or function() end

            local F = Instance.new("Frame")
            F.Size = UDim2.new(1, 0, 0, 58)
            F.BackgroundColor3 = Theme.Element
            F.BorderSizePixel = 0
            F.Parent = Page
            Round(F, 6)

            local L = Instance.new("TextLabel")
            L.Size = UDim2.new(1, -20, 0, 18)
            L.Position = UDim2.new(0, 10, 0, 6)
            L.BackgroundTransparency = 1
            L.Text = txt
            L.Font = Enum.Font.Gotham
            L.TextSize = 12
            L.TextColor3 = Theme.SubText
            L.TextXAlignment = Enum.TextXAlignment.Left
            L.Parent = F

            local T = Instance.new("TextBox")
            T.Position = UDim2.new(0, 10, 0, 28)
            T.Size = UDim2.new(1, -20, 0, 24)
            T.BackgroundColor3 = Theme.Hover
            T.BorderSizePixel = 0
            T.Font = Enum.Font.Gotham
            T.TextSize = 12
            T.TextColor3 = Theme.Text
            T.PlaceholderText = ph
            T.PlaceholderColor3 = Theme.SubText
            T.Text = ""
            T.ClearTextOnFocus = false
            T.Parent = F
            Round(T, 4)

            local P = Instance.new("UIPadding")
            P.PaddingLeft = UDim.new(0, 8)
            P.PaddingRight = UDim.new(0, 8)
            P.Parent = T

            T.Focused:Connect(function() Tween(T, {BackgroundColor3 = Theme.Surface}) end)
            T.FocusLost:Connect(function(e)
                Tween(T, {BackgroundColor3 = Theme.Hover})
                if e then pcall(cb, T.Text) end
            end)

            return {
                Set = function(_, v)
                    T.Text = v
                end
            }
        end

        -- Dropdown
        function E:Dropdown(txt, opts, cb)
            cb = cb or function() end
            opts = opts or {"Opt1", "Opt2"}
            local sel = opts[1]
            local open = false

            local F = Instance.new("Frame")
            F.Size = UDim2.new(1, 0, 0, 38)
            F.BackgroundColor3 = Theme.Element
            F.BorderSizePixel = 0
            F.ClipsDescendants = true
            F.Parent = Page
            Round(F, 6)

            local B = Instance.new("TextButton")
            B.Size = UDim2.new(1, 0, 0, 38)
            B.BackgroundTransparency = 1
            B.Text = ""
            B.Parent = F

            local L = Instance.new("TextLabel")
            L.Size = UDim2.new(1, -40, 1, 0)
            L.Position = UDim2.new(0, 10, 0, 0)
            L.BackgroundTransparency = 1
            L.Text = txt..": "..sel
            L.Font = Enum.Font.Gotham
            L.TextSize = 13
            L.TextColor3 = Theme.Text
            L.TextXAlignment = Enum.TextXAlignment.Left
            L.Parent = B

            local A = Instance.new("TextLabel")
            A.AnchorPoint = Vector2.new(1, 0.5)
            A.Position = UDim2.new(1, -10, 0.5, 0)
            A.Size = UDim2.new(0, 16, 0, 16)
            A.BackgroundTransparency = 1
            A.Text = "▼"
            A.Font = Enum.Font.Gotham
            A.TextSize = 10
            A.TextColor3 = Theme.Primary
            A.Parent = B

            local List = Instance.new("Frame")
            List.Position = UDim2.new(0, 6, 0, 38)
            List.Size = UDim2.new(1, -12, 0, 0)
            List.BackgroundTransparency = 1
            List.Parent = F

            local LL = Instance.new("UIListLayout")
            LL.Padding = UDim.new(0, 4)
            LL.Parent = List

            for _, o in ipairs(opts) do
                local OB = Instance.new("TextButton")
                OB.Size = UDim2.new(1, 0, 0, 30)
                OB.BackgroundColor3 = Theme.Hover
                OB.Text = o
                OB.Font = Enum.Font.Gotham
                OB.TextSize = 12
                OB.TextColor3 = Theme.Text
                OB.BorderSizePixel = 0
                OB.Parent = List
                Round(OB, 4)
                Ripple(OB)

                OB.MouseEnter:Connect(function() Tween(OB, {BackgroundColor3 = Theme.Primary}) end)
                OB.MouseLeave:Connect(function() Tween(OB, {BackgroundColor3 = Theme.Hover}) end)
                OB.MouseButton1Click:Connect(function()
                    sel = o
                    L.Text = txt..": "..o
                    open = false
                    Tween(F, {Size = UDim2.new(1, 0, 0, 38)}, 0.2)
                    Tween(List, {Size = UDim2.new(1, -12, 0, 0)}, 0.2)
                    Tween(A, {Rotation = 0}, 0.2)
                    pcall(cb, o)
                end)
            end

            B.MouseButton1Click:Connect(function()
                open = not open
                if open then
                    local h = math.min(#opts * 34, 140)
                    Tween(F, {Size = UDim2.new(1, 0, 0, 38 + h + 6)}, 0.25)
                    Tween(List, {Size = UDim2.new(1, -12, 0, h)}, 0.25)
                    Tween(A, {Rotation = 180}, 0.25)
                else
                    Tween(F, {Size = UDim2.new(1, 0, 0, 38)}, 0.25)
                    Tween(List, {Size = UDim2.new(1, -12, 0, 0)}, 0.25)
                    Tween(A, {Rotation = 0}, 0.25)
                end
            end)

            return {
                Set = function(_, v)
                    if table.find(opts, v) then
                        sel = v
                        L.Text = txt..": "..v
                    end
                end
            }
        end

        return E
    end

    return Window
end

-- Notify
function Library:Notify(t, txt, d)
    t = t or "Info"
    txt = txt or "Notification"
    d = d or 3

    local c = {
        Info = Theme.Primary,
        Success = Color3.fromRGB(34, 197, 94),
        Warning = Color3.fromRGB(245, 158, 11),
        Error = Color3.fromRGB(239, 68, 68)
    }

    local G = Instance.new("ScreenGui")
    G.ResetOnSpawn = false
    if gethui then G.Parent = gethui() else G.Parent = game:GetService("CoreGui") end

    local N = Instance.new("Frame")
    N.AnchorPoint = Vector2.new(1, 0)
    N.Position = UDim2.new(1, 10, 0, 10)
    N.Size = UDim2.new(0, 300, 0, 70)
    N.BackgroundColor3 = Theme.Surface
    N.BorderSizePixel = 0
    N.Parent = G
    Round(N, 8)

    local Bar = Instance.new("Frame")
    Bar.Size = UDim2.new(0, 3, 1, 0)
    Bar.BackgroundColor3 = c[t] or Theme.Primary
    Bar.BorderSizePixel = 0
    Bar.Parent = N

    local T = Instance.new("TextLabel")
    T.Position = UDim2.new(0, 14, 0, 10)
    T.Size = UDim2.new(1, -28, 0, 20)
    T.BackgroundTransparency = 1
    T.Text = t
    T.Font = Enum.Font.GothamBold
    T.TextSize = 14
    T.TextColor3 = Theme.Text
    T.TextXAlignment = Enum.TextXAlignment.Left
    T.Parent = N

    local D = Instance.new("TextLabel")
    D.Position = UDim2.new(0, 14, 0, 34)
    D.Size = UDim2.new(1, -28, 0, 28)
    D.BackgroundTransparency = 1
    D.Text = txt
    D.Font = Enum.Font.Gotham
    D.TextSize = 12
    D.TextColor3 = Theme.SubText
    D.TextXAlignment = Enum.TextXAlignment.Left
    D.TextWrapped = true
    D.Parent = N

    Tween(N, {Position = UDim2.new(1, -10, 0, 10)}, 0.3)
    task.delay(d, function()
        Tween(N, {Position = UDim2.new(1, 10, 0, 10)}, 0.2)
        task.wait(0.3)
        G:Destroy()
    end)
end

return Library
