--[[
    ════════════════════════════════════════════════════════════════════════════
    
    ██████╗ ██████╗  █████╗ ██╗  ██╗████████╗██╗  ██╗ ██████╗ ███╗   ██╗
    ██╔══██╗██╔══██╗██╔══██╗██║ ██╔╝╚══██╔══╝██║  ██║██╔═══██╗████╗  ██║
    ██║  ██║██████╔╝███████║█████╔╝    ██║   ███████║██║   ██║██╔██╗ ██║
    ██║  ██║██╔══██╗██╔══██║██╔═██╗    ██║   ██╔══██║██║   ██║██║╚██╗██║
    ██████╔╝██║  ██║██║  ██║██║  ██╗   ██║   ██║  ██║╚██████╔╝██║ ╚████║
    ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝
    
    🐉 Drakthon UI Library - Complete V2.0
    ════════════════════════════════════════════════════════════════════════════
    
    📌 Version: 2.0.0
    👨‍💻 Author: Drakthon Team
    🌐 GitHub: https://github.com/fisal-new/Drakthonlib
    
    ✨ Features:
    ✅ Complete Theme System (10+ Themes)
    ✅ All UI Elements (Button, Toggle, Slider, Dropdown, Input, etc.)
    ✅ Advanced Notification System
    ✅ Smooth Animations
    ✅ Draggable Windows
    ✅ Mobile Support
    ✅ Responsive Design
    ✅ Zero Memory Leaks
    ✅ Full Error Handling
    
    ════════════════════════════════════════════════════════════════════════════
]]

--[[
    ════════════════════════════════════════════════════════════════════════════
    📦 MAIN LIBRARY OBJECT
    ════════════════════════════════════════════════════════════════════════════
]]

local Drakthon = {
    Version = "2.0.0",
    Author = "Drakthon Team",
    Flags = {},
    Connections = {}
}

--[[
    ════════════════════════════════════════════════════════════════════════════
    🎮 SERVICES
    ════════════════════════════════════════════════════════════════════════════
]]

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local CoreGui = game:GetService("CoreGui")

--[[
    ════════════════════════════════════════════════════════════════════════════
    🎨 EMBEDDED THEME SYSTEM
    ════════════════════════════════════════════════════════════════════════════
]]

local ThemeManager = {
    CurrentTheme = "Ocean",
    Themes = {}
}

-- Define All Themes
ThemeManager.Themes = {
    Default = {
        BG = Color3.fromRGB(15, 15, 20),
        BG2 = Color3.fromRGB(20, 20, 28),
        BG3 = Color3.fromRGB(25, 25, 35),
        Accent = Color3.fromRGB(138, 43, 226),
        Accent2 = Color3.fromRGB(75, 0, 130),
        Text = Color3.fromRGB(255, 255, 255),
        Text2 = Color3.fromRGB(180, 180, 190),
        Green = Color3.fromRGB(46, 204, 113),
        Red = Color3.fromRGB(231, 76, 60),
        Yellow = Color3.fromRGB(241, 196, 15),
        Blue = Color3.fromRGB(52, 152, 219)
    },
    
    Ocean = {
        BG = Color3.fromRGB(12, 18, 28),
        BG2 = Color3.fromRGB(16, 23, 36),
        BG3 = Color3.fromRGB(20, 28, 44),
        Accent = Color3.fromRGB(0, 149, 255),
        Accent2 = Color3.fromRGB(0, 119, 204),
        Text = Color3.fromRGB(255, 255, 255),
        Text2 = Color3.fromRGB(160, 180, 200),
        Green = Color3.fromRGB(46, 204, 113),
        Red = Color3.fromRGB(231, 76, 60),
        Yellow = Color3.fromRGB(241, 196, 15),
        Blue = Color3.fromRGB(52, 152, 219)
    },
    
    Crimson = {
        BG = Color3.fromRGB(18, 12, 15),
        BG2 = Color3.fromRGB(25, 16, 20),
        BG3 = Color3.fromRGB(32, 20, 26),
        Accent = Color3.fromRGB(220, 20, 60),
        Accent2 = Color3.fromRGB(178, 16, 48),
        Text = Color3.fromRGB(255, 255, 255),
        Text2 = Color3.fromRGB(200, 180, 190),
        Green = Color3.fromRGB(46, 204, 113),
        Red = Color3.fromRGB(231, 76, 60),
        Yellow = Color3.fromRGB(241, 196, 15),
        Blue = Color3.fromRGB(52, 152, 219)
    },
    
    Emerald = {
        BG = Color3.fromRGB(12, 20, 15),
        BG2 = Color3.fromRGB(16, 26, 20),
        BG3 = Color3.fromRGB(20, 32, 25),
        Accent = Color3.fromRGB(46, 204, 113),
        Accent2 = Color3.fromRGB(39, 174, 96),
        Text = Color3.fromRGB(255, 255, 255),
        Text2 = Color3.fromRGB(180, 200, 190),
        Green = Color3.fromRGB(46, 204, 113),
        Red = Color3.fromRGB(231, 76, 60),
        Yellow = Color3.fromRGB(241, 196, 15),
        Blue = Color3.fromRGB(52, 152, 219)
    },
    
    Dark = {
        BG = Color3.fromRGB(10, 10, 10),
        BG2 = Color3.fromRGB(15, 15, 15),
        BG3 = Color3.fromRGB(20, 20, 20),
        Accent = Color3.fromRGB(100, 100, 100),
        Accent2 = Color3.fromRGB(80, 80, 80),
        Text = Color3.fromRGB(255, 255, 255),
        Text2 = Color3.fromRGB(180, 180, 180),
        Green = Color3.fromRGB(46, 204, 113),
        Red = Color3.fromRGB(231, 76, 60),
        Yellow = Color3.fromRGB(241, 196, 15),
        Blue = Color3.fromRGB(52, 152, 219)
    },
    
    Light = {
        BG = Color3.fromRGB(240, 242, 245),
        BG2 = Color3.fromRGB(255, 255, 255),
        BG3 = Color3.fromRGB(230, 235, 240),
        Accent = Color3.fromRGB(88, 101, 242),
        Accent2 = Color3.fromRGB(71, 82, 196),
        Text = Color3.fromRGB(30, 30, 30),
        Text2 = Color3.fromRGB(80, 80, 80),
        Green = Color3.fromRGB(46, 204, 113),
        Red = Color3.fromRGB(231, 76, 60),
        Yellow = Color3.fromRGB(241, 196, 15),
        Blue = Color3.fromRGB(52, 152, 219)
    },
    
    Sunset = {
        BG = Color3.fromRGB(20, 15, 18),
        BG2 = Color3.fromRGB(28, 20, 25),
        BG3 = Color3.fromRGB(35, 25, 30),
        Accent = Color3.fromRGB(255, 94, 77),
        Accent2 = Color3.fromRGB(255, 121, 63),
        Text = Color3.fromRGB(255, 255, 255),
        Text2 = Color3.fromRGB(200, 180, 190),
        Green = Color3.fromRGB(46, 204, 113),
        Red = Color3.fromRGB(231, 76, 60),
        Yellow = Color3.fromRGB(241, 196, 15),
        Blue = Color3.fromRGB(52, 152, 219)
    },
    
    Aqua = {
        BG = Color3.fromRGB(12, 20, 20),
        BG2 = Color3.fromRGB(16, 26, 26),
        BG3 = Color3.fromRGB(20, 32, 32),
        Accent = Color3.fromRGB(26, 188, 156),
        Accent2 = Color3.fromRGB(22, 160, 133),
        Text = Color3.fromRGB(255, 255, 255),
        Text2 = Color3.fromRGB(180, 200, 200),
        Green = Color3.fromRGB(46, 204, 113),
        Red = Color3.fromRGB(231, 76, 60),
        Yellow = Color3.fromRGB(241, 196, 15),
        Blue = Color3.fromRGB(52, 152, 219)
    },
    
    Purple = {
        BG = Color3.fromRGB(18, 12, 25),
        BG2 = Color3.fromRGB(24, 16, 33),
        BG3 = Color3.fromRGB(30, 20, 41),
        Accent = Color3.fromRGB(155, 89, 182),
        Accent2 = Color3.fromRGB(142, 68, 173),
        Text = Color3.fromRGB(255, 255, 255),
        Text2 = Color3.fromRGB(200, 180, 210),
        Green = Color3.fromRGB(46, 204, 113),
        Red = Color3.fromRGB(231, 76, 60),
        Yellow = Color3.fromRGB(241, 196, 15),
        Blue = Color3.fromRGB(52, 152, 219)
    },
    
    Cherry = {
        BG = Color3.fromRGB(20, 12, 15),
        BG2 = Color3.fromRGB(28, 16, 21),
        BG3 = Color3.fromRGB(35, 20, 27),
        Accent = Color3.fromRGB(255, 82, 82),
        Accent2 = Color3.fromRGB(255, 56, 56),
        Text = Color3.fromRGB(255, 255, 255),
        Text2 = Color3.fromRGB(200, 180, 190),
        Green = Color3.fromRGB(46, 204, 113),
        Red = Color3.fromRGB(231, 76, 60),
        Yellow = Color3.fromRGB(241, 196, 15),
        Blue = Color3.fromRGB(52, 152, 219)
    }
}

-- Theme Functions
function ThemeManager:GetColor(colorName)
    local theme = self.Themes[self.CurrentTheme] or self.Themes.Default
    return theme[colorName] or Color3.fromRGB(255, 255, 255)
end

function ThemeManager:Set(themeName)
    if self.Themes[themeName] then
        self.CurrentTheme = themeName
        return true
    end
    return false
end

function ThemeManager:Get()
    return self.CurrentTheme
end

function ThemeManager:List()
    local list = {}
    for name in pairs(self.Themes) do
        table.insert(list, name)
    end
    table.sort(list)
    return list
end

function ThemeManager:Random()
    local themes = self:List()
    local random = themes[math.random(1, #themes)]
    self:Set(random)
    return random
end

function ThemeManager:Gradient()
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, self:GetColor("Accent")),
        ColorSequenceKeypoint.new(1, self:GetColor("Accent2"))
    }
    return gradient
end

-- Shorthand Functions
function ThemeManager.BG() return ThemeManager:GetColor("BG") end
function ThemeManager.BG2() return ThemeManager:GetColor("BG2") end
function ThemeManager.BG3() return ThemeManager:GetColor("BG3") end
function ThemeManager.Accent() return ThemeManager:GetColor("Accent") end
function ThemeManager.Accent2() return ThemeManager:GetColor("Accent2") end
function ThemeManager.Text() return ThemeManager:GetColor("Text") end
function ThemeManager.Text2() return ThemeManager:GetColor("Text2") end
function ThemeManager.Green() return ThemeManager:GetColor("Green") end
function ThemeManager.Red() return ThemeManager:GetColor("Red") end
function ThemeManager.Yellow() return ThemeManager:GetColor("Yellow") end
function ThemeManager.Blue() return ThemeManager:GetColor("Blue") end

local Theme = ThemeManager

--[[
    ════════════════════════════════════════════════════════════════════════════
    🛠️ UTILITY FUNCTIONS
    ════════════════════════════════════════════════════════════════════════════
]]

local function SafeTween(obj, props, dur, style, dir)
    if not obj or not obj.Parent then return end
    local success, result = pcall(function()
        local tweenInfo = TweenInfo.new(
            dur or 0.3,
            style or Enum.EasingStyle.Quad,
            dir or Enum.EasingDirection.Out
        )
        local tween = TweenService:Create(obj, tweenInfo, props)
        tween:Play()
        return tween
    end)
    return success and result or nil
end

local function CreateInstance(class, props)
    local obj = Instance.new(class)
    for k, v in pairs(props) do
        if k ~= "Parent" then 
            pcall(function() obj[k] = v end)
        end
    end
    if props.Parent then
        obj.Parent = props.Parent
    end
    return obj
end

local function AddCorner(parent, radius)
    return CreateInstance("UICorner", {
        Parent = parent,
        CornerRadius = UDim.new(0, radius or 8)
    })
end

local function AddPadding(parent, padding)
    local p = padding or 10
    return CreateInstance("UIPadding", {
        Parent = parent,
        PaddingTop = UDim.new(0, p),
        PaddingLeft = UDim.new(0, p),
        PaddingRight = UDim.new(0, p),
        PaddingBottom = UDim.new(0, p)
    })
end

local function AddStroke(parent, color, thickness)
    return CreateInstance("UIStroke", {
        Parent = parent,
        Color = color or Theme.Accent(),
        Thickness = thickness or 1,
        ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    })
end

--[[
    ════════════════════════════════════════════════════════════════════════════
    🖱️ DRAGGING SYSTEM
    ════════════════════════════════════════════════════════════════════════════
]]

local function MakeDraggable(frame, dragHandle)
    local dragging = false
    local dragInput = nil
    local dragStart = nil
    local startPos = nil
    
    local function update(input)
        local delta = input.Position - dragStart
        SafeTween(frame, {
            Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        }, 0.1, Enum.EasingStyle.Linear)
    end
    
    dragHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    dragHandle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or 
           input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input == dragInput then
            update(input)
        end
    end)
end

--[[
    ════════════════════════════════════════════════════════════════════════════
    🔔 NOTIFICATION SYSTEM
    ════════════════════════════════════════════════════════════════════════════
]]

local NotificationQueue = {}
local ProcessingNotification = false

function Drakthon:Notify(config)
    config = config or {}
    
    local notification = {
        Title = config.Title or "Notification",
        Content = config.Content or "",
        Duration = config.Duration or 3,
        Type = config.Type or "Default"
    }
    
    -- Set color based on type
    if notification.Type == "Success" then
        notification.Color = Theme.Green()
    elseif notification.Type == "Warning" then
        notification.Color = Theme.Yellow()
    elseif notification.Type == "Error" then
        notification.Color = Theme.Red()
    elseif notification.Type == "Info" then
        notification.Color = Theme.Blue()
    else
        notification.Color = Theme.Accent()
    end
    
    table.insert(NotificationQueue, notification)
    
    if not ProcessingNotification then
        ProcessingNotification = true
        task.spawn(function()
            self:ProcessNotifications()
        end)
    end
end

function Drakthon:ProcessNotifications()
    while #NotificationQueue > 0 do
        local notif = table.remove(NotificationQueue, 1)
        local holder = self.NotificationHolder
        
        if not holder or not holder.Parent then
            ProcessingNotification = false
            return
        end
        
        -- Create Notification Frame
        local NotifFrame = CreateInstance("Frame", {
            Parent = holder,
            BackgroundColor3 = Theme.BG2(),
            BorderSizePixel = 0,
            Position = UDim2.new(1, 20, 1, -100),
            Size = UDim2.new(0, 0, 0, 80),
            AnchorPoint = Vector2.new(1, 1),
            ZIndex = 1000
        })
        
        AddCorner(NotifFrame, 10)
        
        -- Accent Bar
        CreateInstance("Frame", {
            Name = "AccentBar",
            Parent = NotifFrame,
            BackgroundColor3 = notif.Color,
            BorderSizePixel = 0,
            Size = UDim2.new(0, 4, 1, 0),
            ZIndex = 1001
        })
        
        -- Title
        CreateInstance("TextLabel", {
            Name = "Title",
            Parent = NotifFrame,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 15, 0, 10),
            Size = UDim2.new(1, -30, 0, 20),
            Font = Enum.Font.GothamBold,
            Text = notif.Title,
            TextColor3 = Theme.Text(),
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            ZIndex = 1001
        })
        
        -- Content
        CreateInstance("TextLabel", {
            Name = "Content",
            Parent = NotifFrame,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 15, 0, 35),
            Size = UDim2.new(1, -30, 0, 35),
            Font = Enum.Font.Gotham,
            Text = notif.Content,
            TextColor3 = Theme.Text2(),
            TextSize = 12,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextWrapped = true,
            TextYAlignment = Enum.TextYAlignment.Top,
            ZIndex = 1001
        })
        
        -- Progress Bar Background
        local ProgressBG = CreateInstance("Frame", {
            Name = "ProgressBG",
            Parent = NotifFrame,
            BackgroundColor3 = Theme.BG3(),
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 1, -3),
            Size = UDim2.new(1, 0, 0, 3),
            ZIndex = 1001
        })
        
        -- Progress Bar
        local Progress = CreateInstance("Frame", {
            Name = "Progress",
            Parent = ProgressBG,
            BackgroundColor3 = notif.Color,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 1, 0),
            ZIndex = 1002
        })
        
        -- Animate In
        SafeTween(NotifFrame, {
            Size = UDim2.new(0, 320, 0, 80),
            Position = UDim2.new(1, -340, 1, -100)
        }, 0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
        
        task.wait(0.4)
        
        -- Progress Animation
        SafeTween(Progress, {
            Size = UDim2.new(0, 0, 1, 0)
        }, notif.Duration, Enum.EasingStyle.Linear)
        
        task.wait(notif.Duration)
        
        -- Animate Out
        SafeTween(NotifFrame, {
            Position = UDim2.new(1, 20, 1, -100),
            Size = UDim2.new(0, 0, 0, 80)
        }, 0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        
        task.wait(0.3)
        
        -- Cleanup
        pcall(function()
            NotifFrame:Destroy()
        end)
    end
    
    ProcessingNotification = false
end

--[[
    ════════════════════════════════════════════════════════════════════════════
    🪟 CREATE WINDOW FUNCTION
    ════════════════════════════════════════════════════════════════════════════
]]

function Drakthon:CreateWindow(config)
    config = config or {}
    
    -- Window Configuration
    local WindowConfig = {
        Name = config.Name or "Drakthon UI",
        Icon = config.Icon or "rbxassetid://7733955511",
        IntroEnabled = config.IntroEnabled ~= false,
        IntroText = config.IntroText or config.Name or "Drakthon UI",
        Keybind = config.Keybind or Enum.KeyCode.RightControl,
        Size = config.Size or {650, 450},
        Theme = config.Theme or "Ocean"
    }
    
    -- Set Theme
    Theme:Set(WindowConfig.Theme)
    
    -- Get Safe Parent
    local function getSafeParent()
        local success, result = pcall(function()
            if gethui then
                return gethui()
            elseif syn and syn.protect_gui then
                local gui = Instance.new("ScreenGui")
                syn.protect_gui(gui)
                gui.Parent = CoreGui
                return CoreGui
            else
                return CoreGui
            end
        end)
        
        return success and result or Players.LocalPlayer:WaitForChild("PlayerGui")
    end
    
    -- Create ScreenGui
    local ScreenGui = CreateInstance("ScreenGui", {
        Name = "DrakthonUI_" .. HttpService:GenerateGUID(false):sub(1, 8),
        Parent = getSafeParent(),
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false,
        DisplayOrder = 999,
        IgnoreGuiInset = true
    })
    
    -- Notification Holder
    self.NotificationHolder = CreateInstance("Frame", {
        Name = "NotificationHolder",
        Parent = ScreenGui,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        ZIndex = 1000
    })
    
    -- Main Frame
    local Main = CreateInstance("Frame", {
        Name = "MainFrame",
        Parent = ScreenGui,
        BackgroundColor3 = Theme.BG(),
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -WindowConfig.Size[1]/2, 0.5, -WindowConfig.Size[2]/2),
        Size = UDim2.new(0, 0, 0, 0),
        ClipsDescendants = false
    })
    
    AddCorner(Main, 12)
    
    -- Shadow Effect
    CreateInstance("ImageLabel", {
        Name = "Shadow",
        Parent = Main,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, -15, 0, -15),
        Size = UDim2.new(1, 30, 1, 30),
        ZIndex = 0,
        Image = "rbxassetid://5554236805",
        ImageColor3 = Color3.fromRGB(0, 0, 0),
        ImageTransparency = 0.7,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(23, 23, 277, 277)
    })
    
    -- Header
    local Header = CreateInstance("Frame", {
        Name = "Header",
        Parent = Main,
        BackgroundColor3 = Theme.BG2(),
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 50),
        ZIndex = 1
    })
    
    AddCorner(Header, 12)
    
    -- Header Bottom Fix
    CreateInstance("Frame", {
        Name = "HeaderFix",
        Parent = Header,
        BackgroundColor3 = Theme.BG2(),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, -12),
        Size = UDim2.new(1, 0, 0, 12),
        ZIndex = 1
    })
    
    -- Header Gradient
    local HeaderGradient = CreateInstance("Frame", {
        Name = "HeaderGradient",
        Parent = Header,
        BackgroundColor3 = Theme.Accent(),
        BackgroundTransparency = 0.9,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        ZIndex = 2
    })
    
    AddCorner(HeaderGradient, 12)
    
    local gradient = Theme:Gradient()
    gradient.Parent = HeaderGradient
    gradient.Rotation = 45
    
    -- Title Icon
    local HeaderIcon = CreateInstance("ImageLabel", {
        Name = "Icon",
        Parent = Header,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 15, 0.5, 0),
        Size = UDim2.new(0, 28, 0, 28),
        AnchorPoint = Vector2.new(0, 0.5),
        Image = WindowConfig.Icon,
        ImageColor3 = Theme.Text(),
        ZIndex = 3
    })
    
    AddCorner(HeaderIcon, 8)
    
    -- Title Text
    local Title = CreateInstance("TextLabel", {
        Name = "Title",
        Parent = Header,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 53, 0, 0),
        Size = UDim2.new(1, -120, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = WindowConfig.Name,
        TextColor3 = Theme.Text(),
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 3
    })
    
    -- Minimize Button
    local MinimizeBtn = CreateInstance("TextButton", {
        Name = "MinimizeBtn",
        Parent = Header,
        BackgroundColor3 = Theme.BG3(),
        Position = UDim2.new(1, -70, 0.5, 0),
        Size = UDim2.new(0, 25, 0, 25),
        AnchorPoint = Vector2.new(0, 0.5),
        Font = Enum.Font.GothamBold,
        Text = "_",
        TextColor3 = Theme.Text(),
        TextSize = 16,
        AutoButtonColor = false,
        ZIndex = 3
    })
    
    AddCorner(MinimizeBtn, 6)
    
    -- Close Button
    local CloseBtn = CreateInstance("TextButton", {
        Name = "CloseBtn",
        Parent = Header,
        BackgroundColor3 = Theme.Red(),
        Position = UDim2.new(1, -35, 0.5, 0),
        Size = UDim2.new(0, 25, 0, 25),
        AnchorPoint = Vector2.new(0, 0.5),
        Font = Enum.Font.GothamBold,
        Text = "×",
        TextColor3 = Theme.Text(),
        TextSize = 18,
        AutoButtonColor = false,
        ZIndex = 3
    })
    
    AddCorner(CloseBtn, 6)
    
    -- Navigation Sidebar
    local Nav = CreateInstance("Frame", {
        Name = "Navigation",
        Parent = Main,
        BackgroundColor3 = Theme.BG2(),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 50),
        Size = UDim2.new(0, 160, 1, -50),
        ZIndex = 1
    })
    
    CreateInstance("UIListLayout", {
        Parent = Nav,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5)
    })
    
    AddPadding(Nav, 10)
    
    -- Content Area
    local Content = CreateInstance("Frame", {
        Name = "Content",
        Parent = Main,
        BackgroundColor3 = Theme.BG3(),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 160, 0, 50),
        Size = UDim2.new(1, -160, 1, -50),
        ZIndex = 1
    })
    
    -- Make Draggable
    MakeDraggable(Main, Header)
    
    -- Button Hover Effects
    MinimizeBtn.MouseEnter:Connect(function()
        SafeTween(MinimizeBtn, {BackgroundColor3 = Theme.Accent()}, 0.2)
        SafeTween(MinimizeBtn, {Size = UDim2.new(0, 28, 0, 28)}, 0.2, Enum.EasingStyle.Back)
    end)
    
    MinimizeBtn.MouseLeave:Connect(function()
        SafeTween(MinimizeBtn, {BackgroundColor3 = Theme.BG3()}, 0.2)
        SafeTween(MinimizeBtn, {Size = UDim2.new(0, 25, 0, 25)}, 0.2, Enum.EasingStyle.Back)
    end)
    
    CloseBtn.MouseEnter:Connect(function()
        SafeTween(CloseBtn, {BackgroundColor3 = Color3.fromRGB(255, 80, 80)}, 0.2)
        SafeTween(CloseBtn, {Size = UDim2.new(0, 28, 0, 28)}, 0.2, Enum.EasingStyle.Back)
    end)
    
    CloseBtn.MouseLeave:Connect(function()
        SafeTween(CloseBtn, {BackgroundColor3 = Theme.Red()}, 0.2)
        SafeTween(CloseBtn, {Size = UDim2.new(0, 25, 0, 25)}, 0.2, Enum.EasingStyle.Back)
    end)
    
    -- Button Events
    local minimized = false
    
    MinimizeBtn.MouseButton1Click:Connect(function()
        minimized = not minimized
        Main.Visible = not minimized
    end)
    
    CloseBtn.MouseButton1Click:Connect(function()
        SafeTween(Main, {
            Size = UDim2.new(0, 0, 0, 0)
        }, 0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        
        task.wait(0.3)
        ScreenGui:Destroy()
    end)
    
    -- Intro Animation
    if WindowConfig.IntroEnabled then
        SafeTween(Main, {
            Size = UDim2.new(0, WindowConfig.Size[1], 0, WindowConfig.Size[2])
        }, 0.7, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out)
        task.wait(0.7)
    else
        Main.Size = UDim2.new(0, WindowConfig.Size[1], 0, WindowConfig.Size[2])
    end
    
    -- Keybind Toggle
    local keybindConnection = UserInputService.InputBegan:Connect(function(input, gpe)
        if not gpe and input.KeyCode == WindowConfig.Keybind then
            Main.Visible = not Main.Visible
        end
    end)
    
    table.insert(Drakthon.Connections, keybindConnection)
    
    -- Cleanup on destroy
    ScreenGui.Destroying:Connect(function()
        for _, connection in ipairs(Drakthon.Connections) do
            pcall(function()
                connection:Disconnect()
            end)
        end
    end)
    
    --[[
        ════════════════════════════════════════════════════════════════════════
        📑 WINDOW OBJECT
        ════════════════════════════════════════════════════════════════════════
    ]]
    
    local Window = {
        Tabs = {},
        CurrentTab = nil,
        ScreenGui = ScreenGui,
        MainFrame = Main,
        Theme = Theme,
        Config = WindowConfig
    }
    
    --[[
        ════════════════════════════════════════════════════════════════════════
        📂 CREATE TAB FUNCTION
        ════════════════════════════════════════════════════════════════════════
    ]]
    
    function Window:CreateTab(config)
        config = config or {}
        local TabName = config.Name or "Tab"
        local TabIcon = config.Icon or "rbxassetid://7733955511"
        
        -- Tab Button
        local TabBtn = CreateInstance("TextButton", {
            Name = "Tab_" .. TabName,
            Parent = Nav,
            BackgroundColor3 = Theme.BG3(),
            Size = UDim2.new(1, 0, 0, 38),
            Font = Enum.Font.GothamSemibold,
            Text = "",
            AutoButtonColor = false,
            ZIndex = 2
        })
        
        AddCorner(TabBtn, 8)
        
        -- Tab Icon
        local TabIconLabel = CreateInstance("ImageLabel", {
            Name = "Icon",
            Parent = TabBtn,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0.5, 0),
            Size = UDim2.new(0, 20, 0, 20),
            AnchorPoint = Vector2.new(0, 0.5),
            Image = TabIcon,
            ImageColor3 = Theme.Text2(),
            ZIndex = 3
        })
        
        -- Tab Label
        local TabLabel = CreateInstance("TextLabel", {
            Name = "Label",
            Parent = TabBtn,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 38, 0, 0),
            Size = UDim2.new(1, -45, 1, 0),
            Font = Enum.Font.GothamSemibold,
            Text = TabName,
            TextColor3 = Theme.Text2(),
            TextSize = 13,
            TextXAlignment = Enum.TextXAlignment.Left,
            ZIndex = 3
        })
        
        -- Tab Content
        local TabContent = CreateInstance("ScrollingFrame", {
            Name = "Content_" .. TabName,
            Parent = Content,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            Visible = false,
            ScrollBarThickness = 4,
            ScrollBarImageColor3 = Theme.Accent(),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            BorderSizePixel = 0,
            ZIndex = 2
        })
        
        AddPadding(TabContent, 15)
        
        CreateInstance("UIListLayout", {
            Parent = TabContent,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 10)
        })
        
        -- Tab Click Event
        TabBtn.MouseButton1Click:Connect(function()
            -- Deselect all tabs
            for _, tab in pairs(Window.Tabs) do
                if tab.Deselect then
                    tab:Deselect()
                end
            end
            
            -- Select this tab
            Window.CurrentTab = TabName
            TabContent.Visible = true
            
            SafeTween(TabBtn, {BackgroundColor3 = Theme.Accent()}, 0.2)
            SafeTween(TabLabel, {TextColor3 = Theme.Text()}, 0.2)
            SafeTween(TabIconLabel, {ImageColor3 = Theme.Text()}, 0.2)
        end)
        
        -- Tab Hover Effects
        TabBtn.MouseEnter:Connect(function()
            if Window.CurrentTab ~= TabName then
                SafeTween(TabBtn, {BackgroundColor3 = Color3.fromRGB(30, 30, 40)}, 0.2)
            end
        end)
        
        TabBtn.MouseLeave:Connect(function()
            if Window.CurrentTab ~= TabName then
                SafeTween(TabBtn, {BackgroundColor3 = Theme.BG3()}, 0.2)
            end
        end)
        
        --[[
            ════════════════════════════════════════════════════════════════════
            📋 TAB OBJECT
            ════════════════════════════════════════════════════════════════════
        ]]
        
        local Tab = {
            Name = TabName,
            Button = TabBtn,
            Content = TabContent
        }
        
        function Tab:Deselect()
            TabContent.Visible = false
            SafeTween(TabBtn, {BackgroundColor3 = Theme.BG3()}, 0.2)
            SafeTween(TabLabel, {TextColor3 = Theme.Text2()}, 0.2)
            SafeTween(TabIconLabel, {ImageColor3 = Theme.Text2()}, 0.2)
        end
        
        --[[
            ════════════════════════════════════════════════════════════════════
            🔘 CREATE BUTTON
            ════════════════════════════════════════════════════════════════════
        ]]
        
        function Tab:CreateButton(config)
            config = config or {}
            local Name = config.Name or "Button"
            local Callback = config.Callback or function() end
            
            local Btn = CreateInstance("TextButton", {
                Name = "Button",
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 38),
                Font = Enum.Font.GothamSemibold,
                Text = Name,
                TextColor3 = Theme.Text(),
                TextSize = 13,
                AutoButtonColor = false,
                ZIndex = 3
            })
            
            AddCorner(Btn, 8)
            
            Btn.MouseButton1Click:Connect(function()
                task.spawn(Callback)
            end)
            
            Btn.MouseEnter:Connect(function()
                SafeTween(Btn, {BackgroundColor3 = Theme.BG3()}, 0.2)
            end)
            
            Btn.MouseLeave:Connect(function()
                SafeTween(Btn, {BackgroundColor3 = Theme.BG2()}, 0.2)
            end)
            
            return Btn
        end
        
        --[[
            ════════════════════════════════════════════════════════════════════
            🔄 CREATE TOGGLE
            ════════════════════════════════════════════════════════════════════
        ]]
        
        function Tab:CreateToggle(config)
            config = config or {}
            local Name = config.Name or "Toggle"
            local Default = config.Default or false
            local Callback = config.Callback or function() end
            
            local Frame = CreateInstance("Frame", {
                Name = "Toggle",
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 38),
                ZIndex = 3
            })
            
            AddCorner(Frame, 8)
            
            CreateInstance("TextLabel", {
                Name = "Label",
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -70, 1, 0),
                Font = Enum.Font.GothamSemibold,
                Text = Name,
                TextColor3 = Theme.Text(),
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 4
            })
            
            local ToggleBtn = CreateInstance("TextButton", {
                Name = "ToggleBtn",
                Parent = Frame,
                BackgroundColor3 = Default and Theme.Accent() or Theme.BG3(),
                Position = UDim2.new(1, -50, 0.5, 0),
                Size = UDim2.new(0, 42, 0, 22),
                AnchorPoint = Vector2.new(0, 0.5),
                Text = "",
                AutoButtonColor = false,
                ZIndex = 4
            })
            
            AddCorner(ToggleBtn, 999)
            
            local Indicator = CreateInstance("Frame", {
                Name = "Indicator",
                Parent = ToggleBtn,
                BackgroundColor3 = Theme.Text(),
                Position = Default and UDim2.new(1, -20, 0.5, 0) or UDim2.new(0, 2, 0.5, 0),
                Size = UDim2.new(0, 18, 0, 18),
                AnchorPoint = Vector2.new(0, 0.5),
                ZIndex = 5
            })
            
            AddCorner(Indicator, 999)
            
            local toggled = Default
            
            ToggleBtn.MouseButton1Click:Connect(function()
                toggled = not toggled
                
                SafeTween(ToggleBtn, {
                    BackgroundColor3 = toggled and Theme.Accent() or Theme.BG3()
                }, 0.2)
                
                SafeTween(Indicator, {
                    Position = toggled and UDim2.new(1, -20, 0.5, 0) or UDim2.new(0, 2, 0.5, 0)
                }, 0.2)
                
                task.spawn(Callback, toggled)
            end)
            
            return {
                Set = function(self, val)
                    toggled = val
                    ToggleBtn.BackgroundColor3 = toggled and Theme.Accent() or Theme.BG3()
                    Indicator.Position = toggled and UDim2.new(1, -20, 0.5, 0) or UDim2.new(0, 2, 0.5, 0)
                    task.spawn(Callback, toggled)
                end,
                Get = function(self)
                    return toggled
                end
            }
        end
        
        --[[
            ════════════════════════════════════════════════════════════════════
            📊 CREATE SLIDER
            ════════════════════════════════════════════════════════════════════
        ]]
        
        function Tab:CreateSlider(config)
            config = config or {}
            local Name = config.Name or "Slider"
            local Min = config.Min or 0
            local Max = config.Max or 100
            local Default = config.Default or Min
            local Increment = config.Increment or 1
            local Callback = config.Callback or function() end
            
            local Frame = CreateInstance("Frame", {
                Name = "Slider",
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 60),
                ZIndex = 3
            })
            
            AddCorner(Frame, 8)
            
            CreateInstance("TextLabel", {
                Name = "Label",
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 5),
                Size = UDim2.new(1, -80, 0, 20),
                Font = Enum.Font.GothamSemibold,
                Text = Name,
                TextColor3 = Theme.Text(),
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 4
            })
            
            local ValueBox = CreateInstance("TextLabel", {
                Name = "ValueBox",
                Parent = Frame,
                BackgroundColor3 = Theme.BG3(),
                Position = UDim2.new(1, -65, 0, 5),
                Size = UDim2.new(0, 50, 0, 22),
                Font = Enum.Font.GothamBold,
                Text = tostring(Default),
                TextColor3 = Theme.Accent(),
                TextSize = 13,
                ZIndex = 4
            })
            
            AddCorner(ValueBox, 6)
            
            local Track = CreateInstance("Frame", {
                Name = "Track",
                Parent = Frame,
                BackgroundColor3 = Theme.BG3(),
                Position = UDim2.new(0, 15, 1, -20),
                Size = UDim2.new(1, -30, 0, 5),
                ZIndex = 4
            })
            
            AddCorner(Track, 999)
            
            local Fill = CreateInstance("Frame", {
                Name = "Fill",
                Parent = Track,
                BackgroundColor3 = Theme.Accent(),
                Size = UDim2.new(0, 0, 1, 0),
                ZIndex = 5
            })
            
            AddCorner(Fill, 999)
            
            local Dot = CreateInstance("Frame", {
                Name = "Dot",
                Parent = Track,
                BackgroundColor3 = Theme.Text(),
                Position = UDim2.new(0, 0, 0.5, 0),
                Size = UDim2.new(0, 14, 0, 14),
                AnchorPoint = Vector2.new(0.5, 0.5),
                ZIndex = 6
            })
            
            AddCorner(Dot, 999)
            
            local dragging = false
            local value = Default
            
            local function Update(val)
                value = math.clamp(math.floor((val / Increment) + 0.5) * Increment, Min, Max)
                local percent = (value - Min) / (Max - Min)
                
                ValueBox.Text = tostring(value)
                Fill.Size = UDim2.new(percent, 0, 1, 0)
                Dot.Position = UDim2.new(percent, 0, 0.5, 0)
                
                task.spawn(Callback, value)
            end
            
            Update(Default)
            
            Track.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or 
                   input.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                    SafeTween(Dot, {Size = UDim2.new(0, 18, 0, 18)}, 0.1)
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or 
                   input.UserInputType == Enum.UserInputType.Touch then
                    dragging = false
                    SafeTween(Dot, {Size = UDim2.new(0, 14, 0, 14)}, 0.1)
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or 
                                input.UserInputType == Enum.UserInputType.Touch) then
                    local percent = math.clamp(
                        (input.Position.X - Track.AbsolutePosition.X) / Track.AbsoluteSize.X,
                        0, 1
                    )
                    Update(Min + (percent * (Max - Min)))
                end
            end)
            
            return {
                Set = function(self, val)
                    Update(val)
                end,
                Get = function(self)
                    return value
                end
            }
        end
        
        --[[
            ════════════════════════════════════════════════════════════════════
            📝 CREATE DROPDOWN
            ════════════════════════════════════════════════════════════════════
        ]]
        
        function Tab:CreateDropdown(config)
            config = config or {}
            local Name = config.Name or "Dropdown"
            local Options = config.Options or {"Option 1", "Option 2"}
            local Default = config.Default or Options[1]
            local Callback = config.Callback or function() end
            
            local Frame = CreateInstance("Frame", {
                Name = "Dropdown",
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 38),
                ClipsDescendants = true,
                ZIndex = 3
            })
            
            AddCorner(Frame, 8)
            
            local Btn = CreateInstance("TextButton", {
                Name = "Btn",
                Parent = Frame,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 38),
                Text = "",
                AutoButtonColor = false,
                ZIndex = 4
            })
            
            CreateInstance("TextLabel", {
                Name = "Label",
                Parent = Btn,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -80, 1, 0),
                Font = Enum.Font.GothamSemibold,
                Text = Name,
                TextColor3 = Theme.Text(),
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 5
            })
            
            local Selected = CreateInstance("TextLabel", {
                Name = "Selected",
                Parent = Btn,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -65, 0, 0),
                Size = UDim2.new(0, 50, 1, 0),
                Font = Enum.Font.Gotham,
                Text = Default or "...",
                TextColor3 = Theme.Accent(),
                TextSize = 12,
                TextXAlignment = Enum.TextXAlignment.Right,
                ZIndex = 5
            })
            
            local Arrow = CreateInstance("TextLabel", {
                Name = "Arrow",
                Parent = Btn,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -18, 0, 0),
                Size = UDim2.new(0, 18, 1, 0),
                Font = Enum.Font.GothamBold,
                Text = "▼",
                TextColor3 = Theme.Text2(),
                TextSize = 10,
                ZIndex = 5
            })
            
            local OptionsContainer = CreateInstance("Frame", {
                Name = "Options",
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 38),
                Size = UDim2.new(1, 0, 0, 0),
                ZIndex = 4
            })
            
            CreateInstance("UIListLayout", {
                Parent = OptionsContainer,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 2)
            })
            
            local opened = false
            local selected = Default
            
            for i, opt in ipairs(Options) do
                local OptBtn = CreateInstance("TextButton", {
                    Name = "Opt_" .. i,
                    Parent = OptionsContainer,
                    BackgroundColor3 = Theme.BG3(),
                    Size = UDim2.new(1, 0, 0, 28),
                    Font = Enum.Font.Gotham,
                    Text = opt,
                    TextColor3 = Theme.Text(),
                    TextSize = 12,
                    AutoButtonColor = false,
                    ZIndex = 5
                })
                
                AddCorner(OptBtn, 6)
                
                OptBtn.MouseButton1Click:Connect(function()
                    selected = opt
                    Selected.Text = opt
                    opened = false
                    
                    SafeTween(Arrow, {Rotation = 0}, 0.2)
                    SafeTween(Frame, {Size = UDim2.new(1, 0, 0, 38)}, 0.3)
                    
                    task.spawn(Callback, opt)
                end)
                
                OptBtn.MouseEnter:Connect(function()
                    SafeTween(OptBtn, {BackgroundColor3 = Theme.Accent()}, 0.2)
                end)
                
                OptBtn.MouseLeave:Connect(function()
                    SafeTween(OptBtn, {BackgroundColor3 = Theme.BG3()}, 0.2)
                end)
            end
            
            Btn.MouseButton1Click:Connect(function()
                opened = not opened
                
                if opened then
                    SafeTween(Arrow, {Rotation = 180}, 0.2)
                    local height = #Options * 30
                    SafeTween(Frame, {Size = UDim2.new(1, 0, 0, 38 + height + 5)}, 0.3)
                else
                    SafeTween(Arrow, {Rotation = 0}, 0.2)
                    SafeTween(Frame, {Size = UDim2.new(1, 0, 0, 38)}, 0.3)
                end
            end)
            
            return {
                Set = function(self, opt)
                    if table.find(Options, opt) then
                        selected = opt
                        Selected.Text = opt
                        task.spawn(Callback, opt)
                    end
                end,
                Get = function(self)
                    return selected
                end
            }
        end
        
        --[[
            ════════════════════════════════════════════════════════════════════
            ⌨️ CREATE INPUT
            ════════════════════════════════════════════════════════════════════
        ]]
        
        function Tab:CreateInput(config)
            config = config or {}
            local Name = config.Name or "Input"
            local Placeholder = config.Placeholder or "Type here..."
            local Default = config.Default or ""
            local Callback = config.Callback or function() end
            
            local Frame = CreateInstance("Frame", {
                Name = "Input",
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 65),
                ZIndex = 3
            })
            
            AddCorner(Frame, 8)
            
            CreateInstance("TextLabel", {
                Name = "Label",
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 5),
                Size = UDim2.new(1, -30, 0, 20),
                Font = Enum.Font.GothamSemibold,
                Text = Name,
                TextColor3 = Theme.Text(),
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 4
            })
            
            local Input = CreateInstance("TextBox", {
                Name = "InputBox",
                Parent = Frame,
                BackgroundColor3 = Theme.BG3(),
                Position = UDim2.new(0, 15, 0, 30),
                Size = UDim2.new(1, -30, 0, 28),
                Font = Enum.Font.Gotham,
                PlaceholderText = Placeholder,
                PlaceholderColor3 = Theme.Text2(),
                Text = Default,
                TextColor3 = Theme.Text(),
                TextSize = 12,
                ClearTextOnFocus = false,
                ZIndex = 4
            })
            
            AddCorner(Input, 6)
            AddPadding(Input, 8)
            
            Input.Focused:Connect(function()
                SafeTween(Input, {BackgroundColor3 = Color3.fromRGB(35, 35, 45)}, 0.2)
            end)
            
            Input.FocusLost:Connect(function()
                SafeTween(Input, {BackgroundColor3 = Theme.BG3()}, 0.2)
                task.spawn(Callback, Input.Text)
            end)
            
            return {
                Set = function(self, txt)
                    Input.Text = txt
                end,
                Get = function(self)
                    return Input.Text
                end
            }
        end
        
        --[[
            ════════════════════════════════════════════════════════════════════
            📄 CREATE LABEL
            ════════════════════════════════════════════════════════════════════
        ]]
        
        function Tab:CreateLabel(text)
            local Label = CreateInstance("TextLabel", {
                Name = "Label",
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 32),
                Font = Enum.Font.Gotham,
                Text = text or "Label",
                TextColor3 = Theme.Text2(),
                TextSize = 13,
                TextWrapped = true,
                ZIndex = 3
            })
            
            AddCorner(Label, 8)
            AddPadding(Label, 8)
            
            return {
                Set = function(self, txt)
                    Label.Text = txt
                end,
                Get = function(self)
                    return Label.Text
                end
            }
        end
        
        --[[
            ════════════════════════════════════════════════════════════════════
            📑 CREATE SECTION
            ════════════════════════════════════════════════════════════════════
        ]]
        
        function Tab:CreateSection(name)
            local Section = CreateInstance("Frame", {
                Name = "Section",
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 35),
                ZIndex = 3
            })
            
            AddCorner(Section, 8)
            
            CreateInstance("TextLabel", {
                Name = "SectionLabel",
                Parent = Section,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -30, 1, 0),
                Font = Enum.Font.GothamBold,
                Text = name or "Section",
                TextColor3 = Theme.Accent(),
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 4
            })
            
            return Section
        end
        
        --[[
            ════════════════════════════════════════════════════════════════════
            📰 CREATE PARAGRAPH
            ════════════════════════════════════════════════════════════════════
        ]]
        
        function Tab:CreateParagraph(title, content)
            local Frame = CreateInstance("Frame", {
                Name = "Paragraph",
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y,
                ZIndex = 3
            })
            
            AddCorner(Frame, 8)
            AddPadding(Frame, 10)
            
            CreateInstance("UIListLayout", {
                Parent = Frame,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 5)
            })
            
            local Title = CreateInstance("TextLabel", {
                Name = "Title",
                Parent = Frame,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 20),
                Font = Enum.Font.GothamBold,
                Text = title or "Title",
                TextColor3 = Theme.Accent(),
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Top,
                ZIndex = 4
            })
            
            local Content = CreateInstance("TextLabel", {
                Name = "Content",
                Parent = Frame,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y,
                Font = Enum.Font.Gotham,
                Text = content or "Content",
                TextColor3 = Theme.Text2(),
                TextSize = 12,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Top,
                TextWrapped = true,
                ZIndex = 4
            })
            
            return {
                Set = function(self, newTitle, newContent)
                    if newTitle then Title.Text = newTitle end
                    if newContent then Content.Text = newContent end
                end
            }
        end
        
        --[[
            ════════════════════════════════════════════════════════════════════
            🎨 CREATE COLOR PICKER
            ════════════════════════════════════════════════════════════════════
        ]]
        
        function Tab:CreateColorPicker(config)
            config = config or {}
            local Name = config.Name or "Color"
            local Default = config.Default or Color3.fromRGB(255, 255, 255)
            local Callback = config.Callback or function() end
            
            local Frame = CreateInstance("Frame", {
                Name = "ColorPicker",
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 38),
                ZIndex = 3
            })
            
            AddCorner(Frame, 8)
            
            CreateInstance("TextLabel", {
                Name = "Label",
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -70, 1, 0),
                Font = Enum.Font.GothamSemibold,
                Text = Name,
                TextColor3 = Theme.Text(),
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 4
            })
            
            local ColorBox = CreateInstance("TextButton", {
                Name = "ColorBox",
                Parent = Frame,
                BackgroundColor3 = Default,
                Position = UDim2.new(1, -50, 0.5, 0),
                Size = UDim2.new(0, 40, 0, 24),
                AnchorPoint = Vector2.new(0, 0.5),
                Text = "",
                AutoButtonColor = false,
                ZIndex = 4
            })
            
            AddCorner(ColorBox, 6)
            
            local currentColor = Default
            
            ColorBox.MouseButton1Click:Connect(function()
                task.spawn(Callback, currentColor)
            end)
            
            return {
                Set = function(self, col)
                    currentColor = col
                    ColorBox.BackgroundColor3 = col
                    task.spawn(Callback, col)
                end,
                Get = function(self)
                    return currentColor
                end
            }
        end
        
        --[[
            ════════════════════════════════════════════════════════════════════
            ⌨️ CREATE KEYBIND
            ════════════════════════════════════════════════════════════════════
        ]]
        
        function Tab:CreateKeybind(config)
            config = config or {}
            local Name = config.Name or "Keybind"
            local Default = config.Default or Enum.KeyCode.E
            local Callback = config.Callback or function() end
            
            local Frame = CreateInstance("Frame", {
                Name = "Keybind",
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 38),
                ZIndex = 3
            })
            
            AddCorner(Frame, 8)
            
            CreateInstance("TextLabel", {
                Name = "Label",
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -80, 1, 0),
                Font = Enum.Font.GothamSemibold,
                Text = Name,
                TextColor3 = Theme.Text(),
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 4
            })
            
            local KeyBtn = CreateInstance("TextButton", {
                Name = "KeyBtn",
                Parent = Frame,
                BackgroundColor3 = Theme.BG3(),
                Position = UDim2.new(1, -65, 0.5, 0),
                Size = UDim2.new(0, 55, 0, 24),
                AnchorPoint = Vector2.new(0, 0.5),
                Font = Enum.Font.GothamBold,
                Text = Default.Name,
                TextColor3 = Theme.Text(),
                TextSize = 11,
                AutoButtonColor = false,
                ZIndex = 4
            })
            
            AddCorner(KeyBtn, 6)
            
            local currentKey = Default
            local binding = false
            local bindConnection = nil
            
            KeyBtn.MouseButton1Click:Connect(function()
                binding = true
                KeyBtn.Text = "..."
                SafeTween(KeyBtn, {BackgroundColor3 = Theme.Accent()}, 0.2)
                
                if bindConnection then
                    bindConnection:Disconnect()
                end
                
                bindConnection = UserInputService.InputBegan:Connect(function(input, gpe)
                    if binding and not gpe then
                        currentKey = input.KeyCode
                        KeyBtn.Text = input.KeyCode.Name
                        SafeTween(KeyBtn, {BackgroundColor3 = Theme.BG3()}, 0.2)
                        binding = false
                        task.spawn(Callback, input.KeyCode)
                        
                        if bindConnection then
                            bindConnection:Disconnect()
                            bindConnection = nil
                        end
                    end
                end)
            end)
            
            local keyPressConnection = UserInputService.InputBegan:Connect(function(input, gpe)
                if not gpe and not binding and input.KeyCode == currentKey then
                    task.spawn(Callback, currentKey)
                end
            end)
            
            table.insert(Drakthon.Connections, keyPressConnection)
            
            Frame.Destroying:Connect(function()
                if bindConnection then bindConnection:Disconnect() end
                if keyPressConnection then keyPressConnection:Disconnect() end
            end)
            
            return {
                Set = function(self, key)
                    currentKey = key
                    KeyBtn.Text = key.Name
                end,
                Get = function(self)
                    return currentKey
                end
            }
        end
        
        -- Add tab to window
        table.insert(Window.Tabs, Tab)
        
        -- Auto-select first tab
        if #Window.Tabs == 1 then
            task.delay(0.1, function()
                TabBtn.MouseButton1Click:Fire()
            end)
        end
        
        return Tab
    end
    
    -- Welcome Notification
    if WindowConfig.IntroEnabled then
        task.delay(1, function()
            self:Notify({
                Title = "🎉 Welcome!",
                Content = WindowConfig.Name .. " loaded successfully!",
                Type = "Success",
                Duration = 3
            })
        end)
    end
    
    return Window
end

--[[
    ════════════════════════════════════════════════════════════════════════════
    🎉 RETURN LIBRARY
    ════════════════════════════════════════════════════════════════════════════
]]

print("✅ Drakthon UI Library V" .. Drakthon.Version .. " Loaded Successfully!")

return Drakthon
