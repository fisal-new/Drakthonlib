--[[
    ____             _    _   _                   
   |  _ \  _ __ __ _| | _| |_| |__   ___  _ __   
   | | | || '__/ _` | |/ / __| '_ \ / _ \| '_ \  
   | |_| || | | (_| |   <| |_| | | | (_) | | | | 
   |____/ |_|  \__,_|_|\_\\__|_| |_|\___/|_| |_| 
                                                  
   🐉 Drakthon UI Library - Complete V2
   GitHub: https://github.com/fisal-new/Drakthonlib
   
   Features:
   ✅ Theme System Support
   ✅ Enhanced Animations
   ✅ Responsive Design
   ✅ Mobile Support
   ✅ All UI Elements
   ✅ Notification System
   ✅ Configuration Saving
]]

local Drakthon = {
    Version = "2.0.0",
    Author = "Drakthon Team"
}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")

-- Load Theme System
local Theme
local themeLoaded = pcall(function()
    Theme = loadstring(game:HttpGet("https://raw.githubusercontent.com/fisal-new/Drakthonlib/main/Theme.lua"))()
end)

-- Fallback Theme if loading fails
if not themeLoaded or not Theme then
    Theme = {
        BG = function() return Color3.fromRGB(15, 15, 20) end,
        BG2 = function() return Color3.fromRGB(20, 20, 28) end,
        BG3 = function() return Color3.fromRGB(25, 25, 35) end,
        Accent = function() return Color3.fromRGB(138, 43, 226) end,
        Accent2 = function() return Color3.fromRGB(75, 0, 130) end,
        Text = function() return Color3.fromRGB(255, 255, 255) end,
        Text2 = function() return Color3.fromRGB(180, 180, 190) end,
        Green = function() return Color3.fromRGB(46, 204, 113) end,
        Red = function() return Color3.fromRGB(231, 76, 60) end,
        Yellow = function() return Color3.fromRGB(241, 196, 15) end,
        Blue = function() return Color3.fromRGB(52, 152, 219) end,
        Set = function() end,
        Get = function() return {} end,
        List = function() return {"Default"} end,
        Random = function() return "Default" end,
        Gradient = function() 
            local g = Instance.new("UIGradient")
            g.Color = ColorSequence.new{
                ColorSequenceKeypoint.new(0, Color3.fromRGB(138, 43, 226)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(75, 0, 130))
            }
            return g
        end
    }
end

-- Camera
local camera = workspace.CurrentCamera

-- Responsive Configuration
local RESPONSIVE = {
    MinWidth = 400,
    MinHeight = 300,
    MaxWidth = 1200,
    MaxHeight = 800,
    DefaultWidth = 650,
    DefaultHeight = 450
}

-- Utility Functions
local function Tween(obj, props, dur, style, dir)
    if not obj or not obj.Parent then return end
    local tweenInfo = TweenInfo.new(
        dur or 0.3,
        style or Enum.EasingStyle.Quad,
        dir or Enum.EasingDirection.Out
    )
    local tween = TweenService:Create(obj, tweenInfo, props)
    tween:Play()
    return tween
end

local function Create(class, props)
    local obj = Instance.new(class)
    for k, v in pairs(props) do
        if k ~= "Parent" then 
            local success = pcall(function()
                obj[k] = v
            end)
            if not success then
                warn("[Drakthon] Failed to set property: " .. k)
            end
        end
    end
    if props.Parent then
        obj.Parent = props.Parent
    end
    return obj
end

local function AddCorner(parent, radius)
    return Create("UICorner", {
        Parent = parent,
        CornerRadius = UDim.new(0, radius or 8)
    })
end

local function AddStroke(parent, color, thickness)
    return Create("UIStroke", {
        Parent = parent,
        Color = color or Theme.Accent(),
        Thickness = thickness or 1,
        ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    })
end

local function AddPadding(parent, top, left, right, bottom)
    return Create("UIPadding", {
        Parent = parent,
        PaddingTop = UDim.new(0, top or 0),
        PaddingLeft = UDim.new(0, left or 0),
        PaddingRight = UDim.new(0, right or 0),
        PaddingBottom = UDim.new(0, bottom or 0)
    })
end

local function GetResponsiveSize()
    local viewportSize = camera.ViewportSize
    local width = math.clamp(
        viewportSize.X * 0.6,
        RESPONSIVE.MinWidth,
        RESPONSIVE.MaxWidth
    )
    local height = math.clamp(
        viewportSize.Y * 0.7,
        RESPONSIVE.MinHeight,
        RESPONSIVE.MaxHeight
    )
    return {width, height}
end

-- Enhanced Dragging System
local function MakeDraggable(frame, handle)
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
        end
    end)
    
    handle.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or 
                        input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
end

-- Notification System
local NotificationQueue = {}
local ProcessingNotification = false

function Drakthon:Notify(config)
    config = config or {}
    local Title = config.Title or "Notification"
    local Content = config.Content or ""
    local Duration = config.Duration or 3
    local Type = config.Type or "Default"
    
    local Color = Theme.Accent()
    if Type == "Success" then 
        Color = Theme.Green()
    elseif Type == "Warning" then 
        Color = Theme.Yellow()
    elseif Type == "Error" then 
        Color = Theme.Red()
    elseif Type == "Info" then 
        Color = Theme.Blue()
    end
    
    table.insert(NotificationQueue, {
        Title = Title,
        Content = Content,
        Duration = Duration,
        Color = Color
    })
    
    if not ProcessingNotification then
        ProcessingNotification = true
        task.spawn(function()
            self:ProcessNotification()
        end)
    end
end

function Drakthon:ProcessNotification()
    while #NotificationQueue > 0 do
        local notif = table.remove(NotificationQueue, 1)
        local holder = self.NotificationHolder
        
        if not holder then
            ProcessingNotification = false
            return
        end
        
        local NotifFrame = Create("Frame", {
            Parent = holder,
            BackgroundColor3 = Theme.BG2(),
            BorderSizePixel = 0,
            Position = UDim2.new(1, 20, 1, -100),
            Size = UDim2.new(0, 0, 0, 80),
            AnchorPoint = Vector2.new(1, 1),
            ZIndex = 1000
        })
        
        AddCorner(NotifFrame, 10)
        
        Create("ImageLabel", {
            Name = "Shadow",
            Parent = NotifFrame,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, -10, 0, -10),
            Size = UDim2.new(1, 20, 1, 20),
            ZIndex = 999,
            Image = "rbxassetid://5554236805",
            ImageColor3 = Color3.fromRGB(0, 0, 0),
            ImageTransparency = 0.7,
            ScaleType = Enum.ScaleType.Slice,
            SliceCenter = Rect.new(23, 23, 277, 277)
        })
        
        Create("Frame", {
            Name = "Accent",
            Parent = NotifFrame,
            BackgroundColor3 = notif.Color,
            BorderSizePixel = 0,
            Size = UDim2.new(0, 4, 1, 0),
            ZIndex = 1001
        })
        
        Create("TextLabel", {
            Name = "Title",
            Parent = NotifFrame,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 15, 0, 10),
            Size = UDim2.new(1, -30, 0, 20),
            Font = Enum.Font.GothamBold,
            Text = notif.Title,
            TextColor3 = Theme.Text(),
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            ZIndex = 1001
        })
        
        Create("TextLabel", {
            Name = "Content",
            Parent = NotifFrame,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 15, 0, 35),
            Size = UDim2.new(1, -30, 0, 35),
            Font = Enum.Font.Gotham,
            Text = notif.Content,
            TextColor3 = Theme.Text2(),
            TextSize = 12,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextWrapped = true,
            TextYAlignment = Enum.TextYAlignment.Top,
            ZIndex = 1001
        })
        
        local ProgressBG = Create("Frame", {
            Name = "ProgressBG",
            Parent = NotifFrame,
            BackgroundColor3 = Theme.BG3(),
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 1, -3),
            Size = UDim2.new(1, 0, 0, 3),
            ZIndex = 1001
        })
        
        local Progress = Create("Frame", {
            Name = "Progress",
            Parent = ProgressBG,
            BackgroundColor3 = notif.Color,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 1, 0),
            ZIndex = 1002
        })
        
        Tween(NotifFrame, {
            Size = UDim2.new(0, 320, 0, 80),
            Position = UDim2.new(1, -340, 1, -100)
        }, 0.4, Enum.EasingStyle.Back)
        
        task.wait(0.4)
        
        Tween(Progress, {
            Size = UDim2.new(0, 0, 1, 0)
        }, notif.Duration, Enum.EasingStyle.Linear)
        
        task.wait(notif.Duration)
        
        Tween(NotifFrame, {
            Position = UDim2.new(1, 20, 1, -100),
            Size = UDim2.new(0, 0, 0, 80)
        }, 0.3, Enum.EasingStyle.Back)
        
        task.wait(0.3)
        pcall(function() NotifFrame:Destroy() end)
    end
    
    ProcessingNotification = false
end

-- Create Window
function Drakthon:CreateWindow(config)
    config = config or {}
    
    local WindowConfig = {
        Name = config.Name or "Drakthon UI",
        Icon = config.Icon or "rbxassetid://7733955511",
        IntroEnabled = config.IntroEnabled ~= false,
        IntroText = config.IntroText or config.Name or "Drakthon UI",
        Keybind = config.Keybind or Enum.KeyCode.RightControl,
        Size = config.Size or GetResponsiveSize(),
        Theme = config.Theme or "Default",
        ConfigurationSaving = config.ConfigurationSaving or {
            Enabled = false,
            FolderName = "DrakthonHub",
            FileName = "Config"
        }
    }
    
    -- Set Theme
    if Theme.Set then
        Theme.Set(WindowConfig.Theme)
    end
    
    -- Get Parent
    local function getParent()
        local success, result = pcall(function()
            return (gethui and gethui()) or game:GetService("CoreGui")
        end)
        
        if success then
            return result
        else
            return game.Players.LocalPlayer:WaitForChild("PlayerGui")
        end
    end
    
    -- Create ScreenGui
    local ScreenGui = Create("ScreenGui", {
        Name = "DrakthonUI_" .. HttpService:GenerateGUID(false):sub(1, 8),
        Parent = getParent(),
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false,
        DisplayOrder = 999,
        IgnoreGuiInset = true
    })
    
    -- Notification Holder
    self.NotificationHolder = Create("Frame", {
        Name = "NotificationHolder",
        Parent = ScreenGui,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        ZIndex = 1000
    })
    
    -- Main Frame (Centered)
    local Main = Create("Frame", {
        Name = "MainFrame",
        Parent = ScreenGui,
        BackgroundColor3 = Theme.BG(),
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -WindowConfig.Size[1]/2, 0.5, -WindowConfig.Size[2]/2),
        Size = UDim2.new(0, 0, 0, 0),
        AnchorPoint = Vector2.new(0, 0),
        ClipsDescendants = false
    })
    
    AddCorner(Main, 12)
    
    -- Shadow/Glow Effect
    local Shadow = Create("ImageLabel", {
        Name = "Shadow",
        Parent = Main,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, -15, 0, -15),
        Size = UDim2.new(1, 30, 1, 30),
        ZIndex = 0,
        Image = "rbxassetid://5554236805",
        ImageColor3 = Theme.Accent(),
        ImageTransparency = 0.8,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(23, 23, 277, 277)
    })
    
    -- Minimize Icon (Hidden by default)
    local MinimizeIcon = Create("ImageButton", {
        Name = "MinimizeIcon",
        Parent = ScreenGui,
        BackgroundColor3 = Theme.BG2(),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 20, 0, 20),
        Size = UDim2.new(0, 70, 0, 70),
        Visible = false,
        Image = WindowConfig.Icon,
        ImageColor3 = Theme.Text(),
        ScaleType = Enum.ScaleType.Fit,
        AutoButtonColor = false,
        ZIndex = 500
    })
    
    AddCorner(MinimizeIcon, 12)
    
    Create("ImageLabel", {
        Name = "IconShadow",
        Parent = MinimizeIcon,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, -10, 0, -10),
        Size = UDim2.new(1, 20, 1, 20),
        ZIndex = 499,
        Image = "rbxassetid://5554236805",
        ImageColor3 = Color3.fromRGB(0, 0, 0),
        ImageTransparency = 0.5,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(23, 23, 277, 277)
    })
    
    local IconGlow = Create("ImageLabel", {
        Name = "Glow",
        Parent = MinimizeIcon,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, -8, 0, -8),
        Size = UDim2.new(1, 16, 1, 16),
        ZIndex = 498,
        Image = "rbxassetid://5554236805",
        ImageColor3 = Theme.Accent(),
        ImageTransparency = 0.7,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(23, 23, 277, 277)
    })
    
    -- Pulsing animation for minimize icon
    task.spawn(function()
        while MinimizeIcon.Parent do
            Tween(IconGlow, {ImageTransparency = 0.4}, 1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
            task.wait(1)
            Tween(IconGlow, {ImageTransparency = 0.8}, 1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
            task.wait(1)
        end
    end)
    
    MakeDraggable(MinimizeIcon, MinimizeIcon)
    
    MinimizeIcon.MouseEnter:Connect(function()
        Tween(MinimizeIcon, {Size = UDim2.new(0, 80, 0, 80)}, 0.2, Enum.EasingStyle.Back)
        Tween(MinimizeIcon, {BackgroundColor3 = Theme.BG3()}, 0.2)
    end)
    
    MinimizeIcon.MouseLeave:Connect(function()
        Tween(MinimizeIcon, {Size = UDim2.new(0, 70, 0, 70)}, 0.2, Enum.EasingStyle.Back)
        Tween(MinimizeIcon, {BackgroundColor3 = Theme.BG2()}, 0.2)
    end)
    
    -- Header
    local Header = Create("Frame", {
        Name = "Header",
        Parent = Main,
        BackgroundColor3 = Theme.BG2(),
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 50),
        ZIndex = 1
    })
    
    AddCorner(Header, 12)
    
    Create("Frame", {
        Name = "HeaderFix",
        Parent = Header,
        BackgroundColor3 = Theme.BG2(),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, -12),
        Size = UDim2.new(1, 0, 0, 12),
        ZIndex = 1
    })
    
    local HeaderGradient = Create("Frame", {
        Name = "HeaderGradient",
        Parent = Header,
        BackgroundColor3 = Theme.Accent(),
        BackgroundTransparency = 0.85,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        ZIndex = 2
    })
    
    AddCorner(HeaderGradient, 12)
    
    local gradient = Theme.Gradient and Theme.Gradient() or Instance.new("UIGradient")
    gradient.Parent = HeaderGradient
    gradient.Rotation = 45
    
    local HeaderIcon = Create("ImageLabel", {
        Name = "Icon",
        Parent = Header,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 15, 0.5, 0),
        Size = UDim2.new(0, 28, 0, 28),
        AnchorPoint = Vector2.new(0, 0.5),
        Image = WindowConfig.Icon,
        ImageColor3 = Theme.Text(),
        ZIndex = 3
    })
    
    AddCorner(HeaderIcon, 8)
    
    local Title = Create("TextLabel", {
        Name = "Title",
        Parent = Header,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 53, 0, 0),
        Size = UDim2.new(1, -140, 1, 0),
        Font = Enum.Font.GothamBold,
        Text = WindowConfig.Name,
        TextColor3 = Theme.Text(),
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 3
    })
    
    -- Minimize Button
    local MinimizeBtn = Create("TextButton", {
        Name = "MinimizeBtn",
        Parent = Header,
        BackgroundColor3 = Theme.BG3(),
        Position = UDim2.new(1, -70, 0.5, 0),
        Size = UDim2.new(0, 25, 0, 25),
        AnchorPoint = Vector2.new(0, 0.5),
        Font = Enum.Font.GothamBold,
        Text = "_",
        TextColor3 = Theme.Text(),
        TextSize = 16,
        AutoButtonColor = false,
        ZIndex = 3
    })
    
    AddCorner(MinimizeBtn, 6)
    
    local MinimizeRipple = Create("Frame", {
        Name = "Ripple",
        Parent = MinimizeBtn,
        BackgroundColor3 = Theme.Accent(),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Size = UDim2.new(0, 0, 0, 0),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        ZIndex = 2
    })
    
    AddCorner(MinimizeRipple, 999)
    
    -- Close Button
    local CloseBtn = Create("TextButton", {
        Name = "CloseBtn",
        Parent = Header,
        BackgroundColor3 = Theme.Red(),
        Position = UDim2.new(1, -35, 0.5, 0),
        Size = UDim2.new(0, 25, 0, 25),
        AnchorPoint = Vector2.new(0, 0.5),
        Font = Enum.Font.GothamBold,
        Text = "×",
        TextColor3 = Theme.Text(),
        TextSize = 18,
        AutoButtonColor = false,
        ZIndex = 3
    })
    
    AddCorner(CloseBtn, 6)
    
    -- Navigation Sidebar
    local Nav = Create("Frame", {
        Name = "Navigation",
        Parent = Main,
        BackgroundColor3 = Theme.BG2(),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 50),
        Size = UDim2.new(0, 160, 1, -50),
        ZIndex = 1
    })
    
    Create("UIListLayout", {
        Parent = Nav,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5)
    })
    
    AddPadding(Nav, 10, 10, 10, 10)
    
    -- Content Area
    local Content = Create("Frame", {
        Name = "Content",
        Parent = Main,
        BackgroundColor3 = Theme.BG3(),
        BorderSizePixel = 0,
        Position = UDim2.new(0, 160, 0, 50),
        Size = UDim2.new(1, -160, 1, -50),
        ZIndex = 1
    })
    
    MakeDraggable(Main, Header)
    
    -- Button Events
    local minimized = false
    
    MinimizeBtn.MouseButton1Click:Connect(function()
        minimized = not minimized
        
        -- Ripple effect
        MinimizeRipple.Size = UDim2.new(0, 0, 0, 0)
        MinimizeRipple.BackgroundTransparency = 0.5
        Tween(MinimizeRipple, {
            Size = UDim2.new(1, 30, 1, 30),
            BackgroundTransparency = 1
        }, 0.5)
        
        if minimized then
            Tween(MinimizeBtn, {Rotation = 180}, 0.3, Enum.EasingStyle.Back)
            
            Tween(Main, {Size = UDim2.new(0, 0, 0, WindowConfig.Size[2])}, 0.2, Enum.EasingStyle.Quart, Enum.EasingDirection.In)
            task.wait(0.2)
            
            Tween(Main, {Size = UDim2.new(0, 0, 0, 0)}, 0.2, Enum.EasingStyle.Quart, Enum.EasingDirection.In)
            task.wait(0.2)
            
            Main.Visible = false
            
            MinimizeIcon.Visible = true
            MinimizeIcon.Size = UDim2.new(0, 0, 0, 0)
            MinimizeIcon.Rotation = -180
            MinimizeIcon.ImageTransparency = 1
            
            Tween(MinimizeIcon, {
                Size = UDim2.new(0, 70, 0, 70),
                Rotation = 0,
                ImageTransparency = 0
            }, 0.5, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out)
        else
            Tween(MinimizeBtn, {Rotation = 0}, 0.3, Enum.EasingStyle.Back)
            
            Tween(MinimizeIcon, {
                Size = UDim2.new(0, 0, 0, 0),
                Rotation = 180,
                ImageTransparency = 1
            }, 0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In)
            
            task.wait(0.3)
            MinimizeIcon.Visible = false
            
            Main.Visible = true
            Main.Size = UDim2.new(0, 0, 0, 0)
            
            Tween(Main, {Size = UDim2.new(0, 0, 0, WindowConfig.Size[2])}, 0.2, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
            task.wait(0.2)
            
            Tween(Main, {Size = UDim2.new(0, WindowConfig.Size[1], 0, WindowConfig.Size[2])}, 0.4, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out)
        end
    end)
    
    MinimizeIcon.MouseButton1Click:Connect(function()
        if minimized then
            MinimizeBtn.MouseButton1Click:Fire()
        end
    end)
    
    MinimizeBtn.MouseEnter:Connect(function()
        Tween(MinimizeBtn, {BackgroundColor3 = Theme.Accent()}, 0.2)
        Tween(MinimizeBtn, {Size = UDim2.new(0, 28, 0, 28)}, 0.2, Enum.EasingStyle.Back)
    end)
    
    MinimizeBtn.MouseLeave:Connect(function()
        Tween(MinimizeBtn, {BackgroundColor3 = Theme.BG3()}, 0.2)
        Tween(MinimizeBtn, {Size = UDim2.new(0, 25, 0, 25)}, 0.2, Enum.EasingStyle.Back)
    end)
    
    CloseBtn.MouseButton1Click:Connect(function()
        Tween(Main, {Size = UDim2.new(0, 0, 0, 0)}, 0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        if MinimizeIcon.Visible then
            Tween(MinimizeIcon, {Size = UDim2.new(0, 0, 0, 0)}, 0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        end
        task.wait(0.3)
        ScreenGui:Destroy()
    end)
    
    CloseBtn.MouseEnter:Connect(function()
        Tween(CloseBtn, {BackgroundColor3 = Color3.fromRGB(255, 80, 80)}, 0.2)
        Tween(CloseBtn, {Size = UDim2.new(0, 28, 0, 28)}, 0.2, Enum.EasingStyle.Back)
    end)
    
    CloseBtn.MouseLeave:Connect(function()
        Tween(CloseBtn, {BackgroundColor3 = Theme.Red()}, 0.2)
        Tween(CloseBtn, {Size = UDim2.new(0, 25, 0, 25)}, 0.2, Enum.EasingStyle.Back)
    end)
    
    -- Enhanced Intro Animation
    if WindowConfig.IntroEnabled then
        local Intro = Create("Frame", {
            Name = "Intro",
            Parent = Main,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            ZIndex = 200
        })
        
        local LogoContainer = Create("Frame", {
            Name = "LogoContainer",
            Parent = Intro,
            BackgroundTransparency = 1,
            Position = UDim2.new(0.5, 0, 0.5, -50),
            Size = UDim2.new(0, 450, 0, 120),
            AnchorPoint = Vector2.new(0.5, 0.5),
            ZIndex = 202
        })
        
        local Logo = Create("ImageLabel", {
            Name = "Logo",
            Parent = LogoContainer,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(0, 100, 0, 100),
            Image = WindowConfig.Icon,
            ScaleType = Enum.ScaleType.Fit,
            ZIndex = 203
        })
        
        local ScriptName = Create("TextLabel", {
            Name = "ScriptName",
            Parent = LogoContainer,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 115, 0, 20),
            Size = UDim2.new(0, 335, 0, 40),
            Font = Enum.Font.GothamBold,
            Text = WindowConfig.IntroText,
            TextColor3 = Theme.Text(),
            TextSize = 26,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextYAlignment = Enum.TextYAlignment.Top,
            ZIndex = 203
        })
        
        local PoweredBy = Create("TextLabel", {
            Name = "PoweredBy",
            Parent = LogoContainer,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 115, 0, 65),
            Size = UDim2.new(0, 335, 0, 25),
            Font = Enum.Font.Gotham,
            Text = "Powered by Drakthon Lib",
            TextColor3 = Theme.Accent(),
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            ZIndex = 203
        })
        
        Logo.ImageTransparency = 1
        ScriptName.TextTransparency = 1
        PoweredBy.TextTransparency = 1
        Logo.Size = UDim2.new(0, 70, 0, 70)
        Logo.Position = UDim2.new(0, 15, 0, 15)
        
        Tween(Main, {Size = UDim2.new(0, WindowConfig.Size[1], 0, WindowConfig.Size[2])}, 0.7, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out)
        task.wait(0.3)
        
        Tween(Logo, {
            ImageTransparency = 0,
            Size = UDim2.new(0, 100, 0, 100),
            Position = UDim2.new(0, 0, 0, 0)
        }, 0.6, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
        
        task.wait(0.3)
        
        Tween(ScriptName, {TextTransparency = 0}, 0.5)
        task.wait(0.2)
        Tween(PoweredBy, {TextTransparency = 0}, 0.5)
        
        task.wait(1.5)
        
        Tween(Logo, {ImageTransparency = 1}, 0.4)
        Tween(ScriptName, {TextTransparency = 1}, 0.4)
        Tween(PoweredBy, {TextTransparency = 1}, 0.4)
        
        task.wait(0.4)
        pcall(function() Intro:Destroy() end)
    else
        Tween(Main, {Size = UDim2.new(0, WindowConfig.Size[1], 0, WindowConfig.Size[2])}, 0.7, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out)
    end
    
    -- Responsive Resize Handler
    local resizeConnection
    resizeConnection = camera:GetPropertyChangedSignal("ViewportSize"):Connect(function()
        task.wait(0.1)
        local newSize = GetResponsiveSize()
        if not minimized and Main.Visible then
            Tween(Main, {
                Size = UDim2.new(0, newSize[1], 0, newSize[2]),
                Position = UDim2.new(0.5, -newSize[1]/2, 0.5, -newSize[2]/2)
            }, 0.3)
        end
        WindowConfig.Size = newSize
    end)
    
    -- Keybind Toggle
    local keybindConnection = UserInputService.InputBegan:Connect(function(input, gpe)
        if not gpe and input.KeyCode == WindowConfig.Keybind then
            if minimized then
                MinimizeIcon.MouseButton1Click:Fire()
            else
                Main.Visible = not Main.Visible
            end
        end
    end)
    
    -- Cleanup
    ScreenGui.Destroying:Connect(function()
        if resizeConnection then resizeConnection:Disconnect() end
        if keybindConnection then keybindConnection:Disconnect() end
    end)
    
    -- Window Object
    local Window = {
        Tabs = {},
        CurrentTab = nil,
        ScreenGui = ScreenGui,
        MainFrame = Main,
        MinimizeIcon = MinimizeIcon,
        Size = WindowConfig.Size,
        Theme = Theme,
        Config = WindowConfig
    }
    
    -- Create Tab
    function Window:CreateTab(config)
        config = config or {}
        local TabName = config.Name or "Tab"
        local TabIcon = config.Icon or "rbxassetid://7733955511"
        
        local TabBtn = Create("TextButton", {
            Name = "Tab_" .. TabName,
            Parent = Nav,
            BackgroundColor3 = Theme.BG3(),
            Size = UDim2.new(1, 0, 0, 38),
            Font = Enum.Font.GothamSemibold,
            Text = "",
            AutoButtonColor = false,
            ZIndex = 2
        })
        
        AddCorner(TabBtn, 8)
        
        local TabIconLabel = Create("ImageLabel", {
            Name = "Icon",
            Parent = TabBtn,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0.5, 0),
            Size = UDim2.new(0, 20, 0, 20),
            AnchorPoint = Vector2.new(0, 0.5),
            Image = TabIcon,
            ImageColor3 = Theme.Text2(),
            ZIndex = 3
        })
        
        local TabLabel = Create("TextLabel", {
            Name = "Label",
            Parent = TabBtn,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 38, 0, 0),
            Size = UDim2.new(1, -45, 1, 0),
            Font = Enum.Font.GothamSemibold,
            Text = TabName,
            TextColor3 = Theme.Text2(),
            TextSize = 13,
            TextXAlignment = Enum.TextXAlignment.Left,
            ZIndex = 3
        })
        
        local TabContent = Create("ScrollingFrame", {
            Name = "Content_" .. TabName,
            Parent = Content,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            Visible = false,
            ScrollBarThickness = 4,
            ScrollBarImageColor3 = Theme.Accent(),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            BorderSizePixel = 0,
            ZIndex = 2
        })
        
        AddPadding(TabContent, 15, 15, 15, 15)
        
        Create("UIListLayout", {
            Parent = TabContent,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 10)
        })
        
        TabBtn.MouseButton1Click:Connect(function()
            for _, tab in pairs(Window.Tabs) do
                if tab.Deselect then tab:Deselect() end
            end
            
            Window.CurrentTab = TabName
            TabContent.Visible = true
            
            Tween(TabBtn, {BackgroundColor3 = Theme.Accent()}, 0.2)
            Tween(TabLabel, {TextColor3 = Theme.Text()}, 0.2)
            if TabIconLabel then
                Tween(TabIconLabel, {ImageColor3 = Theme.Text()}, 0.2)
            end
        end)
        
        TabBtn.MouseEnter:Connect(function()
            if Window.CurrentTab ~= TabName then
                Tween(TabBtn, {BackgroundColor3 = Color3.fromRGB(30, 30, 40)}, 0.2)
            end
        end)
        
        TabBtn.MouseLeave:Connect(function()
            if Window.CurrentTab ~= TabName then
                Tween(TabBtn, {BackgroundColor3 = Theme.BG3()}, 0.2)
            end
        end)
        
        local Tab = {
            Name = TabName,
            Button = TabBtn,
            Content = TabContent
        }
        
        function Tab:Deselect()
            TabContent.Visible = false
            Tween(TabBtn, {BackgroundColor3 = Theme.BG3()}, 0.2)
            Tween(TabLabel, {TextColor3 = Theme.Text2()}, 0.2)
            if TabIconLabel then
                Tween(TabIconLabel, {ImageColor3 = Theme.Text2()}, 0.2)
            end
        end
        
        -- Create Button
        function Tab:CreateButton(config)
            config = config or {}
            local Name = config.Name or "Button"
            local Callback = config.Callback or function() end
            
            local Btn = Create("TextButton", {
                Name = "Button",
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 38),
                Font = Enum.Font.GothamSemibold,
                Text = Name,
                TextColor3 = Theme.Text(),
                TextSize = 13,
                AutoButtonColor = false,
                ZIndex = 3
            })
            
            AddCorner(Btn, 8)
            
            Btn.MouseButton1Click:Connect(function()
                task.spawn(Callback)
            end)
            
            Btn.MouseEnter:Connect(function()
                Tween(Btn, {BackgroundColor3 = Theme.BG3()}, 0.2)
            end)
            
            Btn.MouseLeave:Connect(function()
                Tween(Btn, {BackgroundColor3 = Theme.BG2()}, 0.2)
            end)
            
            return Btn
        end
        
        -- Create Toggle
        function Tab:CreateToggle(config)
            config = config or {}
            local Name = config.Name or "Toggle"
            local Default = config.Default or false
            local Callback = config.Callback or function() end
            
            local Frame = Create("Frame", {
                Name = "Toggle",
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 38),
                ZIndex = 3
            })
            
            AddCorner(Frame, 8)
            
            Create("TextLabel", {
                Name = "Label",
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -70, 1, 0),
                Font = Enum.Font.GothamSemibold,
                Text = Name,
                TextColor3 = Theme.Text(),
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 4
            })
            
            local ToggleBtn = Create("TextButton", {
                Name = "ToggleBtn",
                Parent = Frame,
                BackgroundColor3 = Default and Theme.Accent() or Theme.BG3(),
                Position = UDim2.new(1, -50, 0.5, 0),
                Size = UDim2.new(0, 42, 0, 22),
                AnchorPoint = Vector2.new(0, 0.5),
                Text = "",
                AutoButtonColor = false,
                ZIndex = 4
            })
            
            AddCorner(ToggleBtn, 999)
            
            local Indicator = Create("Frame", {
                Name = "Indicator",
                Parent = ToggleBtn,
                BackgroundColor3 = Theme.Text(),
                Position = Default and UDim2.new(1, -20, 0.5, 0) or UDim2.new(0, 2, 0.5, 0),
                Size = UDim2.new(0, 18, 0, 18),
                AnchorPoint = Vector2.new(0, 0.5),
                ZIndex = 5
            })
            
            AddCorner(Indicator, 999)
            
            local toggled = Default
            
            ToggleBtn.MouseButton1Click:Connect(function()
                toggled = not toggled
                Tween(ToggleBtn, {BackgroundColor3 = toggled and Theme.Accent() or Theme.BG3()}, 0.2)
                Tween(Indicator, {Position = toggled and UDim2.new(1, -20, 0.5, 0) or UDim2.new(0, 2, 0.5, 0)}, 0.2)
                task.spawn(Callback, toggled)
            end)
            
            return {
                Set = function(self, val)
                    toggled = val
                    ToggleBtn.BackgroundColor3 = toggled and Theme.Accent() or Theme.BG3()
                    Indicator.Position = toggled and UDim2.new(1, -20, 0.5, 0) or UDim2.new(0, 2, 0.5, 0)
                    task.spawn(Callback, toggled)
                end
            }
        end
        
        -- Create Slider
        function Tab:CreateSlider(config)
            config = config or {}
            local Name = config.Name or "Slider"
            local Min = config.Min or 0
            local Max = config.Max or 100
            local Default = config.Default or Min
            local Increment = config.Increment or 1
            local Callback = config.Callback or function() end
            
            local Frame = Create("Frame", {
                Name = "Slider",
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 60),
                ZIndex = 3
            })
            
            AddCorner(Frame, 8)
            
            Create("TextLabel", {
                Name = "Label",
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 5),
                Size = UDim2.new(1, -80, 0, 20),
                Font = Enum.Font.GothamSemibold,
                Text = Name,
                TextColor3 = Theme.Text(),
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 4
            })
            
            local ValueBox = Create("TextBox", {
                Name = "ValueBox",
                Parent = Frame,
                BackgroundColor3 = Theme.BG3(),
                Position = UDim2.new(1, -65, 0, 5),
                Size = UDim2.new(0, 50, 0, 22),
                Font = Enum.Font.GothamBold,
                Text = tostring(Default),
                TextColor3 = Theme.Accent(),
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Center,
                ClearTextOnFocus = false,
                ZIndex = 4
            })
            
            AddCorner(ValueBox, 6)
            
            local Track = Create("Frame", {
                Name = "Track",
                Parent = Frame,
                BackgroundColor3 = Theme.BG3(),
                Position = UDim2.new(0, 15, 1, -20),
                Size = UDim2.new(1, -30, 0, 5),
                ZIndex = 4
            })
            
            AddCorner(Track, 999)
            
            local Fill = Create("Frame", {
                Name = "Fill",
                Parent = Track,
                BackgroundColor3 = Theme.Accent(),
                Size = UDim2.new(0, 0, 1, 0),
                ZIndex = 5
            })
            
            AddCorner(Fill, 999)
            
            local Dot = Create("Frame", {
                Name = "Dot",
                Parent = Track,
                BackgroundColor3 = Theme.Text(),
                Position = UDim2.new(0, 0, 0.5, 0),
                Size = UDim2.new(0, 14, 0, 14),
                AnchorPoint = Vector2.new(0.5, 0.5),
                ZIndex = 6
            })
            
            AddCorner(Dot, 999)
            
            local dragging = false
            local value = Default
            
            local function Update(val)
                value = math.clamp(math.floor((val / Increment) + 0.5) * Increment, Min, Max)
                local percent = (value - Min) / (Max - Min)
                ValueBox.Text = tostring(value)
                Fill.Size = UDim2.new(percent, 0, 1, 0)
                Dot.Position = UDim2.new(percent, 0, 0.5, 0)
                task.spawn(Callback, value)
            end
            
            Update(Default)
            
            Track.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or 
                   input.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                    Tween(Dot, {Size = UDim2.new(0, 18, 0, 18)}, 0.1)
                end
            end)
            
            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or 
                   input.UserInputType == Enum.UserInputType.Touch then
                    dragging = false
                    Tween(Dot, {Size = UDim2.new(0, 14, 0, 14)}, 0.1)
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or 
                                input.UserInputType == Enum.UserInputType.Touch) then
                    local percent = math.clamp((input.Position.X - Track.AbsolutePosition.X) / Track.AbsoluteSize.X, 0, 1)
                    Update(Min + (percent * (Max - Min)))
                end
            end)
            
            ValueBox.FocusLost:Connect(function()
                local inputValue = tonumber(ValueBox.Text)
                if inputValue then
                    Update(inputValue)
                else
                    ValueBox.Text = tostring(value)
                end
            end)
            
            ValueBox.Focused:Connect(function()
                Tween(ValueBox, {BackgroundColor3 = Color3.fromRGB(35, 35, 45)}, 0.2)
            end)
            
            ValueBox.FocusLost:Connect(function()
                Tween(ValueBox, {BackgroundColor3 = Theme.BG3()}, 0.2)
            end)
            
            return {
                Set = function(self, val)
                    Update(val)
                end
            }
        end
        
        -- Create Dropdown
        function Tab:CreateDropdown(config)
            config = config or {}
            local Name = config.Name or "Dropdown"
            local Options = config.Options or {"Option 1"}
            local Default = config.Default or Options[1]
            local Callback = config.Callback or function() end
            
            local Frame = Create("Frame", {
                Name = "Dropdown",
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 38),
                ClipsDescendants = true,
                ZIndex = 3
            })
            
            AddCorner(Frame, 8)
            
            local Btn = Create("TextButton", {
                Name = "Btn",
                Parent = Frame,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 38),
                Text = "",
                AutoButtonColor = false,
                ZIndex = 4
            })
            
            Create("TextLabel", {
                Name = "Label",
                Parent = Btn,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -80, 1, 0),
                Font = Enum.Font.GothamSemibold,
                Text = Name,
                TextColor3 = Theme.Text(),
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 5
            })
            
            local Selected = Create("TextLabel", {
                Name = "Selected",
                Parent = Btn,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -50, 0, 0),
                Size = UDim2.new(0, 0, 1, 0),
                Font = Enum.Font.Gotham,
                Text = Default or "...",
                TextColor3 = Theme.Accent(),
                TextSize = 12,
                TextXAlignment = Enum.TextXAlignment.Right,
                ZIndex = 5
            })
            
            local Arrow = Create("TextLabel", {
                Name = "Arrow",
                Parent = Btn,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -18, 0, 0),
                Size = UDim2.new(0, 18, 1, 0),
                Font = Enum.Font.GothamBold,
                Text = "▼",
                TextColor3 = Theme.Text2(),
                TextSize = 10,
                ZIndex = 5
            })
            
            local OptionsContainer = Create("Frame", {
                Name = "Options",
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 0, 0, 38),
                Size = UDim2.new(1, 0, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y,
                ZIndex = 4
            })
            
            Create("UIListLayout", {
                Parent = OptionsContainer,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 2)
            })
            
            local opened = false
            local selected = Default
            
            for i, opt in ipairs(Options) do
                local OptBtn = Create("TextButton", {
                    Name = "Opt_" .. i,
                    Parent = OptionsContainer,
                    BackgroundColor3 = Theme.BG3(),
                    Size = UDim2.new(1, 0, 0, 28),
                    Font = Enum.Font.Gotham,
                    Text = opt,
                    TextColor3 = Theme.Text(),
                    TextSize = 12,
                    AutoButtonColor = false,
                    ZIndex = 5
                })
                
                AddCorner(OptBtn, 6)
                
                OptBtn.MouseButton1Click:Connect(function()
                    selected = opt
                    Selected.Text = opt
                    opened = false
                    Tween(Arrow, {Rotation = 0}, 0.2)
                    Tween(Frame, {Size = UDim2.new(1, 0, 0, 38)}, 0.3)
                    task.spawn(Callback, opt)
                end)
                
                OptBtn.MouseEnter:Connect(function()
                    Tween(OptBtn, {BackgroundColor3 = Theme.Accent()}, 0.2)
                end)
                
                OptBtn.MouseLeave:Connect(function()
                    Tween(OptBtn, {BackgroundColor3 = Theme.BG3()}, 0.2)
                end)
            end
            
            Btn.MouseButton1Click:Connect(function()
                opened = not opened
                if opened then
                    Tween(Arrow, {Rotation = 180}, 0.2)
                    task.wait()
                    local contentHeight = #Options * 30
                    Tween(Frame, {Size = UDim2.new(1, 0, 0, 38 + contentHeight + 5)}, 0.3)
                else
                    Tween(Arrow, {Rotation = 0}, 0.2)
                    Tween(Frame, {Size = UDim2.new(1, 0, 0, 38)}, 0.3)
                end
            end)
            
            return {
                Set = function(self, opt)
                    if table.find(Options, opt) then
                        selected = opt
                        Selected.Text = opt
                        task.spawn(Callback, opt)
                    end
                end
            }
        end
        
        -- Create Input
        function Tab:CreateInput(config)
            config = config or {}
            local Name = config.Name or "Input"
            local Placeholder = config.Placeholder or "Type here..."
            local Default = config.Default or ""
            local Callback = config.Callback or function() end
            
            local Frame = Create("Frame", {
                Name = "Input",
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 65),
                ZIndex = 3
            })
            
            AddCorner(Frame, 8)
            
            Create("TextLabel", {
                Name = "Label",
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 5),
                Size = UDim2.new(1, -30, 0, 20),
                Font = Enum.Font.GothamSemibold,
                Text = Name,
                TextColor3 = Theme.Text(),
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 4
            })
            
            local Input = Create("TextBox", {
                Name = "InputBox",
                Parent = Frame,
                BackgroundColor3 = Theme.BG3(),
                Position = UDim2.new(0, 15, 0, 30),
                Size = UDim2.new(1, -30, 0, 28),
                Font = Enum.Font.Gotham,
                PlaceholderText = Placeholder,
                PlaceholderColor3 = Theme.Text2(),
                Text = Default,
                TextColor3 = Theme.Text(),
                TextSize = 12,
                ClearTextOnFocus = false,
                ZIndex = 4
            })
            
            AddCorner(Input, 6)
            AddPadding(Input, 0, 10, 10, 0)
            
            Input.Focused:Connect(function()
                Tween(Input, {BackgroundColor3 = Color3.fromRGB(35, 35, 45)}, 0.2)
            end)
            
            Input.FocusLost:Connect(function()
                Tween(Input, {BackgroundColor3 = Theme.BG3()}, 0.2)
                task.spawn(Callback, Input.Text)
            end)
            
            return {
                Set = function(self, txt)
                    Input.Text = txt
                end,
                Get = function(self)
                    return Input.Text
                end
            }
        end
        
        -- Create Label
        function Tab:CreateLabel(text)
            local Label = Create("TextLabel", {
                Name = "Label",
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 32),
                Font = Enum.Font.Gotham,
                Text = text or "Label",
                TextColor3 = Theme.Text2(),
                TextSize = 13,
                TextWrapped = true,
                ZIndex = 3
            })
            
            AddCorner(Label, 8)
            AddPadding(Label, 0, 15, 15, 0)
            
            return {
                Set = function(self, txt)
                    Label.Text = txt
                end,
                Get = function(self)
                    return Label.Text
                end
            }
        end
        
        -- Create Section
        function Tab:CreateSection(name)
            local Section = Create("Frame", {
                Name = "Section",
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 35),
                ZIndex = 3
            })
            
            AddCorner(Section, 8)
            
            Create("TextLabel", {
                Name = "SectionLabel",
                Parent = Section,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -30, 1, 0),
                Font = Enum.Font.GothamBold,
                Text = name or "Section",
                TextColor3 = Theme.Accent(),
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 4
            })
            
            return Section
        end
        
        -- Create Paragraph
        function Tab:CreateParagraph(title, content)
            local Frame = Create("Frame", {
                Name = "Paragraph",
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y,
                ZIndex = 3
            })
            
            AddCorner(Frame, 8)
            AddPadding(Frame, 10, 15, 15, 10)
            
            local layout = Create("UIListLayout", {
                Parent = Frame,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 5)
            })
            
            local Title = Create("TextLabel", {
                Name = "Title",
                Parent = Frame,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 20),
                Font = Enum.Font.GothamBold,
                Text = title or "Title",
                TextColor3 = Theme.Accent(),
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Top,
                ZIndex = 4
            })
            
            local Content = Create("TextLabel", {
                Name = "Content",
                Parent = Frame,
                BackgroundTransparency = 1,
                Size = UDim2.new(1, 0, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y,
                Font = Enum.Font.Gotham,
                Text = content or "Content",
                TextColor3 = Theme.Text2(),
                TextSize = 12,
                TextXAlignment = Enum.TextXAlignment.Left,
                TextYAlignment = Enum.TextYAlignment.Top,
                TextWrapped = true,
                ZIndex = 4
            })
            
            return {
                Set = function(self, newTitle, newContent)
                    if newTitle then Title.Text = newTitle end
                    if newContent then Content.Text = newContent end
                end
            }
        end
        
        -- Create ColorPicker
        function Tab:CreateColorPicker(config)
            config = config or {}
            local Name = config.Name or "Color"
            local Default = config.Default or Color3.fromRGB(255, 255, 255)
            local Callback = config.Callback or function() end
            
            local Frame = Create("Frame", {
                Name = "ColorPicker",
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 38),
                ZIndex = 3
            })
            
            AddCorner(Frame, 8)
            
            Create("TextLabel", {
                Name = "Label",
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -70, 1, 0),
                Font = Enum.Font.GothamSemibold,
                Text = Name,
                TextColor3 = Theme.Text(),
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 4
            })
            
            local ColorBox = Create("TextButton", {
                Name = "ColorBox",
                Parent = Frame,
                BackgroundColor3 = Default,
                Position = UDim2.new(1, -50, 0.5, 0),
                Size = UDim2.new(0, 40, 0, 24),
                AnchorPoint = Vector2.new(0, 0.5),
                Text = "",
                AutoButtonColor = false,
                ZIndex = 4
            })
            
            AddCorner(ColorBox, 6)
            
            local currentColor = Default
            
            ColorBox.MouseButton1Click:Connect(function()
                task.spawn(Callback, currentColor)
            end)
            
            return {
                Set = function(self, col)
                    currentColor = col
                    ColorBox.BackgroundColor3 = col
                    task.spawn(Callback, col)
                end,
                Get = function(self)
                    return currentColor
                end
            }
        end
        
        -- Create Keybind
        function Tab:CreateKeybind(config)
            config = config or {}
            local Name = config.Name or "Keybind"
            local Default = config.Default or Enum.KeyCode.E
            local Callback = config.Callback or function() end
            
            local Frame = Create("Frame", {
                Name = "Keybind",
                Parent = TabContent,
                BackgroundColor3 = Theme.BG2(),
                Size = UDim2.new(1, 0, 0, 38),
                ZIndex = 3
            })
            
            AddCorner(Frame, 8)
            
            Create("TextLabel", {
                Name = "Label",
                Parent = Frame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 15, 0, 0),
                Size = UDim2.new(1, -80, 1, 0),
                Font = Enum.Font.GothamSemibold,
                Text = Name,
                TextColor3 = Theme.Text(),
                TextSize = 13,
                TextXAlignment = Enum.TextXAlignment.Left,
                ZIndex = 4
            })
            
            local KeyBtn = Create("TextButton", {
                Name = "KeyBtn",
                Parent = Frame,
                BackgroundColor3 = Theme.BG3(),
                Position = UDim2.new(1, -65, 0.5, 0),
                Size = UDim2.new(0, 55, 0, 24),
                AnchorPoint = Vector2.new(0, 0.5),
                Font = Enum.Font.GothamBold,
                Text = Default.Name,
                TextColor3 = Theme.Text(),
                TextSize = 11,
                AutoButtonColor = false,
                ZIndex = 4
            })
            
            AddCorner(KeyBtn, 6)
            
            local currentKey = Default
            local binding = false
            local bindConnection = nil
            
            KeyBtn.MouseButton1Click:Connect(function()
                binding = true
                KeyBtn.Text = "..."
                KeyBtn.BackgroundColor3 = Theme.Accent()
                
                if bindConnection then
                    bindConnection:Disconnect()
                end
                
                bindConnection = UserInputService.InputBegan:Connect(function(input, gpe)
                    if binding and not gpe then
                        currentKey = input.KeyCode
                        KeyBtn.Text = input.KeyCode.Name
                        KeyBtn.BackgroundColor3 = Theme.BG3()
                        binding = false
                        task.spawn(Callback, input.KeyCode)
                        if bindConnection then
                            bindConnection:Disconnect()
                            bindConnection = nil
                        end
                    end
                end)
            end)
            
            local keyPressConnection = UserInputService.InputBegan:Connect(function(input, gpe)
                if not gpe and not binding and input.KeyCode == currentKey then
                    task.spawn(Callback, currentKey)
                end
            end)
            
            Frame.Destroying:Connect(function()
                if bindConnection then bindConnection:Disconnect() end
                if keyPressConnection then keyPressConnection:Disconnect() end
            end)
            
            return {
                Set = function(self, key)
                    currentKey = key
                    KeyBtn.Text = key.Name
                end,
                Get = function(self)
                    return currentKey
                end
            }
        end
        
        table.insert(Window.Tabs, Tab)
        
        -- Auto-select first tab
        if #Window.Tabs == 1 then
            task.delay(0.1, function()
                TabBtn.MouseButton1Click:Fire()
            end)
        end
        
        return Tab
    end
    
    -- Welcome Notification
    if WindowConfig.IntroEnabled then
        task.delay(3, function()
            self:Notify({
                Title = "Welcome!",
                Content = WindowConfig.Name .. " loaded successfully!",
                Type = "Success",
                Duration = 3
            })
        end)
    end
    
    return Window
end

return Drakthon
