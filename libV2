-- Drakthon Hub - Ultra Smooth Responsive UI (Luau)
-- Place this as a LocalScript in StarterPlayerScripts or StarterGui

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- CONFIG
local Config = {
	AppName = "Drakthon Hub",
	LogoImage = "rbxassetid://0", -- ÿ∂ÿπ ÿ¥ÿπÿßÿ±ŸÉ ŸáŸÜÿß
	Icons = {
		Home   = "rbxassetid://0", -- ÿ∂ÿπ ÿ£ŸäŸÇŸàŸÜÿ© ÿßŸÑŸÖŸÜÿ≤ŸÑ
		Search = "rbxassetid://0", -- ÿ∂ÿπ ÿ£ŸäŸÇŸàŸÜÿ© ÿßŸÑÿ®ÿ≠ÿ´
		User   = "rbxassetid://0", -- ÿ∂ÿπ ÿ£ŸäŸÇŸàŸÜÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
		Cart   = "rbxassetid://0", -- ÿ∂ÿπ ÿ£ŸäŸÇŸàŸÜÿ© ÿßŸÑÿ≥ŸÑÿ©
	},
	Colors = {
		Primary = Color3.fromRGB(24, 94, 224),   -- ÿ£ÿ≤ÿ±ŸÇ (ŸÑŸÑÿ™ÿ®ŸàŸäÿ® ÿßŸÑŸÖÿÆÿ™ÿßÿ±/Glider)
		Accent  = Color3.fromRGB(245, 73, 144),  -- Ÿàÿ±ÿØŸä (ŸÑÿ¥ÿ±Ÿäÿ∑ ÿßŸÑÿ£ÿ≤ÿ±ÿßÿ± ÿßŸÑÿØÿßÿ¶ÿ±Ÿä)
		Surface = Color3.fromRGB(255, 255, 255), -- ÿÆŸÑŸÅŸäÿßÿ™ ŸÅÿßÿ™ÿ≠ÿ©
		Muted   = Color3.fromRGB(230, 238, 249), -- ÿÆŸÑŸÅŸäÿ© Glider
		Text    = Color3.fromRGB(20, 20, 30),    -- ŸÜÿµ
		Subtle  = Color3.fromRGB(120, 130, 150), -- ŸÜÿµ ÿ´ÿßŸÜŸàŸä
		BG      = Color3.fromRGB(245, 247, 252)  -- ÿÆŸÑŸÅŸäÿ© ÿπÿßŸÖÿ©
	},
	SplashDuration = 1.6, -- ÿ´ÿßŸÜŸäÿ©
}

-- Helpers
local function New(className, props, children)
	local obj = Instance.new(className)
	if props then
		for k, v in pairs(props) do
			if k ~= "Parent" then
				obj[k] = v
			end
		end
	end
	if children then
		for _, c in ipairs(children) do
			c.Parent = obj
		end
	end
	if props and props.Parent then
		obj.Parent = props.Parent
	end
	return obj
end

local function addCorner(parent, radius)
	New("UICorner", { CornerRadius = UDim.new(0, radius), Parent = parent })
end

local function addStroke(parent, color, thickness, transparency)
	New("UIStroke", {
		Color = color or Color3.fromRGB(0,0,0),
		Thickness = thickness or 1,
		Transparency = transparency or 0.5,
		ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
		Parent = parent
	})
end

local function tween(obj, time, props, style, dir)
	local t = TweenService:Create(obj, TweenInfo.new(time, style or Enum.EasingStyle.Quad, dir or Enum.EasingDirection.Out), props)
	t:Play()
	return t
end

-- Root GUI
local screenGui = New("ScreenGui", {
	Name = "DrakthonHub",
	ResetOnSpawn = false,
	IgnoreGuiInset = false,
	ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
	Parent = playerGui,
})

local root = New("Frame", {
	Name = "Root",
	Size = UDim2.fromScale(1, 1),
	BackgroundColor3 = Config.Colors.BG,
	BorderSizePixel = 0,
	Parent = screenGui
})

local uiScale = New("UIScale", { Scale = 1, Parent = root })

-- Responsive scaling: adjusts based on viewport size
local function applyScale()
	local cam = workspace.CurrentCamera
	if not cam then return end
	local v = cam.ViewportSize
	-- Base on 1366x768; clamp to keep it nice across phones/tablets/PC
	local sx = v.X / 1366
	local sy = v.Y / 768
	local f = math.clamp((sx + sy)/2, 0.65, 1.25)
	uiScale.Scale = f
end
if workspace.CurrentCamera then
	workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(applyScale)
end
RunService.Heartbeat:Wait(); applyScale()

-- Layout scaffolding
local padding = New("UIPadding", {
	PaddingTop = UDim.new(0, 12),
	PaddingBottom = UDim.new(0, 12),
	PaddingLeft = UDim.new(0, 16),
	PaddingRight = UDim.new(0, 16),
	Parent = root
})

local layoutV = New("UIListLayout", {
	FillDirection = Enum.FillDirection.Vertical,
	HorizontalAlignment = Enum.HorizontalAlignment.Center,
	VerticalAlignment = Enum.VerticalAlignment.Top,
	Padding = UDim.new(0, 10),
	SortOrder = Enum.SortOrder.LayoutOrder,
	Parent = root
})

-- Splash screen
local function showSplash(callback)
	local splash = New("Frame", {
		Name = "Splash",
		BackgroundColor3 = Config.Colors.BG,
		BorderSizePixel = 0,
		Size = UDim2.fromScale(1, 1),
		ZIndex = 50,
		Parent = root
	})
	local center = New("Frame", {
		BackgroundTransparency = 1,
		Size = UDim2.fromOffset(420, 180),
		AnchorPoint = Vector2.new(0.5, 0.5),
		Position = UDim2.fromScale(0.5, 0.5),
		Parent = splash,
	})
	local logo = New("ImageLabel", {
		BackgroundTransparency = 1,
		Size = UDim2.fromOffset(96, 96),
		AnchorPoint = Vector2.new(0.5, 0),
		Position = UDim2.fromScale(0.5, 0),
		Image = Config.LogoImage ~= "" and Config.LogoImage or "rbxassetid://0",
		Parent = center
	})
	addCorner(logo, 24)

	local title = New("TextLabel", {
		BackgroundTransparency = 1,
		Text = Config.AppName,
		Font = Enum.Font.GothamBold,
		TextSize = 28,
		TextColor3 = Config.Colors.Text,
		AnchorPoint = Vector2.new(0.5, 0),
		Position = UDim2.fromScale(0.5, 0),
		Size = UDim2.fromOffset(320, 40),
		Parent = center
	})
	title.Position = UDim2.new(0.5, 0, 0, 108)

	local sub = New("TextLabel", {
		BackgroundTransparency = 1,
		Text = "Loading...",
		Font = Enum.Font.Gotham,
		TextSize = 16,
		TextColor3 = Config.Colors.Subtle,
		AnchorPoint = Vector2.new(0.5, 0),
		Position = UDim2.fromScale(0.5, 0),
		Size = UDim2.fromOffset(200, 20),
		Parent = center
	})
	sub.Position = UDim2.new(0.5, 0, 0, 140)

	logo.Rotation = 0
	tween(logo, 0.4, { Size = UDim2.fromOffset(110, 110) })
	task.delay(0.4, function()
		tween(logo, 0.4, { Size = UDim2.fromOffset(96, 96) })
	end)

	task.delay(Config.SplashDuration, function()
		tween(splash, 0.35, { BackgroundTransparency = 1 })
		tween(center, 0.3, { Position = UDim2.fromScale(0.5, 0.45) })
		task.wait(0.3)
		splash:Destroy()
		if callback then callback() end
	end)
	return splash
end

-- Top bar with icon pill (like Uiverse button container)
local function createIconButton(parent, name, imageId, fallback)
	local btn = New("ImageButton", {
		Name = name,
		BackgroundTransparency = 1,
		Size = UDim2.fromOffset(40, 40),
		ImageTransparency = 1, -- We'll use an inner icon
		Parent = parent
	})
	local circle = New("Frame", {
		BackgroundColor3 = Color3.new(1,1,1),
		BackgroundTransparency = 1,
		Size = UDim2.fromScale(1,1),
		Parent = btn
	})
	addCorner(circle, 999)
	local icon
	if imageId and imageId ~= "rbxassetid://0" and imageId ~= "" then
		icon = New("ImageLabel", {
			BackgroundTransparency = 1,
			Size = UDim2.fromScale(0.5, 0.5),
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.fromScale(0.5, 0.5),
			Image = imageId,
			ImageColor3 = Color3.fromRGB(255,255,255),
			Parent = circle
		})
	else
		icon = New("TextLabel", {
			BackgroundTransparency = 1,
			Text = fallback or "?",
			Font = Enum.Font.GothamBold,
			TextSize = 20,
			TextColor3 = Color3.fromRGB(255,255,255),
			AnchorPoint = Vector2.new(0.5, 0.5),
			Position = UDim2.fromScale(0.5, 0.5),
			Size = UDim2.fromScale(1,1),
			Parent = circle
		})
	end

	-- Hover lift
	if not UserInputService.TouchEnabled then
		btn.MouseEnter:Connect(function()
			tween(btn, 0.18, { Position = UDim2.new(btn.Position.X.Scale, btn.Position.X.Offset, btn.Position.Y.Scale, btn.Position.Y.Offset - 3) })
		end)
		btn.MouseLeave:Connect(function()
			tween(btn, 0.18, { Position = UDim2.new(btn.Position.X.Scale, btn.Position.X.Offset, btn.Position.Y.Scale, btn.Position.Y.Offset + 3) })
		end)
	end
	return btn
end

local topBar = New("Frame", {
	Name = "TopBar",
	BackgroundTransparency = 1,
	Size = UDim2.new(1, 0, 0, 60),
	LayoutOrder = 1,
	Parent = root
})
local topLayout = New("UIListLayout", {
	FillDirection = Enum.FillDirection.Horizontal,
	HorizontalAlignment = Enum.HorizontalAlignment.SpaceBetween,
	VerticalAlignment = Enum.VerticalAlignment.Center,
	Parent = topBar
})

-- Brand (left)
local brand = New("Frame", {
	BackgroundTransparency = 1,
	Size = UDim2.fromScale(0, 1),
	AutomaticSize = Enum.AutomaticSize.X,
	Parent = topBar
})
local brandLayout = New("UIListLayout", {
	FillDirection = Enum.FillDirection.Horizontal,
	VerticalAlignment = Enum.VerticalAlignment.Center,
	Padding = UDim.new(0, 8),
	Parent = brand
})
local brandLogo = New("ImageLabel", {
	BackgroundTransparency = 1,
	Size = UDim2.fromOffset(36, 36),
	Image = Config.LogoImage ~= "" and Config.LogoImage or "rbxassetid://0",
	Parent = brand
})
addCorner(brandLogo, 10)
local brandText = New("TextLabel", {
	BackgroundTransparency = 1,
	Text = Config.AppName,
	Font = Enum.Font.GothamBold,
	TextSize = 20,
	TextColor3 = Config.Colors.Text,
	AutomaticSize = Enum.AutomaticSize.XY,
	Parent = brand
})

-- Icon pill (right)
local iconPill = New("Frame", {
	Name = "IconPill",
	BackgroundColor3 = Config.Colors.Accent,
	Size = UDim2.fromOffset(250, 40),
	Parent = topBar
})
addCorner(iconPill, 12)
addStroke(iconPill, Color3.fromRGB(0,0,0), 1, 0.9)

local pillLayout = New("UIListLayout", {
	FillDirection = Enum.FillDirection.Horizontal,
	HorizontalAlignment = Enum.HorizontalAlignment.Center,
	VerticalAlignment = Enum.VerticalAlignment.Center,
	Padding = UDim.new(0, 12),
	Parent = iconPill
})

createIconButton(iconPill, "Home",   Config.Icons.Home,   "‚åÇ")
createIconButton(iconPill, "Search", Config.Icons.Search, "üîç")
createIconButton(iconPill, "User",   Config.Icons.User,   "üë§")
createIconButton(iconPill, "Cart",   Config.Icons.Cart,   "üõí")

-- Tabs with Glider (Hello | UI | World)
local tabsBar = New("Frame", {
	Name = "TabsBar",
	BackgroundColor3 = Config.Colors.Surface,
	Size = UDim2.fromOffset(220, 40),
	LayoutOrder = 2,
	Parent = root
})
addCorner(tabsBar, 99)
addStroke(tabsBar, Color3.fromRGB(0,0,0), 1, 0.9)
local tabsLayout = New("UIListLayout", {
	FillDirection = Enum.FillDirection.Horizontal,
	HorizontalAlignment = Enum.HorizontalAlignment.Left,
	VerticalAlignment = Enum.VerticalAlignment.Center,
	Padding = UDim.new(0, 0),
	Parent = tabsBar
})
local function makeTab(name, showNotif)
	local holder = New("Frame", {
		BackgroundTransparency = 1,
		Size = UDim2.fromOffset(73, 40),
		Parent = tabsBar
	})
	local btn = New("TextButton", {
		Name = name,
		Text = name,
		Font = Enum.Font.GothamMedium,
		TextSize = 14,
		TextColor3 = Config.Colors.Text,
		BackgroundTransparency = 1,
		Size = UDim2.fromScale(1,1),
		Parent = holder,
	})
	local notif = New("Frame", {
		Visible = showNotif == true,
		BackgroundColor3 = Config.Colors.Muted,
		Size = UDim2.fromOffset(12, 12),
		Position = UDim2.new(0.7, 0, 0, 6),
		Parent = holder,
	})
	addCorner(notif, 99)
	return holder, btn, notif
end

local glider = New("Frame", {
	Name = "Glider",
	BackgroundColor3 = Config.Colors.Muted,
	Size = UDim2.fromOffset(73, 30),
	Position = UDim2.fromOffset(0, 5),
	ZIndex = 0,
	Parent = tabsBar
})
addCorner(glider, 99)

local TabHolders = {}
local TabButtons = {}
local TabNotifs = {}
do
	local h1, b1, n1 = makeTab("Hello", true)
	local h2, b2, n2 = makeTab("UI", false)
	local h3, b3, n3 = makeTab("World", false)
	table.insert(TabHolders, h1); table.insert(TabButtons, b1); table.insert(TabNotifs, n1)
	table.insert(TabHolders, h2); table.insert(TabButtons, b2); table.insert(TabNotifs, n2)
	table.insert(TabHolders, h3); table.insert(TabButtons, b3); table.insert(TabNotifs, n3)
end

-- Search Input
local searchWrap = New("Frame", {
	Name = "SearchWrap",
	BackgroundTransparency = 1,
	Size = UDim2.new(1, -32, 0, 44),
	LayoutOrder = 3,
	Parent = root
})
local search = New("TextBox", {
	Name = "SearchBox",
	BackgroundColor3 = Config.Colors.Surface,
	PlaceholderText = "Search...",
	Font = Enum.Font.Gotham,
	TextSize = 16,
	Text = "",
	TextColor3 = Config.Colors.Text,
	Size = UDim2.new(1, 0, 1, 0),
	ClearTextOnFocus = false,
	Parent = searchWrap
})
addCorner(search, 12)
addStroke(search, Color3.fromRGB(0,0,0), 1, 0.9)
local searchPadding = New("UIPadding", {
	PaddingLeft = UDim.new(0, 12),
	PaddingRight = UDim.new(0, 12),
	Parent = search
})

-- Content area with pages
local content = New("Frame", {
	Name = "Content",
	BackgroundColor3 = Config.Colors.Surface,
	Size = UDim2.new(1, -32, 1, -270), -- dynamic-ish, leaves room for footer/top
	LayoutOrder = 4,
	Parent = root
})
addCorner(content, 12)
addStroke(content, Color3.fromRGB(0,0,0), 1, 0.9)
local contentPadding = New("UIPadding", {
	PaddingTop = UDim.new(0, 12),
	PaddingBottom = UDim.new(0, 12),
	PaddingLeft = UDim.new(0, 12),
	PaddingRight = UDim.new(0, 12),
	Parent = content
})

local pages = {}
for _, name in ipairs({ "Hello", "UI", "World" }) do
	local page = New("Frame", {
		Name = name.."Page",
		Size = UDim2.fromScale(1,1),
		BackgroundTransparency = 1,
		Parent = content
	})
	local label = New("TextLabel", {
		BackgroundTransparency = 1,
		Text = "Page: "..name,
		Font = Enum.Font.GothamBold,
		TextSize = 22,
		TextColor3 = Config.Colors.Text,
		Size = UDim2.fromOffset(300, 28),
		AnchorPoint = Vector2.new(0,0),
		Position = UDim2.fromOffset(6, 6),
		Parent = page
	})
	pages[name] = page
end

local pageLayout = New("UIPageLayout", {
	FillDirection = Enum.FillDirection.Horizontal,
	Padding = UDim.new(0, 6),
	TweenTime = 0.25,
	EasingDirection = Enum.EasingDirection.Out,
	EasingStyle = Enum.EasingStyle.Quad,
	Parent = content
})

-- Footer (3 columns like Company, Quick Links, Connect)
local footer = New("Frame", {
	Name = "Footer",
	BackgroundTransparency = 1,
	Size = UDim2.new(1, -32, 0, 120),
	LayoutOrder = 5,
	Parent = root
})
local footerContent = New("Frame", {
	BackgroundColor3 = Config.Colors.Surface,
	Size = UDim2.new(1, 0, 1, -30),
	Parent = footer
})
addCorner(footerContent, 12)
addStroke(footerContent, Color3.fromRGB(0,0,0), 1, 0.9)
local fPad = New("UIPadding", {
	PaddingTop = UDim.new(0, 14),
	PaddingLeft = UDim.new(0, 14),
	PaddingRight = UDim.new(0, 14),
	Parent = footerContent
})
local cols = New("UIListLayout", {
	FillDirection = Enum.FillDirection.Horizontal,
	HorizontalAlignment = Enum.HorizontalAlignment.Left,
	VerticalAlignment = Enum.VerticalAlignment.Top,
	Padding = UDim.new(0, 20),
	Parent = footerContent
})

local function makeFooterSection(titleText, links)
	local sec = New("Frame", {
		BackgroundTransparency = 1,
		AutomaticSize = Enum.AutomaticSize.Y,
		Size = UDim2.fromOffset(220, 0),
		Parent = footerContent
	})
	local v = New("UIListLayout", {
		FillDirection = Enum.FillDirection.Vertical,
		Padding = UDim.new(0, 6),
		Parent = sec
	})
	New("TextLabel", {
		BackgroundTransparency = 1,
		Text = titleText,
		Font = Enum.Font.GothamBold,
		TextSize = 16,
		TextColor3 = Config.Colors.Text,
		AutomaticSize = Enum.AutomaticSize.XY,
		Parent = sec
	})
	for _, l in ipairs(links) do
		New("TextButton", {
			BackgroundTransparency = 1,
			Text = l,
			Font = Enum.Font.Gotham,
			TextSize = 14,
			TextXAlignment = Enum.TextXAlignment.Left,
			TextColor3 = Config.Colors.Primary,
			AutomaticSize = Enum.AutomaticSize.XY,
			Parent = sec
		})
	end
	return sec
end

makeFooterSection("Company", { "About Us", "Services", "Contact" })
makeFooterSection("Quick Links", { "Portfolio", "Privacy Policy", "Terms of Service" })
makeFooterSection("Connect", { "hello@company.com", "+1 (555) 123-4567", "Follow Us" })

New("TextLabel", {
	BackgroundTransparency = 1,
	Text = "¬© 2025 Drakthon Hub. All rights reserved.",
	Font = Enum.Font.Gotham,
	TextSize = 12,
	TextColor3 = Config.Colors.Subtle,
	Size = UDim2.new(1, 0, 0, 20),
	Position = UDim2.new(0, 0, 1, -20),
	Parent = footer
})

-- Tab selection logic (with glider move)
local activeIndex = 1
local tabOrder = { "Hello", "UI", "World" }

local function moveGliderTo(idx, animate)
	local holder = TabHolders[idx]
	if not holder then return end
	-- size to match holder width, and X offset within tabsBar
	local x = holder.AbsolutePosition.X - tabsBar.AbsolutePosition.X
	local w = holder.AbsoluteSize.X
	local targetSize = UDim2.fromOffset(w, 30)
	local targetPos = UDim2.fromOffset(x, 5)
	if animate then
		tween(glider, 0.25, { Size = targetSize })
		tween(glider, 0.25, { Position = targetPos })
	else
		glider.Size = targetSize
		glider.Position = targetPos
	end
	-- update button colors
	for i, btn in ipairs(TabButtons) do
		if i == idx then
			btn.TextColor3 = Config.Colors.Primary
		else
			btn.TextColor3 = Config.Colors.Text
		end
	end
end

local function selectTab(idx, animate)
	activeIndex = idx
	local name = tabOrder[idx]
	local page = pages[name]
	if page then
		pageLayout:JumpTo(page)
	end
	moveGliderTo(idx, animate)
	-- Example: clear notification on first select
	local notif = TabNotifs[idx]
	if notif then notif.BackgroundColor3 = Config.Colors.Primary; task.delay(0.05, function() notif.Visible = false end) end
end

for i, btn in ipairs(TabButtons) do
	btn.MouseButton1Click:Connect(function()
		selectTab(i, true)
	end)
end

-- Initialize after layout is measured
task.defer(function()
	moveGliderTo(1, false)
	selectTab(1, false)
end)

-- Search behavior
search.FocusLost:Connect(function(enterPressed)
	if enterPressed then
		-- ÿ∂ÿπ ŸÖŸÜÿ∑ŸÇ ÿßŸÑÿ®ÿ≠ÿ´ ÿßŸÑÿÆÿßÿµ ÿ®ŸÉ ŸáŸÜÿß
		print("[DrakthonHub] Search query:", search.Text)
	end
end)

-- Show splash at start then reveal UI
showSplash(function()
	-- you can do post-init actions here
end)
