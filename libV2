--[[
    Drakthon Hub UI Library
    Modern & Professional Design
    No Loading Screen - Direct Start
]]

local Library = {}

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Theme
local Theme = {
    Background = Color3.fromRGB(16, 16, 20),
    TopBar = Color3.fromRGB(20, 20, 25),
    Surface = Color3.fromRGB(24, 24, 30),
    Hover = Color3.fromRGB(30, 30, 38),
    Primary = Color3.fromRGB(147, 51, 234),
    Text = Color3.fromRGB(255, 255, 255),
    TextDark = Color3.fromRGB(160, 160, 170),
    Border = Color3.fromRGB(40, 40, 50),
}

-- Utility
local function Tween(obj, props, time)
    TweenService:Create(obj, TweenInfo.new(time or 0.2, Enum.EasingStyle.Quad), props):Play()
end

local function Round(obj, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 6)
    corner.Parent = obj
    return corner
end

local function Ripple(button)
    button.ClipsDescendants = true
    button.MouseButton1Down:Connect(function()
        local circle = Instance.new("Frame")
        circle.AnchorPoint = Vector2.new(0.5, 0.5)
        circle.Position = UDim2.new(0.5, 0, 0.5, 0)
        circle.Size = UDim2.new(0, 0, 0, 0)
        circle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        circle.BackgroundTransparency = 0.8
        circle.BorderSizePixel = 0
        circle.Parent = button
        Round(circle, 999)
        
        local size = math.max(button.AbsoluteSize.X, button.AbsoluteSize.Y) * 2
        Tween(circle, {Size = UDim2.new(0, size, 0, size), BackgroundTransparency = 1}, 0.5)
        task.delay(0.5, function() circle:Destroy() end)
    end)
end

-- Create Window
function Library:CreateWindow(title)
    -- ScreenGui
    local Gui = Instance.new("ScreenGui")
    Gui.Name = "DrakthonHub"
    Gui.ResetOnSpawn = false
    Gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    if gethui then
        Gui.Parent = gethui()
    elseif syn then
        syn.protect_gui(Gui)
        Gui.Parent = game:GetService("CoreGui")
    else
        Gui.Parent = game:GetService("CoreGui")
    end

    -- Main Frame
    local Main = Instance.new("Frame")
    Main.Name = "Main"
    Main.AnchorPoint = Vector2.new(0.5, 0.5)
    Main.Position = UDim2.new(0.5, 0, 0.5, 0)
    Main.Size = UDim2.new(0, 550, 0, 400)
    Main.BackgroundColor3 = Theme.Background
    Main.BorderSizePixel = 0
    Main.Parent = Gui
    Round(Main, 10)

    -- Shadow
    local Shadow = Instance.new("ImageLabel")
    Shadow.Name = "Shadow"
    Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    Shadow.Position = UDim2.new(0.5, 0, 0.5, 6)
    Shadow.Size = UDim2.new(1, 30, 1, 30)
    Shadow.BackgroundTransparency = 1
    Shadow.Image = "rbxassetid://6014261993"
    Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    Shadow.ImageTransparency = 0.6
    Shadow.ScaleType = Enum.ScaleType.Slice
    Shadow.SliceCenter = Rect.new(99, 99, 99, 99)
    Shadow.ZIndex = 0
    Shadow.Parent = Main

    -- Responsive
    local camera = workspace.CurrentCamera
    local function updateSize()
        local size = camera.ViewportSize
        if size.X < 600 then
            Main.Size = UDim2.new(0.95, 0, 0.9, 0)
        else
            Main.Size = UDim2.new(0, 550, 0, 400)
        end
    end
    updateSize()
    camera:GetPropertyChangedSignal("ViewportSize"):Connect(updateSize)

    -- Top Bar
    local TopBar = Instance.new("Frame")
    TopBar.Name = "TopBar"
    TopBar.Size = UDim2.new(1, 0, 0, 45)
    TopBar.BackgroundColor3 = Theme.TopBar
    TopBar.BorderSizePixel = 0
    TopBar.Parent = Main
    Round(TopBar, 10)

    local TopCover = Instance.new("Frame")
    TopCover.Size = UDim2.new(1, 0, 0, 10)
    TopCover.Position = UDim2.new(0, 0, 1, -10)
    TopCover.BackgroundColor3 = Theme.TopBar
    TopCover.BorderSizePixel = 0
    TopCover.Parent = TopBar

    -- Title
    local Title = Instance.new("TextLabel")
    Title.Position = UDim2.new(0, 15, 0, 0)
    Title.Size = UDim2.new(1, -70, 1, 0)
    Title.BackgroundTransparency = 1
    Title.Text = title or "Drakthon Hub"
    Title.Font = Enum.Font.GothamBold
    Title.TextSize = 16
    Title.TextColor3 = Theme.Text
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = TopBar

    -- Close Button
    local Close = Instance.new("TextButton")
    Close.AnchorPoint = Vector2.new(1, 0.5)
    Close.Position = UDim2.new(1, -10, 0.5, 0)
    Close.Size = UDim2.new(0, 30, 0, 30)
    Close.BackgroundColor3 = Theme.Surface
    Close.Text = "Ã—"
    Close.Font = Enum.Font.GothamBold
    Close.TextSize = 18
    Close.TextColor3 = Theme.Text
    Close.BorderSizePixel = 0
    Close.Parent = TopBar
    Round(Close, 6)
    Ripple(Close)

    Close.MouseEnter:Connect(function()
        Tween(Close, {BackgroundColor3 = Color3.fromRGB(220, 50, 50)})
    end)
    Close.MouseLeave:Connect(function()
        Tween(Close, {BackgroundColor3 = Theme.Surface})
    end)
    Close.MouseButton1Click:Connect(function()
        Tween(Main, {Size = UDim2.new(0, 0, 0, 0)}, 0.3)
        task.wait(0.3)
        Gui:Destroy()
    end)

    -- Make Draggable
    local dragging, dragInput, dragStart, startPos
    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = Main.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    TopBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            Main.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)

    -- Tab Container
    local TabBar = Instance.new("Frame")
    TabBar.Name = "TabBar"
    TabBar.Position = UDim2.new(0, 10, 0, 55)
    TabBar.Size = UDim2.new(1, -20, 0, 35)
    TabBar.BackgroundColor3 = Theme.Surface
    TabBar.BorderSizePixel = 0
    TabBar.Parent = Main
    Round(TabBar, 8)

    local TabList = Instance.new("Frame")
    TabList.Size = UDim2.new(1, -10, 1, -10)
    TabList.Position = UDim2.new(0, 5, 0, 5)
    TabList.BackgroundTransparency = 1
    TabList.Parent = TabBar

    local TabLayout = Instance.new("UIListLayout")
    TabLayout.FillDirection = Enum.FillDirection.Horizontal
    TabLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    TabLayout.Padding = UDim.new(0, 6)
    TabLayout.Parent = TabList

    -- Content Area
    local Content = Instance.new("Frame")
    Content.Name = "Content"
    Content.Position = UDim2.new(0, 10, 0, 100)
    Content.Size = UDim2.new(1, -20, 1, -110)
    Content.BackgroundColor3 = Theme.Surface
    Content.BorderSizePixel = 0
    Content.Parent = Main
    Round(Content, 8)

    local Pages = Instance.new("Frame")
    Pages.Size = UDim2.new(1, 0, 1, 0)
    Pages.BackgroundTransparency = 1
    Pages.Parent = Content

    -- Window Object
    local Window = {
        Tabs = {},
        CurrentTab = nil,
    }

    -- Create Tab
    function Window:CreateTab(name)
        -- Tab Button
        local TabBtn = Instance.new("TextButton")
        TabBtn.Name = name
        TabBtn.Size = UDim2.new(0, 80, 1, 0)
        TabBtn.BackgroundColor3 = Theme.Hover
        TabBtn.Text = name
        TabBtn.Font = Enum.Font.GothamSemibold
        TabBtn.TextSize = 13
        TabBtn.TextColor3 = Theme.TextDark
        TabBtn.BorderSizePixel = 0
        TabBtn.Parent = TabList
        Round(TabBtn, 6)
        Ripple(TabBtn)

        -- Tab Page
        local Page = Instance.new("ScrollingFrame")
        Page.Name = name
        Page.Size = UDim2.new(1, -20, 1, -20)
        Page.Position = UDim2.new(0, 10, 0, 10)
        Page.BackgroundTransparency = 1
        Page.BorderSizePixel = 0
        Page.ScrollBarThickness = 4
        Page.ScrollBarImageColor3 = Theme.Primary
        Page.CanvasSize = UDim2.new(0, 0, 0, 0)
        Page.Visible = false
        Page.Parent = Pages

        local PageList = Instance.new("UIListLayout")
        PageList.SortOrder = Enum.SortOrder.LayoutOrder
        PageList.Padding = UDim.new(0, 8)
        PageList.Parent = Page

        PageList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            Page.CanvasSize = UDim2.new(0, 0, 0, PageList.AbsoluteContentSize.Y + 10)
        end)

        -- Tab Click
        TabBtn.MouseButton1Click:Connect(function()
            for _, tab in pairs(Window.Tabs) do
                tab.Page.Visible = false
                tab.Button.BackgroundColor3 = Theme.Hover
                tab.Button.TextColor3 = Theme.TextDark
            end
            Page.Visible = true
            TabBtn.BackgroundColor3 = Theme.Primary
            TabBtn.TextColor3 = Theme.Text
            Window.CurrentTab = name
        end)

        TabBtn.MouseEnter:Connect(function()
            if Window.CurrentTab ~= name then
                Tween(TabBtn, {BackgroundColor3 = Theme.Surface})
            end
        end)

        TabBtn.MouseLeave:Connect(function()
            if Window.CurrentTab ~= name then
                Tween(TabBtn, {BackgroundColor3 = Theme.Hover})
            end
        end)

        local Tab = {
            Button = TabBtn,
            Page = Page,
        }

        Window.Tabs[name] = Tab

        if not Window.CurrentTab then
            TabBtn.MouseButton1Click()
        end

        -- Tab Elements
        local Elements = {}

        -- Section
        function Elements:Section(text)
            local Section = Instance.new("Frame")
            Section.Size = UDim2.new(1, 0, 0, 30)
            Section.BackgroundTransparency = 1
            Section.Parent = Page

            local Line1 = Instance.new("Frame")
            Line1.Size = UDim2.new(0.35, 0, 0, 1)
            Line1.Position = UDim2.new(0, 0, 0.5, 0)
            Line1.BackgroundColor3 = Theme.Primary
            Line1.BorderSizePixel = 0
            Line1.Parent = Section

            local Text = Instance.new("TextLabel")
            Text.AnchorPoint = Vector2.new(0.5, 0.5)
            Text.Position = UDim2.new(0.5, 0, 0.5, 0)
            Text.Size = UDim2.new(0.25, 0, 1, 0)
            Text.BackgroundTransparency = 1
            Text.Text = text
            Text.Font = Enum.Font.GothamBold
            Text.TextSize = 14
            Text.TextColor3 = Theme.Primary
            Text.Parent = Section

            local Line2 = Instance.new("Frame")
            Line2.AnchorPoint = Vector2.new(1, 0)
            Line2.Size = UDim2.new(0.35, 0, 0, 1)
            Line2.Position = UDim2.new(1, 0, 0.5, 0)
            Line2.BackgroundColor3 = Theme.Primary
            Line2.BorderSizePixel = 0
            Line2.Parent = Section
        end

        -- Label
        function Elements:Label(text)
            local Label = Instance.new("TextLabel")
            Label.Size = UDim2.new(1, 0, 0, 30)
            Label.BackgroundColor3 = Theme.Hover
            Label.Text = text
            Label.Font = Enum.Font.Gotham
            Label.TextSize = 13
            Label.TextColor3 = Theme.Text
            Label.BorderSizePixel = 0
            Label.Parent = Page
            Round(Label, 6)

            return {
                SetText = function(self, newText)
                    Label.Text = newText
                end
            }
        end

        -- Button
        function Elements:Button(text, callback)
            local Btn = Instance.new("TextButton")
            Btn.Size = UDim2.new(1, 0, 0, 35)
            Btn.BackgroundColor3 = Theme.Hover
            Btn.Text = text
            Btn.Font = Enum.Font.GothamSemibold
            Btn.TextSize = 14
            Btn.TextColor3 = Theme.Text
            Btn.BorderSizePixel = 0
            Btn.Parent = Page
            Round(Btn, 6)
            Ripple(Btn)

            Btn.MouseEnter:Connect(function()
                Tween(Btn, {BackgroundColor3 = Theme.Primary})
            end)

            Btn.MouseLeave:Connect(function()
                Tween(Btn, {BackgroundColor3 = Theme.Hover})
            end)

            Btn.MouseButton1Click:Connect(function()
                Tween(Btn, {Size = UDim2.new(1, 0, 0, 33)}, 0.1)
                task.wait(0.1)
                Tween(Btn, {Size = UDim2.new(1, 0, 0, 35)}, 0.1)
                pcall(callback)
            end)
        end

        -- Toggle
        function Elements:Toggle(text, default, callback)
            local toggled = default or false

            local Frame = Instance.new("Frame")
            Frame.Size = UDim2.new(1, 0, 0, 40)
            Frame.BackgroundColor3 = Theme.Hover
            Frame.BorderSizePixel = 0
            Frame.Parent = Page
            Round(Frame, 6)

            local Label = Instance.new("TextLabel")
            Label.Size = UDim2.new(1, -60, 1, 0)
            Label.Position = UDim2.new(0, 12, 0, 0)
            Label.BackgroundTransparency = 1
            Label.Text = text
            Label.Font = Enum.Font.Gotham
            Label.TextSize = 13
            Label.TextColor3 = Theme.Text
            Label.TextXAlignment = Enum.TextXAlignment.Left
            Label.Parent = Frame

            local Toggle = Instance.new("TextButton")
            Toggle.AnchorPoint = Vector2.new(1, 0.5)
            Toggle.Position = UDim2.new(1, -12, 0.5, 0)
            Toggle.Size = UDim2.new(0, 40, 0, 20)
            Toggle.BackgroundColor3 = Theme.Surface
            Toggle.Text = ""
            Toggle.BorderSizePixel = 0
            Toggle.Parent = Frame
            Round(Toggle, 10)

            local Circle = Instance.new("Frame")
            Circle.Position = UDim2.new(0, 2, 0.5, -8)
            Circle.Size = UDim2.new(0, 16, 0, 16)
            Circle.BackgroundColor3 = Theme.TextDark
            Circle.BorderSizePixel = 0
            Circle.Parent = Toggle
            Round(Circle, 8)

            local function Update()
                if toggled then
                    Tween(Toggle, {BackgroundColor3 = Theme.Primary})
                    Tween(Circle, {Position = UDim2.new(1, -18, 0.5, -8), BackgroundColor3 = Theme.Text})
                else
                    Tween(Toggle, {BackgroundColor3 = Theme.Surface})
                    Tween(Circle, {Position = UDim2.new(0, 2, 0.5, -8), BackgroundColor3 = Theme.TextDark})
                end
                pcall(callback, toggled)
            end

            Toggle.MouseButton1Click:Connect(function()
                toggled = not toggled
                Update()
            end)

            if default then Update() end

            return {
                Set = function(self, value)
                    toggled = value
                    Update()
                end
            }
        end

        -- Slider
        function Elements:Slider(text, min, max, default, callback)
            local value = default or min

            local Frame = Instance.new("Frame")
            Frame.Size = UDim2.new(1, 0, 0, 50)
            Frame.BackgroundColor3 = Theme.Hover
            Frame.BorderSizePixel = 0
            Frame.Parent = Page
            Round(Frame, 6)

            local Label = Instance.new("TextLabel")
            Label.Size = UDim2.new(1, -80, 0, 20)
            Label.Position = UDim2.new(0, 12, 0, 8)
            Label.BackgroundTransparency = 1
            Label.Text = text
            Label.Font = Enum.Font.Gotham
            Label.TextSize = 13
            Label.TextColor3 = Theme.Text
            Label.TextXAlignment = Enum.TextXAlignment.Left
            Label.Parent = Frame

            local Value = Instance.new("TextLabel")
            Value.AnchorPoint = Vector2.new(1, 0)
            Value.Size = UDim2.new(0, 60, 0, 20)
            Value.Position = UDim2.new(1, -12, 0, 8)
            Value.BackgroundTransparency = 1
            Value.Text = tostring(value)
            Value.Font = Enum.Font.GothamBold
            Value.TextSize = 13
            Value.TextColor3 = Theme.Primary
            Value.TextXAlignment = Enum.TextXAlignment.Right
            Value.Parent = Frame

            local SliderBack = Instance.new("Frame")
            SliderBack.Position = UDim2.new(0, 12, 0, 32)
            SliderBack.Size = UDim2.new(1, -24, 0, 6)
            SliderBack.BackgroundColor3 = Theme.Surface
            SliderBack.BorderSizePixel = 0
            SliderBack.Parent = Frame
            Round(SliderBack, 3)

            local SliderFill = Instance.new("Frame")
            SliderFill.Size = UDim2.new(0.5, 0, 1, 0)
            SliderFill.BackgroundColor3 = Theme.Primary
            SliderFill.BorderSizePixel = 0
            SliderFill.Parent = SliderBack
            Round(SliderFill, 3)

            local dragging = false

            local function Update(input)
                local pos = math.clamp((input.Position.X - SliderBack.AbsolutePosition.X) / SliderBack.AbsoluteSize.X, 0, 1)
                value = math.floor(min + (max - min) * pos)
                Value.Text = tostring(value)
                SliderFill.Size = UDim2.new(pos, 0, 1, 0)
                pcall(callback, value)
            end

            SliderBack.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    Update(input)
                end
            end)

            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    Update(input)
                end
            end)

            SliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)

            return {
                Set = function(self, newValue)
                    value = newValue
                    Value.Text = tostring(value)
                    SliderFill.Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
                end
            }
        end

        -- Textbox
        function Elements:Textbox(text, placeholder, callback)
            local Frame = Instance.new("Frame")
            Frame.Size = UDim2.new(1, 0, 0, 60)
            Frame.BackgroundColor3 = Theme.Hover
            Frame.BorderSizePixel = 0
            Frame.Parent = Page
            Round(Frame, 6)

            local Label = Instance.new("TextLabel")
            Label.Size = UDim2.new(1, -24, 0, 18)
            Label.Position = UDim2.new(0, 12, 0, 8)
            Label.BackgroundTransparency = 1
            Label.Text = text
            Label.Font = Enum.Font.Gotham
            Label.TextSize = 12
            Label.TextColor3 = Theme.TextDark
            Label.TextXAlignment = Enum.TextXAlignment.Left
            Label.Parent = Frame

            local Box = Instance.new("TextBox")
            Box.Position = UDim2.new(0, 12, 0, 30)
            Box.Size = UDim2.new(1, -24, 0, 22)
            Box.BackgroundColor3 = Theme.Surface
            Box.BorderSizePixel = 0
            Box.Font = Enum.Font.Gotham
            Box.TextSize = 12
            Box.TextColor3 = Theme.Text
            Box.PlaceholderText = placeholder
            Box.PlaceholderColor3 = Theme.TextDark
            Box.Text = ""
            Box.ClearTextOnFocus = false
            Box.Parent = Frame
            Round(Box, 4)

            local Padding = Instance.new("UIPadding")
            Padding.PaddingLeft = UDim.new(0, 8)
            Padding.PaddingRight = UDim.new(0, 8)
            Padding.Parent = Box

            Box.FocusLost:Connect(function(enter)
                if enter then
                    pcall(callback, Box.Text)
                end
            end)

            return {
                Set = function(self, newText)
                    Box.Text = newText
                end
            }
        end

        -- Dropdown
        function Elements:Dropdown(text, options, callback)
            local selected = options[1]
            local open = false

            local Frame = Instance.new("Frame")
            Frame.Size = UDim2.new(1, 0, 0, 40)
            Frame.BackgroundColor3 = Theme.Hover
            Frame.BorderSizePixel = 0
            Frame.ClipsDescendants = true
            Frame.Parent = Page
            Round(Frame, 6)

            local Btn = Instance.new("TextButton")
            Btn.Size = UDim2.new(1, 0, 0, 40)
            Btn.BackgroundTransparency = 1
            Btn.Text = ""
            Btn.Parent = Frame

            local Label = Instance.new("TextLabel")
            Label.Size = UDim2.new(1, -40, 1, 0)
            Label.Position = UDim2.new(0, 12, 0, 0)
            Label.BackgroundTransparency = 1
            Label.Text = text .. ": " .. selected
            Label.Font = Enum.Font.Gotham
            Label.TextSize = 13
            Label.TextColor3 = Theme.Text
            Label.TextXAlignment = Enum.TextXAlignment.Left
            Label.Parent = Btn

            local Arrow = Instance.new("TextLabel")
            Arrow.AnchorPoint = Vector2.new(1, 0.5)
            Arrow.Position = UDim2.new(1, -12, 0.5, 0)
            Arrow.Size = UDim2.new(0, 16, 0, 16)
            Arrow.BackgroundTransparency = 1
            Arrow.Text = "â–¼"
            Arrow.Font = Enum.Font.Gotham
            Arrow.TextSize = 10
            Arrow.TextColor3 = Theme.Primary
            Arrow.Parent = Btn

            local List = Instance.new("Frame")
            List.Position = UDim2.new(0, 8, 0, 40)
            List.Size = UDim2.new(1, -16, 0, 0)
            List.BackgroundTransparency = 1
            List.Parent = Frame

            local ListLayout = Instance.new("UIListLayout")
            ListLayout.Padding = UDim.new(0, 4)
            ListLayout.Parent = List

            for _, option in ipairs(options) do
                local OptBtn = Instance.new("TextButton")
                OptBtn.Size = UDim2.new(1, 0, 0, 30)
                OptBtn.BackgroundColor3 = Theme.Surface
                OptBtn.Text = option
                OptBtn.Font = Enum.Font.Gotham
                OptBtn.TextSize = 12
                OptBtn.TextColor3 = Theme.Text
                OptBtn.BorderSizePixel = 0
                OptBtn.Parent = List
                Round(OptBtn, 4)
                Ripple(OptBtn)

                OptBtn.MouseEnter:Connect(function()
                    Tween(OptBtn, {BackgroundColor3 = Theme.Primary})
                end)

                OptBtn.MouseLeave:Connect(function()
                    Tween(OptBtn, {BackgroundColor3 = Theme.Surface})
                end)

                OptBtn.MouseButton1Click:Connect(function()
                    selected = option
                    Label.Text = text .. ": " .. option
                    open = false
                    Tween(Frame, {Size = UDim2.new(1, 0, 0, 40)})
                    Tween(Arrow, {Rotation = 0})
                    pcall(callback, option)
                end)
            end

            Btn.MouseButton1Click:Connect(function()
                open = not open
                if open then
                    local height = math.min(#options * 34, 140)
                    Tween(Frame, {Size = UDim2.new(1, 0, 0, 40 + height + 8)})
                    Tween(List, {Size = UDim2.new(1, -16, 0, height)})
                    Tween(Arrow, {Rotation = 180})
                else
                    Tween(Frame, {Size = UDim2.new(1, 0, 0, 40)})
                    Tween(List, {Size = UDim2.new(1, -16, 0, 0)})
                    Tween(Arrow, {Rotation = 0})
                end
            end)

            return {
                Set = function(self, value)
                    selected = value
                    Label.Text = text .. ": " .. value
                end
            }
        end

        return Elements
    end

    return Window
end

-- Notification
function Library:Notify(title, text, duration)
    local Gui = Instance.new("ScreenGui")
    Gui.Name = "Notification"
    Gui.ResetOnSpawn = false
    Gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    if gethui then
        Gui.Parent = gethui()
    else
        Gui.Parent = game:GetService("CoreGui")
    end

    local Notif = Instance.new("Frame")
    Notif.AnchorPoint = Vector2.new(1, 0)
    Notif.Position = UDim2.new(1, 10, 0, 10)
    Notif.Size = UDim2.new(0, 300, 0, 70)
    Notif.BackgroundColor3 = Theme.Surface
    Notif.BorderSizePixel = 0
    Notif.Parent = Gui
    Round(Notif, 8)

    local Bar = Instance.new("Frame")
    Bar.Size = UDim2.new(0, 3, 1, 0)
    Bar.BackgroundColor3 = Theme.Primary
    Bar.BorderSizePixel = 0
    Bar.Parent = Notif

    local Title = Instance.new("TextLabel")
    Title.Position = UDim2.new(0, 15, 0, 10)
    Title.Size = UDim2.new(1, -30, 0, 20)
    Title.BackgroundTransparency = 1
    Title.Text = title
    Title.Font = Enum.Font.GothamBold
    Title.TextSize = 14
    Title.TextColor3 = Theme.Text
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = Notif

    local Text = Instance.new("TextLabel")
    Text.Position = UDim2.new(0, 15, 0, 35)
    Text.Size = UDim2.new(1, -30, 0, 25)
    Text.BackgroundTransparency = 1
    Text.Text = text
    Text.Font = Enum.Font.Gotham
    Text.TextSize = 12
    Text.TextColor3 = Theme.TextDark
    Text.TextXAlignment = Enum.TextXAlignment.Left
    Text.TextWrapped = true
    Text.Parent = Notif

    Tween(Notif, {Position = UDim2.new(1, -10, 0, 10)}, 0.4)

    task.delay(duration or 3, function()
        Tween(Notif, {Position = UDim2.new(1, 10, 0, 10)}, 0.3)
        task.wait(0.3)
        Gui:Destroy()
    end)
end

return Library
