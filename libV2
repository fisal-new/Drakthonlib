--[[
    ╔══════════════════════════════════════╗
    ║      DRAKTHON HUB UI LIBRARY        ║
    ║   Responsive & Smooth UI System     ║
    ╚══════════════════════════════════════╝
]]

local DrakthonHub = {}
DrakthonHub.__index = DrakthonHub

-- ═══════════════════════════════════════════════════════════════
-- 🎨 THEME & COLORS
-- ═══════════════════════════════════════════════════════════════
local Theme = {
    Primary = Color3.fromRGB(245, 73, 144),
    Secondary = Color3.fromRGB(24, 94, 224),
    Background = Color3.fromRGB(20, 20, 30),
    Surface = Color3.fromRGB(30, 30, 45),
    Text = Color3.fromRGB(255, 255, 255),
    TextSecondary = Color3.fromRGB(200, 200, 200),
    Accent = Color3.fromRGB(230, 238, 249),
    Shadow = Color3.fromRGB(0, 0, 0),
}

-- ═══════════════════════════════════════════════════════════════
-- 🛠️ UTILITY FUNCTIONS
-- ═══════════════════════════════════════════════════════════════
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local function CreateTween(instance, properties, duration, style, direction)
    local tweenInfo = TweenInfo.new(
        duration or 0.3,
        style or Enum.EasingStyle.Quad,
        direction or Enum.EasingDirection.Out
    )
    return TweenService:Create(instance, tweenInfo, properties)
end

local function GetScreenSize()
    local viewportSize = workspace.CurrentCamera.ViewportSize
    return viewportSize
end

local function IsMobile()
    return UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled
end

local function IsTablet()
    local screenSize = GetScreenSize()
    return IsMobile() and screenSize.X > 600
end

-- ═══════════════════════════════════════════════════════════════
-- 🎬 LOGO ANIMATION SYSTEM
-- ═══════════════════════════════════════════════════════════════
function DrakthonHub:CreateLogo(parent)
    local LogoFrame = Instance.new("Frame")
    LogoFrame.Name = "DrakthonLogo"
    LogoFrame.Size = UDim2.new(1, 0, 1, 0)
    LogoFrame.Position = UDim2.new(0, 0, 0, 0)
    LogoFrame.BackgroundColor3 = Theme.Background
    LogoFrame.BorderSizePixel = 0
    LogoFrame.ZIndex = 1000
    LogoFrame.Parent = parent

    -- Gradient Background
    local Gradient = Instance.new("UIGradient")
    Gradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Theme.Background),
        ColorSequenceKeypoint.new(0.5, Theme.Surface),
        ColorSequenceKeypoint.new(1, Theme.Background)
    }
    Gradient.Rotation = 45
    Gradient.Parent = LogoFrame

    -- Logo Container
    local LogoContainer = Instance.new("Frame")
    LogoContainer.Name = "Container"
    LogoContainer.AnchorPoint = Vector2.new(0.5, 0.5)
    LogoContainer.Position = UDim2.new(0.5, 0, 0.5, 0)
    LogoContainer.Size = UDim2.new(0, 300, 0, 150)
    LogoContainer.BackgroundTransparency = 1
    LogoContainer.Parent = LogoFrame

    -- Responsive sizing
    local UIScale = Instance.new("UIScale")
    UIScale.Parent = LogoContainer
    
    local function updateScale()
        local screenSize = GetScreenSize()
        if screenSize.X < 500 then
            UIScale.Scale = 0.6
        elseif screenSize.X < 800 then
            UIScale.Scale = 0.8
        else
            UIScale.Scale = 1
        end
    end
    updateScale()
    workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(updateScale)

    -- Logo Text
    local LogoText = Instance.new("TextLabel")
    LogoText.Name = "LogoText"
    LogoText.Size = UDim2.new(1, 0, 0.5, 0)
    LogoText.Position = UDim2.new(0, 0, 0.2, 0)
    LogoText.BackgroundTransparency = 1
    LogoText.Text = "DRAKTHON"
    LogoText.Font = Enum.Font.GothamBold
    LogoText.TextSize = 48
    LogoText.TextColor3 = Theme.Text
    LogoText.TextTransparency = 1
    LogoText.Parent = LogoContainer

    -- Subtitle
    local Subtitle = Instance.new("TextLabel")
    Subtitle.Name = "Subtitle"
    Subtitle.Size = UDim2.new(1, 0, 0.3, 0)
    Subtitle.Position = UDim2.new(0, 0, 0.6, 0)
    Subtitle.BackgroundTransparency = 1
    Subtitle.Text = "HUB"
    Subtitle.Font = Enum.Font.Gotham
    Subtitle.TextSize = 24
    Subtitle.TextColor3 = Theme.Primary
    Subtitle.TextTransparency = 1
    Subtitle.Parent = LogoContainer

    -- Animated Circle
    local Circle = Instance.new("Frame")
    Circle.Name = "Circle"
    Circle.AnchorPoint = Vector2.new(0.5, 0.5)
    Circle.Position = UDim2.new(0.5, 0, 0, -30)
    Circle.Size = UDim2.new(0, 60, 0, 60)
    Circle.BackgroundColor3 = Theme.Primary
    Circle.BorderSizePixel = 0
    Circle.BackgroundTransparency = 1
    Circle.Parent = LogoContainer

    local CircleCorner = Instance.new("UICorner")
    CircleCorner.CornerRadius = UDim.new(1, 0)
    CircleCorner.Parent = Circle

    local CircleGradient = Instance.new("UIGradient")
    CircleGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Theme.Primary),
        ColorSequenceKeypoint.new(1, Theme.Secondary)
    }
    CircleGradient.Parent = Circle

    -- Loading Bar
    local LoadingBarBG = Instance.new("Frame")
    LoadingBarBG.Name = "LoadingBarBG"
    LoadingBarBG.AnchorPoint = Vector2.new(0.5, 0)
    LoadingBarBG.Position = UDim2.new(0.5, 0, 1, 20)
    LoadingBarBG.Size = UDim2.new(0.8, 0, 0, 4)
    LoadingBarBG.BackgroundColor3 = Theme.Surface
    LoadingBarBG.BorderSizePixel = 0
    LoadingBarBG.Parent = LogoContainer

    local LoadingBarCorner = Instance.new("UICorner")
    LoadingBarCorner.CornerRadius = UDim.new(1, 0)
    LoadingBarCorner.Parent = LoadingBarBG

    local LoadingBar = Instance.new("Frame")
    LoadingBar.Name = "LoadingBar"
    LoadingBar.Size = UDim2.new(0, 0, 1, 0)
    LoadingBar.BackgroundColor3 = Theme.Primary
    LoadingBar.BorderSizePixel = 0
    LoadingBar.Parent = LoadingBarBG

    local LoadingBarCorner2 = Instance.new("UICorner")
    LoadingBarCorner2.CornerRadius = UDim.new(1, 0)
    LoadingBarCorner2.Parent = LoadingBar

    -- Animation Sequence
    task.spawn(function()
        -- Circle fade in + scale
        CreateTween(Circle, {BackgroundTransparency = 0}, 0.5):Play()
        CreateTween(Circle, {Size = UDim2.new(0, 60, 0, 60)}, 0.5, Enum.EasingStyle.Back):Play()
        task.wait(0.3)
        
        -- Text fade in
        CreateTween(LogoText, {TextTransparency = 0}, 0.5):Play()
        task.wait(0.2)
        CreateTween(Subtitle, {TextTransparency = 0}, 0.5):Play()
        
        -- Loading bar
        task.wait(0.3)
        CreateTween(LoadingBar, {Size = UDim2.new(1, 0, 1, 0)}, 1.5, Enum.EasingStyle.Quad):Play()
        
        -- Circle rotate animation
        local rotationTween
        task.spawn(function()
            while LogoFrame.Parent do
                CircleGradient.Rotation = (CircleGradient.Rotation + 2) % 360
                task.wait(0.03)
            end
        end)
        
        task.wait(2)
        
        -- Fade out
        CreateTween(LogoFrame, {BackgroundTransparency = 1}, 0.5):Play()
        CreateTween(Circle, {BackgroundTransparency = 1}, 0.5):Play()
        CreateTween(LogoText, {TextTransparency = 1}, 0.5):Play()
        CreateTween(Subtitle, {TextTransparency = 1}, 0.5):Play()
        CreateTween(LoadingBarBG, {BackgroundTransparency = 1}, 0.5):Play()
        CreateTween(LoadingBar, {BackgroundTransparency = 1}, 0.5):Play()
        
        task.wait(0.6)
        LogoFrame:Destroy()
    end)

    return LogoFrame
end

-- ═══════════════════════════════════════════════════════════════
-- 📱 MAIN UI WINDOW
-- ═══════════════════════════════════════════════════════════════
function DrakthonHub:CreateWindow(config)
    config = config or {}
    config.Title = config.Title or "Drakthon Hub"
    config.Size = config.Size or UDim2.new(0, 550, 0, 400)
    
    -- Create ScreenGui
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "DrakthonHub"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ScreenGui.Parent = game:GetService("CoreGui")

    -- Show Logo First
    self:CreateLogo(ScreenGui)

    -- Main Window (will appear after logo)
    local MainWindow = Instance.new("Frame")
    MainWindow.Name = "MainWindow"
    MainWindow.AnchorPoint = Vector2.new(0.5, 0.5)
    MainWindow.Position = UDim2.new(0.5, 0, 0.5, 0)
    MainWindow.Size = config.Size
    MainWindow.BackgroundColor3 = Theme.Background
    MainWindow.BorderSizePixel = 0
    MainWindow.BackgroundTransparency = 1
    MainWindow.Parent = ScreenGui

    task.wait(3) -- Wait for logo animation

    -- Window Corner
    local WindowCorner = Instance.new("UICorner")
    WindowCorner.CornerRadius = UDim.new(0, 12)
    WindowCorner.Parent = MainWindow

    -- Window Shadow
    local Shadow = Instance.new("ImageLabel")
    Shadow.Name = "Shadow"
    Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    Shadow.Size = UDim2.new(1, 30, 1, 30)
    Shadow.BackgroundTransparency = 1
    Shadow.Image = "rbxassetid://6014261993"
    Shadow.ImageColor3 = Theme.Shadow
    Shadow.ImageTransparency = 0.5
    Shadow.ScaleType = Enum.ScaleType.Slice
    Shadow.SliceCenter = Rect.new(99, 99, 99, 99)
    Shadow.ZIndex = 0
    Shadow.Parent = MainWindow

    -- Responsive Scaling
    local function updateWindowScale()
        local screenSize = GetScreenSize()
        if screenSize.X < 500 then
            MainWindow.Size = UDim2.new(0.95, 0, 0.85, 0)
        elseif screenSize.X < 800 then
            MainWindow.Size = UDim2.new(0.8, 0, 0.75, 0)
        else
            MainWindow.Size = config.Size
        end
    end
    updateWindowScale()
    workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(updateWindowScale)

    -- Window appear animation
    CreateTween(MainWindow, {BackgroundTransparency = 0}, 0.5):Play()
    CreateTween(MainWindow, {Size = MainWindow.Size}, 0.5, Enum.EasingStyle.Back):Play()

    -- Create Window Components
    local Window = {
        GUI = ScreenGui,
        Main = MainWindow,
        Tabs = {},
        CurrentTab = nil
    }

    -- Top Bar
    self:CreateTopBar(MainWindow, config.Title, Window)
    
    -- Navigation
    self:CreateNavigation(MainWindow, Window)
    
    -- Content Area
    self:CreateContentArea(MainWindow, Window)

    return Window
end

-- ═══════════════════════════════════════════════════════════════
-- 🔝 TOP BAR
-- ═══════════════════════════════════════════════════════════════
function DrakthonHub:CreateTopBar(parent, title, window)
    local TopBar = Instance.new("Frame")
    TopBar.Name = "TopBar"
    TopBar.Size = UDim2.new(1, 0, 0, 50)
    TopBar.BackgroundColor3 = Theme.Surface
    TopBar.BorderSizePixel = 0
    TopBar.Parent = parent

    local TopBarCorner = Instance.new("UICorner")
    TopBarCorner.CornerRadius = UDim.new(0, 12)
    TopBarCorner.Parent = TopBar

    -- Cover bottom corners
    local CornerCover = Instance.new("Frame")
    CornerCover.Size = UDim2.new(1, 0, 0, 12)
    CornerCover.Position = UDim2.new(0, 0, 1, -12)
    CornerCover.BackgroundColor3 = Theme.Surface
    CornerCover.BorderSizePixel = 0
    CornerCover.Parent = TopBar

    -- Title with Icon
    local TitleContainer = Instance.new("Frame")
    TitleContainer.Size = UDim2.new(0, 200, 1, 0)
    TitleContainer.Position = UDim2.new(0, 15, 0, 0)
    TitleContainer.BackgroundTransparency = 1
    TitleContainer.Parent = TopBar

    local Icon = Instance.new("Frame")
    Icon.Name = "Icon"
    Icon.AnchorPoint = Vector2.new(0, 0.5)
    Icon.Position = UDim2.new(0, 0, 0.5, 0)
    Icon.Size = UDim2.new(0, 30, 0, 30)
    Icon.BackgroundColor3 = Theme.Primary
    Icon.BorderSizePixel = 0
    Icon.Parent = TitleContainer

    local IconCorner = Instance.new("UICorner")
    IconCorner.CornerRadius = UDim.new(1, 0)
    IconCorner.Parent = Icon

    local IconGradient = Instance.new("UIGradient")
    IconGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Theme.Primary),
        ColorSequenceKeypoint.new(1, Theme.Secondary)
    }
    IconGradient.Rotation = 45
    IconGradient.Parent = Icon

    -- Rotate icon continuously
    task.spawn(function()
        while Icon.Parent do
            IconGradient.Rotation = (IconGradient.Rotation + 1) % 360
            task.wait(0.05)
        end
    end)

    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Position = UDim2.new(0, 40, 0, 0)
    TitleLabel.Size = UDim2.new(1, -40, 1, 0)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Text = title
    TitleLabel.Font = Enum.Font.GothamBold
    TitleLabel.TextSize = 18
    TitleLabel.TextColor3 = Theme.Text
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Parent = TitleContainer

    -- Close Button
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.AnchorPoint = Vector2.new(1, 0.5)
    CloseButton.Position = UDim2.new(1, -15, 0.5, 0)
    CloseButton.Size = UDim2.new(0, 35, 0, 35)
    CloseButton.BackgroundColor3 = Color3.fromRGB(40, 40, 55)
    CloseButton.BorderSizePixel = 0
    CloseButton.Text = "✕"
    CloseButton.Font = Enum.Font.GothamBold
    CloseButton.TextSize = 18
    CloseButton.TextColor3 = Theme.Text
    CloseButton.Parent = TopBar

    local CloseCorner = Instance.new("UICorner")
    CloseCorner.CornerRadius = UDim.new(0, 8)
    CloseCorner.Parent = CloseButton

    CloseButton.MouseEnter:Connect(function()
        CreateTween(CloseButton, {BackgroundColor3 = Color3.fromRGB(255, 70, 70)}, 0.2):Play()
    end)

    CloseButton.MouseLeave:Connect(function()
        CreateTween(CloseButton, {BackgroundColor3 = Color3.fromRGB(40, 40, 55)}, 0.2):Play()
    end)

    CloseButton.MouseButton1Click:Connect(function()
        CreateTween(parent, {Size = UDim2.new(0, 0, 0, 0)}, 0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In):Play()
        task.wait(0.3)
        window.GUI:Destroy()
    end)

    -- Minimize Button
    local MinimizeButton = Instance.new("TextButton")
    MinimizeButton.Name = "MinimizeButton"
    MinimizeButton.AnchorPoint = Vector2.new(1, 0.5)
    MinimizeButton.Position = UDim2.new(1, -55, 0.5, 0)
    MinimizeButton.Size = UDim2.new(0, 35, 0, 35)
    MinimizeButton.BackgroundColor3 = Color3.fromRGB(40, 40, 55)
    MinimizeButton.BorderSizePixel = 0
    MinimizeButton.Text = "−"
    MinimizeButton.Font = Enum.Font.GothamBold
    MinimizeButton.TextSize = 20
    MinimizeButton.TextColor3 = Theme.Text
    MinimizeButton.Parent = TopBar

    local MinCorner = Instance.new("UICorner")
    MinCorner.CornerRadius = UDim.new(0, 8)
    MinCorner.Parent = MinimizeButton

    local isMinimized = false
    local originalSize = parent.Size

    MinimizeButton.MouseEnter:Connect(function()
        CreateTween(MinimizeButton, {BackgroundColor3 = Theme.Primary}, 0.2):Play()
    end)

    MinimizeButton.MouseLeave:Connect(function()
        CreateTween(MinimizeButton, {BackgroundColor3 = Color3.fromRGB(40, 40, 55)}, 0.2):Play()
    end)

    MinimizeButton.MouseButton1Click:Connect(function()
        isMinimized = not isMinimized
        if isMinimized then
            CreateTween(parent, {Size = UDim2.new(parent.Size.X.Scale, parent.Size.X.Offset, 0, 50)}, 0.3):Play()
            MinimizeButton.Text = "□"
        else
            CreateTween(parent, {Size = originalSize}, 0.3):Play()
            MinimizeButton.Text = "−"
        end
    end)

    -- Make window draggable
    local dragging = false
    local dragInput, mousePos, framePos

    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            mousePos = input.Position
            framePos = parent.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    TopBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - mousePos
            parent.Position = UDim2.new(
                framePos.X.Scale,
                framePos.X.Offset + delta.X,
                framePos.Y.Scale,
                framePos.Y.Offset + delta.Y
            )
        end
    end)
end

-- ═══════════════════════════════════════════════════════════════
-- 🧭 NAVIGATION BAR
-- ═══════════════════════════════════════════════════════════════
function DrakthonHub:CreateNavigation(parent, window)
    local NavBar = Instance.new("Frame")
    NavBar.Name = "NavigationBar"
    NavBar.Position = UDim2.new(0, 10, 0, 65)
    NavBar.Size = UDim2.new(1, -20, 0, 50)
    NavBar.BackgroundColor3 = Theme.Surface
    NavBar.BorderSizePixel = 0
    NavBar.Parent = parent

    local NavCorner = Instance.new("UICorner")
    NavCorner.CornerRadius = UDim.new(0, 25)
    NavCorner.Parent = NavBar

    -- Shadow effect
    local NavShadow = Instance.new("Frame")
    NavShadow.Name = "Shadow"
    NavShadow.Position = UDim2.new(0, 0, 0, 2)
    NavShadow.Size = UDim2.new(1, 0, 1, 0)
    NavShadow.BackgroundColor3 = Theme.Shadow
    NavShadow.BackgroundTransparency = 0.9
    NavShadow.BorderSizePixel = 0
    NavShadow.ZIndex = NavBar.ZIndex - 1
    NavShadow.Parent = NavBar

    local NavShadowCorner = Instance.new("UICorner")
    NavShadowCorner.CornerRadius = UDim.new(0, 25)
    NavShadowCorner.Parent = NavShadow

    -- Button Container
    local ButtonContainer = Instance.new("Frame")
    ButtonContainer.Name = "ButtonContainer"
    ButtonContainer.Size = UDim2.new(1, -20, 1, 0)
    ButtonContainer.Position = UDim2.new(0, 10, 0, 0)
    ButtonContainer.BackgroundTransparency = 1
    ButtonContainer.Parent = NavBar

    local ButtonLayout = Instance.new("UIListLayout")
    ButtonLayout.FillDirection = Enum.FillDirection.Horizontal
    ButtonLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    ButtonLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    ButtonLayout.Padding = UDim.new(0, 10)
    ButtonLayout.Parent = ButtonContainer

    -- Glider (selection indicator)
    local Glider = Instance.new("Frame")
    Glider.Name = "Glider"
    Glider.Size = UDim2.new(0, 60, 0, 40)
    Glider.BackgroundColor3 = Theme.Accent
    Glider.BorderSizePixel = 0
    Glider.ZIndex = NavBar.ZIndex - 1
    Glider.Parent = ButtonContainer

    local GliderCorner = Instance.new("UICorner")
    GliderCorner.CornerRadius = UDim.new(0, 20)
    GliderCorner.Parent = Glider

    window.NavBar = NavBar
    window.Glider = Glider
    window.ButtonContainer = ButtonContainer
end

-- ═══════════════════════════════════════════════════════════════
-- 📄 CONTENT AREA
-- ═══════════════════════════════════════════════════════════════
function DrakthonHub:CreateContentArea(parent, window)
    local ContentArea = Instance.new("Frame")
    ContentArea.Name = "ContentArea"
    ContentArea.Position = UDim2.new(0, 10, 0, 125)
    ContentArea.Size = UDim2.new(1, -20, 1, -135)
    ContentArea.BackgroundColor3 = Theme.Surface
    ContentArea.BorderSizePixel = 0
    ContentArea.Parent = parent

    local ContentCorner = Instance.new("UICorner")
    ContentCorner.CornerRadius = UDim.new(0, 10)
    ContentCorner.Parent = ContentArea

    -- Tab Container
    local TabContainer = Instance.new("Frame")
    TabContainer.Name = "TabContainer"
    TabContainer.Size = UDim2.new(1, 0, 1, 0)
    TabContainer.BackgroundTransparency = 1
    TabContainer.Parent = ContentArea

    window.ContentArea = ContentArea
    window.TabContainer = TabContainer
end

-- ═══════════════════════════════════════════════════════════════
-- 📑 CREATE TAB
-- ═══════════════════════════════════════════════════════════════
function DrakthonHub:CreateTab(window, config)
    config = config or {}
    config.Name = config.Name or "Tab"
    config.Icon = config.Icon or "🏠"

    -- Create Tab Button
    local TabButton = Instance.new("TextButton")
    TabButton.Name = config.Name
    TabButton.Size = UDim2.new(0, 60, 0, 40)
    TabButton.BackgroundTransparency = 1
    TabButton.Text = ""
    TabButton.Parent = window.ButtonContainer

    -- Icon
    local IconLabel = Instance.new("TextLabel")
    IconLabel.Size = UDim2.new(1, 0, 1, 0)
    IconLabel.BackgroundTransparency = 1
    IconLabel.Text = config.Icon
    IconLabel.Font = Enum.Font.GothamBold
    IconLabel.TextSize = 20
    IconLabel.TextColor3 = Theme.Text
    IconLabel.Parent = TabButton

    -- Notification Badge (if needed)
    if config.Notification then
        local NotificationBadge = Instance.new("Frame")
        NotificationBadge.Name = "Notification"
        NotificationBadge.AnchorPoint = Vector2.new(1, 0)
        NotificationBadge.Position = UDim2.new(1, -5, 0, 5)
        NotificationBadge.Size = UDim2.new(0, 18, 0, 18)
        NotificationBadge.BackgroundColor3 = Theme.Primary
        NotificationBadge.BorderSizePixel = 0
        NotificationBadge.ZIndex = TabButton.ZIndex + 1
        NotificationBadge.Parent = TabButton

        local NotifCorner = Instance.new("UICorner")
        NotifCorner.CornerRadius = UDim.new(1, 0)
        NotifCorner.Parent = NotificationBadge

        local NotifText = Instance.new("TextLabel")
        NotifText.Size = UDim2.new(1, 0, 1, 0)
        NotifText.BackgroundTransparency = 1
        NotifText.Text = tostring(config.Notification)
        NotifText.Font = Enum.Font.GothamBold
        NotifText.TextSize = 10
        NotifText.TextColor3 = Theme.Text
        NotifText.Parent = NotificationBadge
    end

    -- Create Tab Content
    local TabContent = Instance.new("ScrollingFrame")
    TabContent.Name = config.Name .. "Content"
    TabContent.Size = UDim2.new(1, -20, 1, -20)
    TabContent.Position = UDim2.new(0, 10, 0, 10)
    TabContent.BackgroundTransparency = 1
    TabContent.BorderSizePixel = 0
    TabContent.ScrollBarThickness = 4
    TabContent.ScrollBarImageColor3 = Theme.Primary
    TabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
    TabContent.Visible = false
    TabContent.Parent = window.TabContainer

    local ContentLayout = Instance.new("UIListLayout")
    ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ContentLayout.Padding = UDim.new(0, 10)
    ContentLayout.Parent = TabContent

    -- Auto-resize canvas
    ContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        TabContent.CanvasSize = UDim2.new(0, 0, 0, ContentLayout.AbsoluteContentSize.Y + 20)
    end)

    -- Tab Button Click Handler
    TabButton.MouseButton1Click:Connect(function()
        -- Hide all tabs
        for _, tab in pairs(window.Tabs) do
            tab.Content.Visible = false
            CreateTween(tab.Button.IconLabel, {TextColor3 = Theme.TextSecondary}, 0.2):Play()
        end

        -- Show selected tab
        TabContent.Visible = true
        window.CurrentTab = config.Name
        CreateTween(IconLabel, {TextColor3 = Theme.Secondary}, 0.2):Play()

        -- Move glider
        local buttonPos = TabButton.AbsolutePosition
        local containerPos = window.ButtonContainer.AbsolutePosition
        local relativePos = buttonPos.X - containerPos.X

        CreateTween(window.Glider, {
            Position = UDim2.new(0, relativePos, 0.5, -20),
            Size = UDim2.new(0, TabButton.AbsoluteSize.X, 0, 40)
        }, 0.25, Enum.EasingStyle.Quad):Play()
    end)

    -- Hover effect
    TabButton.MouseEnter:Connect(function()
        if window.CurrentTab ~= config.Name then
            CreateTween(TabButton, {Size = UDim2.new(0, 60, 0, 45)}, 0.2):Play()
        end
    end)

    TabButton.MouseLeave:Connect(function()
        CreateTween(TabButton, {Size = UDim2.new(0, 60, 0, 40)}, 0.2):Play()
    end)

    local Tab = {
        Button = TabButton,
        Content = TabContent,
        Name = config.Name
    }

    TabButton.IconLabel = IconLabel
    window.Tabs[config.Name] = Tab

    -- Auto-select first tab
    if not window.CurrentTab then
        TabButton.MouseButton1Click:Fire()
    end

    return self:CreateTabAPI(TabContent)
end

-- ═══════════════════════════════════════════════════════════════
-- 🎛️ TAB API (للعناصر داخل التاب)
-- ═══════════════════════════════════════════════════════════════
function DrakthonHub:CreateTabAPI(tabContent)
    local TabAPI = {}

    -- Button
    function TabAPI:CreateButton(config)
        config = config or {}
        config.Text = config.Text or "Button"
        config.Callback = config.Callback or function() end

        local Button = Instance.new("TextButton")
        Button.Name = "Button"
        Button.Size = UDim2.new(1, 0, 0, 40)
        Button.BackgroundColor3 = Color3.fromRGB(40, 40, 55)
        Button.BorderSizePixel = 0
        Button.Font = Enum.Font.Gotham
        Button.TextSize = 14
        Button.TextColor3 = Theme.Text
        Button.Text = config.Text
        Button.Parent = tabContent

        local ButtonCorner = Instance.new("UICorner")
        ButtonCorner.CornerRadius = UDim.new(0, 8)
        ButtonCorner.Parent = Button

        local ButtonGradient = Instance.new("UIGradient")
        ButtonGradient.Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0, Color3.fromRGB(40, 40, 55)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(50, 50, 65))
        }
        ButtonGradient.Rotation = 90
        ButtonGradient.Parent = Button

        Button.MouseEnter:Connect(function()
            CreateTween(Button, {BackgroundColor3 = Theme.Primary}, 0.2):Play()
        end)

        Button.MouseLeave:Connect(function()
            CreateTween(Button, {BackgroundColor3 = Color3.fromRGB(40, 40, 55)}, 0.2):Play()
        end)

        Button.MouseButton1Click:Connect(function()
            CreateTween(Button, {Size = UDim2.new(1, 0, 0, 38)}, 0.1):Play()
            task.wait(0.1)
            CreateTween(Button, {Size = UDim2.new(1, 0, 0, 40)}, 0.1):Play()
            config.Callback()
        end)

        return Button
    end

    -- Toggle
    function TabAPI:CreateToggle(config)
        config = config or {}
        config.Text = config.Text or "Toggle"
        config.Default = config.Default or false
        config.Callback = config.Callback or function() end

        local ToggleFrame = Instance.new("Frame")
        ToggleFrame.Name = "Toggle"
        ToggleFrame.Size = UDim2.new(1, 0, 0, 40)
        ToggleFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 55)
        ToggleFrame.BorderSizePixel = 0
        ToggleFrame.Parent = tabContent

        local ToggleCorner = Instance.new("UICorner")
        ToggleCorner.CornerRadius = UDim.new(0, 8)
        ToggleCorner.Parent = ToggleFrame

        local ToggleLabel = Instance.new("TextLabel")
        ToggleLabel.Size = UDim2.new(1, -60, 1, 0)
        ToggleLabel.Position = UDim2.new(0, 15, 0, 0)
        ToggleLabel.BackgroundTransparency = 1
        ToggleLabel.Text = config.Text
        ToggleLabel.Font = Enum.Font.Gotham
        ToggleLabel.TextSize = 14
        ToggleLabel.TextColor3 = Theme.Text
        ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
        ToggleLabel.Parent = ToggleFrame

        local ToggleButton = Instance.new("TextButton")
        ToggleButton.AnchorPoint = Vector2.new(1, 0.5)
        ToggleButton.Position = UDim2.new(1, -15, 0.5, 0)
        ToggleButton.Size = UDim2.new(0, 45, 0, 25)
        ToggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 75)
        ToggleButton.BorderSizePixel = 0
        ToggleButton.Text = ""
        ToggleButton.Parent = ToggleFrame

        local ToggleButtonCorner = Instance.new("UICorner")
        ToggleButtonCorner.CornerRadius = UDim.new(1, 0)
        ToggleButtonCorner.Parent = ToggleButton

        local ToggleIndicator = Instance.new("Frame")
        ToggleIndicator.Name = "Indicator"
        ToggleIndicator.Position = UDim2.new(0, 3, 0.5, -10)
        ToggleIndicator.Size = UDim2.new(0, 20, 0, 20)
        ToggleIndicator.BackgroundColor3 = Theme.Text
        ToggleIndicator.BorderSizePixel = 0
        ToggleIndicator.Parent = ToggleButton

        local IndicatorCorner = Instance.new("UICorner")
        IndicatorCorner.CornerRadius = UDim.new(1, 0)
        IndicatorCorner.Parent = ToggleIndicator

        local toggled = config.Default

        local function updateToggle()
            if toggled then
                CreateTween(ToggleButton, {BackgroundColor3 = Theme.Primary}, 0.2):Play()
                CreateTween(ToggleIndicator, {Position = UDim2.new(1, -23, 0.5, -10)}, 0.2):Play()
            else
                CreateTween(ToggleButton, {BackgroundColor3 = Color3.fromRGB(60, 60, 75)}, 0.2):Play()
                CreateTween(ToggleIndicator, {Position = UDim2.new(0, 3, 0.5, -10)}, 0.2):Play()
            end
            config.Callback(toggled)
        end

        ToggleButton.MouseButton1Click:Connect(function()
            toggled = not toggled
            updateToggle()
        end)

        if config.Default then
            updateToggle()
        end

        return ToggleFrame
    end

    -- Slider
    function TabAPI:CreateSlider(config)
        config = config or {}
        config.Text = config.Text or "Slider"
        config.Min = config.Min or 0
        config.Max = config.Max or 100
        config.Default = config.Default or 50
        config.Callback = config.Callback or function() end

        local SliderFrame = Instance.new("Frame")
        SliderFrame.Name = "Slider"
        SliderFrame.Size = UDim2.new(1, 0, 0, 60)
        SliderFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 55)
        SliderFrame.BorderSizePixel = 0
        SliderFrame.Parent = tabContent

        local SliderCorner = Instance.new("UICorner")
        SliderCorner.CornerRadius = UDim.new(0, 8)
        SliderCorner.Parent = SliderFrame

        local SliderLabel = Instance.new("TextLabel")
        SliderLabel.Size = UDim2.new(1, -30, 0, 25)
        SliderLabel.Position = UDim2.new(0, 15, 0, 5)
        SliderLabel.BackgroundTransparency = 1
        SliderLabel.Text = config.Text
        SliderLabel.Font = Enum.Font.Gotham
        SliderLabel.TextSize = 14
        SliderLabel.TextColor3 = Theme.Text
        SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
        SliderLabel.Parent = SliderFrame

        local ValueLabel = Instance.new("TextLabel")
        ValueLabel.AnchorPoint = Vector2.new(1, 0)
        ValueLabel.Size = UDim2.new(0, 50, 0, 25)
        ValueLabel.Position = UDim2.new(1, -15, 0, 5)
        ValueLabel.BackgroundTransparency = 1
        ValueLabel.Text = tostring(config.Default)
        ValueLabel.Font = Enum.Font.GothamBold
        ValueLabel.TextSize = 14
        ValueLabel.TextColor3 = Theme.Primary
        ValueLabel.TextXAlignment = Enum.TextXAlignment.Right
        ValueLabel.Parent = SliderFrame

        local SliderBar = Instance.new("Frame")
        SliderBar.Position = UDim2.new(0, 15, 0, 35)
        SliderBar.Size = UDim2.new(1, -30, 0, 6)
        SliderBar.BackgroundColor3 = Color3.fromRGB(60, 60, 75)
        SliderBar.BorderSizePixel = 0
        SliderBar.Parent = SliderFrame

        local SliderBarCorner = Instance.new("UICorner")
        SliderBarCorner.CornerRadius = UDim.new(1, 0)
        SliderBarCorner.Parent = SliderBar

        local SliderFill = Instance.new("Frame")
        SliderFill.Name = "Fill"
        SliderFill.Size = UDim2.new(0.5, 0, 1, 0)
        SliderFill.BackgroundColor3 = Theme.Primary
        SliderFill.BorderSizePixel = 0
        SliderFill.Parent = SliderBar

        local SliderFillCorner = Instance.new("UICorner")
        SliderFillCorner.CornerRadius = UDim.new(1, 0)
        SliderFillCorner.Parent = SliderFill

        local SliderButton = Instance.new("TextButton")
        SliderButton.AnchorPoint = Vector2.new(0.5, 0.5)
        SliderButton.Position = UDim2.new(0.5, 0, 0.5, 0)
        SliderButton.Size = UDim2.new(0, 16, 0, 16)
        SliderButton.BackgroundColor3 = Theme.Text
        SliderButton.BorderSizePixel = 0
        SliderButton.Text = ""
        SliderButton.Parent = SliderFill

        local SliderButtonCorner = Instance.new("UICorner")
        SliderButtonCorner.CornerRadius = UDim.new(1, 0)
        SliderButtonCorner.Parent = SliderButton

        local dragging = false
        local currentValue = config.Default

        local function updateSlider(input)
            local pos = math.clamp((input.Position.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X, 0, 1)
            currentValue = math.floor(config.Min + (config.Max - config.Min) * pos)
            ValueLabel.Text = tostring(currentValue)
            
            CreateTween(SliderFill, {Size = UDim2.new(pos, 0, 1, 0)}, 0.1):Play()
            config.Callback(currentValue)
        end

        SliderButton.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
            end
        end)

        SliderButton.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = false
            end
        end)

        UserInputService.InputChanged:Connect(function(input)
            if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                updateSlider(input)
            end
        end)

        SliderBar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                updateSlider(input)
            end
        end)

        -- Set default value
        local defaultPos = (config.Default - config.Min) / (config.Max - config.Min)
        SliderFill.Size = UDim2.new(defaultPos, 0, 1, 0)

        return SliderFrame
    end

    -- Textbox
    function TabAPI:CreateTextbox(config)
        config = config or {}
        config.Text = config.Text or "Textbox"
        config.Placeholder = config.Placeholder or "Enter text..."
        config.Callback = config.Callback or function() end

        local TextboxFrame = Instance.new("Frame")
        TextboxFrame.Name = "Textbox"
        TextboxFrame.Size = UDim2.new(1, 0, 0, 60)
        TextboxFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 55)
        TextboxFrame.BorderSizePixel = 0
        TextboxFrame.Parent = tabContent

        local TextboxCorner = Instance.new("UICorner")
        TextboxCorner.CornerRadius = UDim.new(0, 8)
        TextboxCorner.Parent = TextboxFrame

        local TextboxLabel = Instance.new("TextLabel")
        TextboxLabel.Size = UDim2.new(1, -30, 0, 20)
        TextboxLabel.Position = UDim2.new(0, 15, 0, 5)
        TextboxLabel.BackgroundTransparency = 1
        TextboxLabel.Text = config.Text
        TextboxLabel.Font = Enum.Font.Gotham
        TextboxLabel.TextSize = 14
        TextboxLabel.TextColor3 = Theme.Text
        TextboxLabel.TextXAlignment = Enum.TextXAlignment.Left
        TextboxLabel.Parent = TextboxFrame

        local Textbox = Instance.new("TextBox")
        Textbox.Position = UDim2.new(0, 15, 0, 30)
        Textbox.Size = UDim2.new(1, -30, 0, 25)
        Textbox.BackgroundColor3 = Color3.fromRGB(30, 30, 45)
        Textbox.BorderSizePixel = 0
        Textbox.Font = Enum.Font.Gotham
        Textbox.TextSize = 13
        Textbox.TextColor3 = Theme.Text
        Textbox.PlaceholderText = config.Placeholder
        Textbox.PlaceholderColor3 = Theme.TextSecondary
        Textbox.Text = ""
        Textbox.ClearTextOnFocus = false
        Textbox.Parent = TextboxFrame

        local TextboxInputCorner = Instance.new("UICorner")
        TextboxInputCorner.CornerRadius = UDim.new(0, 6)
        TextboxInputCorner.Parent = Textbox

        Textbox.FocusLost:Connect(function(enterPressed)
            if enterPressed then
                config.Callback(Textbox.Text)
            end
        end)

        return TextboxFrame
    end

    -- Label
    function TabAPI:CreateLabel(text)
        local Label = Instance.new("TextLabel")
        Label.Name = "Label"
        Label.Size = UDim2.new(1, 0, 0, 30)
        Label.BackgroundColor3 = Color3.fromRGB(40, 40, 55)
        Label.BorderSizePixel = 0
        Label.Font = Enum.Font.Gotham
        Label.TextSize = 14
        Label.TextColor3 = Theme.Text
        Label.Text = text or "Label"
        Label.Parent = tabContent

        local LabelCorner = Instance.new("UICorner")
        LabelCorner.CornerRadius = UDim.new(0, 8)
        LabelCorner.Parent = Label

        return Label
    end

    -- Dropdown
    function TabAPI:CreateDropdown(config)
        config = config or {}
        config.Text = config.Text or "Dropdown"
        config.Options = config.Options or {"Option 1", "Option 2", "Option 3"}
        config.Callback = config.Callback or function() end

        local DropdownFrame = Instance.new("Frame")
        DropdownFrame.Name = "Dropdown"
        DropdownFrame.Size = UDim2.new(1, 0, 0, 40)
        DropdownFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 55)
        DropdownFrame.BorderSizePixel = 0
        DropdownFrame.ClipsDescendants = true
        DropdownFrame.Parent = tabContent

        local DropdownCorner = Instance.new("UICorner")
        DropdownCorner.CornerRadius = UDim.new(0, 8)
        DropdownCorner.Parent = DropdownFrame

        local DropdownButton = Instance.new("TextButton")
        DropdownButton.Size = UDim2.new(1, 0, 0, 40)
        DropdownButton.BackgroundTransparency = 1
        DropdownButton.Font = Enum.Font.Gotham
        DropdownButton.TextSize = 14
        DropdownButton.TextColor3 = Theme.Text
        DropdownButton.Text = "  " .. config.Text .. ": " .. config.Options[1]
        DropdownButton.TextXAlignment = Enum.TextXAlignment.Left
        DropdownButton.Parent = DropdownFrame

        local Arrow = Instance.new("TextLabel")
        Arrow.AnchorPoint = Vector2.new(1, 0.5)
        Arrow.Position = UDim2.new(1, -15, 0, 20)
        Arrow.Size = UDim2.new(0, 20, 0, 20)
        Arrow.BackgroundTransparency = 1
        Arrow.Text = "▼"
        Arrow.Font = Enum.Font.Gotham
        Arrow.TextSize = 12
        Arrow.TextColor3 = Theme.Primary
        Arrow.Parent = DropdownFrame

        local OptionsList = Instance.new("ScrollingFrame")
        OptionsList.Position = UDim2.new(0, 0, 0, 40)
        OptionsList.Size = UDim2.new(1, 0, 0, 0)
        OptionsList.BackgroundTransparency = 1
        OptionsList.BorderSizePixel = 0
        OptionsList.ScrollBarThickness = 4
        OptionsList.ScrollBarImageColor3 = Theme.Primary
        OptionsList.CanvasSize = UDim2.new(0, 0, 0, 0)
        OptionsList.Parent = DropdownFrame

        local OptionsLayout = Instance.new("UIListLayout")
        OptionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
        OptionsLayout.Padding = UDim.new(0, 2)
        OptionsLayout.Parent = OptionsList

        local isOpen = false

        for _, option in ipairs(config.Options) do
            local OptionButton = Instance.new("TextButton")
            OptionButton.Size = UDim2.new(1, 0, 0, 35)
            OptionButton.BackgroundColor3 = Color3.fromRGB(50, 50, 65)
            OptionButton.BorderSizePixel = 0
            OptionButton.Font = Enum.Font.Gotham
            OptionButton.TextSize = 13
            OptionButton.TextColor3 = Theme.Text
            OptionButton.Text = option
            OptionButton.Parent = OptionsList

            local OptionCorner = Instance.new("UICorner")
            OptionCorner.CornerRadius = UDim.new(0, 6)
            OptionCorner.Parent = OptionButton

            OptionButton.MouseEnter:Connect(function()
                CreateTween(OptionButton, {BackgroundColor3 = Theme.Primary}, 0.2):Play()
            end)

            OptionButton.MouseLeave:Connect(function()
                CreateTween(OptionButton, {BackgroundColor3 = Color3.fromRGB(50, 50, 65)}, 0.2):Play()
            end)

            OptionButton.MouseButton1Click:Connect(function()
                DropdownButton.Text = "  " .. config.Text .. ": " .. option
                config.Callback(option)
                
                isOpen = false
                CreateTween(DropdownFrame, {Size = UDim2.new(1, 0, 0, 40)}, 0.3):Play()
                CreateTween(Arrow, {Rotation = 0}, 0.3):Play()
            end)
        end

        OptionsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            OptionsList.CanvasSize = UDim2.new(0, 0, 0, OptionsLayout.AbsoluteContentSize.Y)
        end)

        DropdownButton.MouseButton1Click:Connect(function()
            isOpen = not isOpen
            if isOpen then
                local contentHeight = math.min(OptionsLayout.AbsoluteContentSize.Y, 150)
                CreateTween(DropdownFrame, {Size = UDim2.new(1, 0, 0, 40 + contentHeight + 10)}, 0.3):Play()
                CreateTween(OptionsList, {Size = UDim2.new(1, 0, 0, contentHeight)}, 0.3):Play()
                CreateTween(Arrow, {Rotation = 180}, 0.3):Play()
            else
                CreateTween(DropdownFrame, {Size = UDim2.new(1, 0, 0, 40)}, 0.3):Play()
                CreateTween(OptionsList, {Size = UDim2.new(1, 0, 0, 0)}, 0.3):Play()
                CreateTween(Arrow, {Rotation = 0}, 0.3):Play()
            end
        end)

        return DropdownFrame
    end

    return TabAPI
end

-- ═══════════════════════════════════════════════════════════════
-- 🚀 RETURN LIBRARY
-- ═══════════════════════════════════════════════════════════════
return DrakthonHub
